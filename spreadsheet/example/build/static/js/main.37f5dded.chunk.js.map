{"version":3,"sources":["webpack:///../dist/Styles/main.scss?079b","../../dist/Styles/main.scss","../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorMessage.js","../../src/common/ErrorConstants.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/functions/FormulaProcessor.js","../../src/utilities/utils.js","App.js","index.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","this","document","window","constructor","value","Date","ev","updated","date","state","Intl","year","month","day","dateTimeFormat","props","column","type","ref","onChange","onValueChanged","React","DatePicker","PropTypes","string","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","onClick","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","data-testid","node","drag","drop","text","any","ColumnsList","columnsArray","columns","c","atIndex","setColumns","update","$splice","values","temp","display","flexWrap","key","handleReorderList","HTML5toTouch","backends","backend","HTML5Backend","enableMouseEvents","preview","transition","TouchTransition","columnReorderEntityList","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","isExistingAllSelect","typeToBeAdded","columnSelectList","existingLeftPinnedList","indexOfInsertion","e","searchKey","String","existingList","filtererdColumnReorderList","colsList","maxLeftPinnedColumns","checked","disabled","columHeaderName","subItem","reordered","handleheaderNameList","maxLeftPinnedColumn","closeColumnReOrdering","updateTableAsPerRowChooser","onClickAway","handleClick","placeholder","filterColumnReorderList","length","color","createColumnsArrayFromProps","ColumnReordering","headerKeys","existingPinnedHeadersList","Card","findCard","moveCard","SortingList","sortsArray","card","cards","setCards","handleReorderListOfSort","sortingOrderList","columnFieldValue","rowLists","existingSortingOrderList","sortBy","order","sortOn","rowList","JSON","clearAllSortingParams","errorMessage","sortingOrderLists","rowsValue","row","name","sortingKey","event","unique","showError","element","setTableAsPerSortingParams","reOrderedIndexList","handleTableSortSwap","closeSorting","sortingParamsObjectList","onKeyDown","clearAll","App","columnEntityList","columnsList","existingColumnEntityList","downLaodFileType","columnValueList","filteredRow","filteredRowValues","filteredRowHeader","rows","rowLength","filteredColumnVal","rowFilteredValues","rowFilteredHeader","columnName","doc","startY","head","body","tableWidth","headStyles","fillColor","theme","margin","top","right","bottom","left","a","fileExtension","fileName","ws","XLSX","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","URL","href","link","columnLength","fileLength","clickTag","warning","closeExport","columnSearchLogic","selectDownLoadType","ExportData","DropDownEditor","selectors","Data","swapList","swapSortList","NumericFilter","defaultCmp","b","getCmpFunc","primer","reverse","cmp","fields","nFields","arguments","field","A","B","result","l","reorderedSwap","existingColumnsHeaderList","rePositionedArray","inComingColumnsHeaderList","pinnedColumnsList","singleHeaderOneList","headerItem","tempList","pinnedReorder","newIndex","arr","k","selectedIndexes","headerNameList","columnReorderingComponent","searchValue","filteringRows","columnField","sortingPanelComponent","args","sortingOrderSwapList","pageRowCount","hasSingleSortkey","sortDirection","sortColumn","dataRows","Object","pageIndex","subDataSet","exportData","exportComponent","tableSortList","hasFilter","hasSearchKey","existingRows","sortingOrderNameList","nameOfItem","rowItem","existingSortingOrderSwapList","stringOfItemIndex","str","$1","sortColumns","sortDirections","hasGropSortKeys","dtRows","rowsToSplit","chunks","dtSet","rw","tempRows","count","filterVal","filters","rowIndexes","r","action","updatedArray","updatedValue","console","expression","columnArray","exp","RegCode","parameter1","parameter2","exper1","RegCode1","Number","moreParameters","expers","RegCodes","exper2","RegCode2","FormulaProcessor","colKeyArray","ar","tempSum","prevRow","prevAction","columnKeyArray","filter","obj","val","operation","Math","applyFormula","selectBulkData","junk","firstPage","dataSet","rowsRemaining","target","Promise","resolve","to","from","newRows","prev","filteredRows","updatedRows","rowSlice","warningStatus","rVal","saveRows","dt","dataSetVar","height","colItem","dataSource","resizeEvent","rowsToSearch","getFilterResult","getSingleSortResult","groupSort","onScroll","srchRows","sortingPanel","columnReorderingPannel","exportColumnData","closeWarningStatus","clearSearchValue","toolbar","enableFilter","getValidFilterValues","columnKey","minHeight","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","idx","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","globalSearch","handleWarningStatus","Spreadsheet","airportCodes","updateCellData","globalSearchLogic","pageSize","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","width","filterType","segmenToCode","segmentFromCode","forEach","tempArray","it","slice","gridHeight","fromRow","toRow","updateType","log","selectedRows","undefined","ReactDOM","render","getElementById"],"mappings":"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Q,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAEhB,CACIrQ,IAAK,YACLoE,KAAM,YACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAEhB,CACIrQ,IAAK,eACLoE,KAAM,eACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAEhB,CACIrQ,IAAK,YACLoE,KAAM,YACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAGhB,CACIrQ,IAAK,KACLoE,KAAM,KACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAEhB,CACIrQ,IAAK,kBACLoE,KAAM,oBACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,IAEhB,CACIrQ,IAAK,sBACLoE,KAAM,wBACN4O,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZlD,WAAY,KAKdmD,EAAe,CACjB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAIEC,EAAkB,CACpB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAqCJnU,EAAQoU,SAAQ,SAAC3V,GACb,GAAiB,cAAbA,EAAKiC,IAAqB,CAC1B,IAAI2T,EAAY,GAChBH,EAAaE,SAAQ,SAACE,GAClBD,EAAUtY,KAAK,CAAE+B,GAAIwW,EAAIlY,MAAOkY,OAEpC7V,EAAKsS,WAAasD,OACf,GAAiB,gBAAb5V,EAAKiC,IAAuB,CACnC,IAAI2T,EAAY,GAChBF,EAAgBC,SAAQ,SAACE,GACrBD,EAAUtY,KAAK,CAAE+B,GAAIwW,EAAIlY,MAAOkY,OAEpC7V,EAAKsS,WAAasD,MAI1B1W,qBAAU,WAKN6V,EAAQpN,KACT,CAACA,IA0BJ,OAAI0B,EAEI,6BAKI,kBAAC,GAAD,CACI1B,KAAM0B,EAAKyM,MAAM,EAnjBhB,KAojBD3E,QAAS9H,EACTyL,SArjBC,IAsjBDlG,MAtjBC,IAujBDrN,QAASA,EACTwU,WA9jBG,OA+jBHnB,eA/FO,SAACoB,EAASC,EAAOtY,EAAOuY,GACxB,gBAAfA,GACA9G,QAAQ+G,IACJ,gBACAH,EACA,iBACArY,EACA,iBACAuY,EACA,cACAD,GAGW,cAAfC,GACA9G,QAAQ+G,IACJ,WACAH,EACA,SACAC,EACA,iBACAtY,EACA,iBACAuY,IA0EIlF,eApEO,SAACoF,GACpBhH,QAAQ+G,IAAI,gBAAiBC,IAoEjBnS,oBA1jBY,EA2jBZ4N,YArCI,SAAC,GAGjB,IAHkD,IAA/BmE,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOnY,EAAc,EAAdA,QAE7BgE,EADM,YAAOuH,GACGyM,QACb7Y,EAAI+Y,EAAS/Y,GAAKgZ,EAAOhZ,IAC9B6E,EAAK7E,GAAL,2BACO6E,EAAK7E,IACLa,GAGXiX,EAAQjT,GACRsN,QAAQ+G,IAAI,eAAgBrU,YA+BZuU,IAAThN,EACA,4CAEA,MC3kBfiN,IAASC,OAAO,kBAAC,GAAD,MAAS/Y,SAASgZ,eAAe,W","file":"static/js/main.37f5dded.chunk.js","sourcesContent":["var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./main.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--default: rgba(26, 72, 105);--secondary: #f9fafb;--text-light: #566a81;--titlecolor: rgba(26, 72, 105);--button-blue:#0e4bda;--danger: #ff0000;--white: #fff;--dark-grey:#9ea2a5;--light-grey:#ccc;--border-grey: #d8d8d8;--placeholder: #bbbbbb;--box-shadow: rgba(32, 77, 111, 0.2);--scroll-track:#f1f1f1;--scroll-thumb:#c1c1c1;--focus: #199ed8;--border-table:#d2d5de;--em-base: 16}body{color:var(--text-light);font-family:sans-serif,Arial,\\\"Segoe UI\\\",serif;font-size:.75rem}::placeholder{color:#bbb}::-ms-input-placeholder{color:#bbb}::-ms-input-placeholder{color:#bbb}.error{color:var(--danger)}.txt{height:25px;border-radius:3px;padding:1px 0 0 3px;font-size:12px;color:#000;border:#cfd0d0 solid 1px}.neo-grid-header{background-color:var(--secondary);display:flex;padding:20px 15px;justify-content:space-between}.neo-grid-header__results{display:flex;font-size:.875rem;color:var(--titlecolor);font-weight:700}.neo-grid-header__results span{margin-left:5px;display:inline-block}.neo-grid-header__results .showing{margin-left:5px;padding-left:5px;position:relative}.neo-grid-header__results .showing:before{content:\\\"\\\";position:absolute;height:15px;width:1px;left:0;top:3px;background:var(--default)}.neo-grid-header__utilities{display:flex;align-items:center}.neo-grid-header__utilities .txt-wrap{position:relative;right:31px}.neo-grid-header__utilities .txt-wrap .txt{padding:1px 0 0 23px}.neo-grid-header__utilities .txt-wrap i{position:absolute;left:7px;top:4px}.neo-grid-header__utilities .utilities-icon{margin-left:10px;border:var(--border-grey) solid 1px;padding:0 8px;border-radius:3px;cursor:pointer;line-height:1px;height:25px;display:flex;align-items:center}.neo-popover{z-index:16;box-shadow:0px 15px 30px var(--box-shadow);position:absolute;font-size:.875rem;color:var(--titlecolor);line-height:32px;top:60px;right:25px;transition:0.5s;background:var(--white);border:1px solid var(--border-grey)}.neo-popover:before{width:0px;height:0px;border-left:11px solid transparent;border-right:11px solid transparent;border-bottom:11px solid var(--white);content:\\\"\\\";top:-10px;position:absolute;right:69px}.neo-popover ::-webkit-scrollbar{width:6px}.neo-popover ::-webkit-scrollbar-track{background:var(--scroll-track)}.neo-popover ::-webkit-scrollbar-thumb{background:var(--scroll-thumb)}.neo-popover ::-webkit-scrollbar-thumb:hover{background:var(--light-grey)}.neo-popover__title{display:flex;border-bottom:1px solid var(--border-grey);padding:5px 10px}.neo-popover__title h2{font-size:.875rem;margin:0}.neo-popover__content{margin:10px;min-height:50px;overflow-y:auto;max-height:150px;overflow-x:hidden}.neo-popover__close{margin-left:auto;font-size:1.125rem;cursor:pointer}.neo-popover__sort{width:497px}.neo-popover__sort .sort__bodyContent{display:flex}.neo-popover__sort .sort__section{margin:0px 0px 15px 41px;display:flex;color:var(--dark-grey);width:14%;cursor:pointer}.neo-popover__sort .sort__section span{font-size:1.375rem;line-height:13px;color:#3c476f}.neo-popover__sort .sort__section .sort__txt{margin-left:5px;color:#3c476f;line-height:normal;font-size:.75rem;font-weight:normal}.neo-popover__sort ul{display:flex;width:100%;justify-content:space-around}.neo-popover__sort ul li{font-size:.75rem;position:relative;left:-28px}.neo-popover__sort ul li:nth-child(2){left:-58px}.neo-popover__sort ul li:nth-child(3){left:-88px}.neo-popover__sort .sort__reorder{padding:0px 6px;font-size:.75rem}.neo-popover__sort .sort__reorder .sort__icon{margin:2px 0 0;cursor:pointer}.neo-popover__sort .sort__reorder .custom__ctrl{width:120px;height:28px;border-radius:3px;border-color:#d7d7d7;color:rgba(26,72,105,0.6)}.neo-popover__sort .sort__reorder .temp{font-size:3.125rem}.neo-popover__sort .sort__footer{padding:10px;border-top:var(--light-grey);display:flex}.neo-popover__sort .sort__footer .sort__btns{margin-left:auto}.neo-popover__sort .sort__footer .btns{border:none;background:var(--white);border-radius:5px;width:88px;margin-left:10px;height:28px;color:var(--button-blue);cursor:pointer}.neo-popover__sort .sort__footer .btns__save{color:var(--white);background:var(--button-blue)}.neo-popover__sort .icon-close{font-size:.9375rem}.neo-popover__sort .sort-warning{margin-bottom:10px;padding-left:43px;color:var(--danger)}.neo-popover.neo-popover--column{right:15px}.neo-popover.neo-popover--column:before{right:40px}.neo-popover__column{display:flex}.neo-popover__column .column__header{display:flex;border-bottom:1px solid var(--light-grey);padding:10px 10px 2px 10px}.neo-popover__column .column__chooser{border-right:1px solid var(--light-grey)}.neo-popover__column .column__chooser .column__body{padding:10px;margin-bottom:10px;height:440px;overflow-y:auto;overflow-x:hidden}.neo-popover__column .column__chooser .column__info{font-size:12px;border-bottom:#eee solid 1px;width:100%}.neo-popover__column .column__chooser .column__selectAll{display:flex;padding:0px 10px}.neo-popover__column .column__chooser .custom__ctrl{border:1px solid var(--light-grey);border-radius:5px;padding:0px 5px;width:100%;height:25px;font-size:.6875rem}.neo-popover__column .column__chooser .column__wrap{display:flex;border:1px solid var(--light-grey);border-radius:5px;padding:0px 10px}.neo-popover__column .column__chooser .column__wrap .column__txt{font-size:.75rem;color:var(--titlecolor)}.neo-popover__column .column__chooser .column__checkbox{margin-right:10px}.neo-popover__column .column__settings .column__close{margin-left:auto;font-size:1.125rem;cursor:pointer}.neo-popover__column .column__settings .column__body{display:flex;padding:10px;flex-wrap:wrap;overflow-y:scroll;height:380px;width:768px;padding-bottom:60px}.neo-popover__column .column__settings .column__reorder{border:1px solid #8da3b4;border-radius:3px;text-align:center;min-height:150px;margin:10px 5px;padding:10px 3px;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-webkit-touch-callout:none;min-width:100px;max-width:100px;word-break:break-all;line-height:normal;font-size:.75rem}.neo-popover__column .column__settings .column__reorder.full-width{width:95%;max-width:none;height:auto;min-height:80px;max-height:80px;text-align:left;padding-left:10px}.neo-popover__column .column__settings .column__reorder .column_drag{margin-bottom:10px}.neo-popover__column .column__settings .column__reorder__name{word-break:break-all;line-height:15px}.neo-popover__column .column__settings .column__wrap{display:flex;justify-content:center}.neo-popover__column .column__settings .column__innerCells__wrap{margin-top:15px}.neo-popover__column .column__settings .column__checkbox{margin-right:10px}.neo-popover__column .column__settings .column__footer{padding:10px;border-top:1px solid var(--border-grey);position:absolute;bottom:0px;right:0px;width:80.3%;display:flex;background:var(--white)}.neo-popover__column .column__settings .column__btns{margin-left:auto}.neo-popover__column .column__settings .btns{border:1px solid var(--button-blue);background:#fff;border-radius:5px;width:98px;margin-left:10px;color:var(--button-blue);height:32px}.neo-popover__column .column__settings .btns__save{color:#fff;background:var(--button-blue)}.neo-popover__column .column__settings .icon-close{font-size:.9375rem}.neo-popover.neo-popover--exports{right:10px;width:40%}@media only screen and (max-width: 1024px){.neo-popover.neo-popover--exports{width:auto}}.neo-popover.neo-popover--exports:before{right:9px}.neo-popover__export{display:flex}.neo-popover__export .export__header{padding:10px;border-bottom:var(--border-grey) solid 1px;color:#3c425e;font-size:.8125rem;display:flex}.neo-popover__export .export__chooser{width:45%}@media only screen and (max-width: 1024px){.neo-popover__export .export__chooser{width:auto}}.neo-popover__export .export__chooser .export__body{padding:10px;padding-bottom:10px;height:440px;overflow-y:auto;overflow-x:hidden;border-right:var(--border-grey) solid 1px}.neo-popover__export .export__chooser .export__txt{font-size:.75rem;color:var(--titlecolor)}.neo-popover__export .export__chooser .custom__ctrl{border:1px solid var(--light-grey);border-radius:5px;padding:0px 5px;box-sizing:border-box;height:25px;font-size:.6875rem;width:100%}.neo-popover__export .export__chooser .export__wrap{display:flex;border:1px solid var(--light-grey);border-radius:5px;padding:0px 10px}.neo-popover__export .export__chooser .export__wrap.export__headertxt{border:none}.neo-popover__export .export__chooser .export__checkbox{margin-right:10px}.neo-popover__export .export__settings{width:100%}@media only screen and (max-width: 1024px){.neo-popover__export .export__settings{width:auto}}.neo-popover__export .export__settings .export__close{margin-left:auto;font-size:.9375rem;cursor:pointer}.neo-popover__export .export__settings .export__as{padding:10px 15px 0;font-size:.8125rem}.neo-popover__export .export__settings .export__body{display:flex;padding:10px}.neo-popover__export .export__settings .export__reorder{border:1px solid var(--dark-grey);border-radius:5px;height:81px;margin:0 5px;padding:8px 10px;width:78px}.neo-popover__export .export__settings .export__file{text-align:center}.neo-popover__export .export__settings .export__file strong{display:block;font-size:.8125rem;font-weight:normal;line-height:normal}.neo-popover__export .export__settings .check-wrap{line-height:normal}.neo-popover__export .export__settings .check-wrap input{margin:0px}.neo-popover__export .export__settings .export__footer{padding:15px 10px;border-top:1px solid var(--border-grey);position:absolute;bottom:0px;right:0px;width:66%;display:flex}@media only screen and (max-width: 1024px){.neo-popover__export .export__settings .export__footer{width:61.5%}}.neo-popover__export .export__settings .export__btns{margin-left:auto}.neo-popover__export .export__settings .btns{border:1px solid var(--button-blue);background:var(--white);border-radius:5px;width:98px;margin-left:10px;color:var(--button-blue);height:32px}.neo-popover__export .export__settings .btns__save{color:var(--white);background:var(--button-blue)}.neo-popover__export .export__settings .exportWarning{position:absolute;margin-top:290px;right:5%}.neo-grid .react-grid-Header{background:#f4f7f9;color:#204d6f;vertical-align:top;font-weight:bold}.globalSeachInput .form-control{padding-left:30px}.noRecordDiv{position:relative;left:40%;text-align:center;font-size:x-large}.Select div,.Select input,.Select span{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;z-index:10}.gridDiv{overflow:hidden;outline:0px;position:relative;min-height:680px;margin-top:50px}.fa-search:before{content:\\\"\\\\f002\\\";position:absolute;top:9px;left:3%;color:darkslategrey}.errorDiv{position:fixed;top:7%;left:50%;transform:translate(-50%, 5px)}.parentDiv{display:flex;padding:15px;align-items:center;background:#f4f8f7}.totalCount{position:absolute;left:1.5%;width:20%}.filterIcons{font-size:14px;margin:0px 0px 0px 10px;border:1px solid #ddd;padding:2px 5px;color:#566a81;cursor:pointer;background:#fff}.filterArrow{margin:0px 0px 3px 5px}.globalSearch{width:20%;margin-left:auto;position:relative;margin-right:40px;display:flex;align-items:center}.grid-header label{display:inline-block;font-weight:bold;margin:auto auto auto 6px}.grid-header .ui-icon{margin:4px 4px auto 6px;background-color:transparent;border-color:transparent}.grid-header .ui-icon.ui-state-hover{background-color:#fff}.grid-header #txtSearch{margin:0 4px 0 4px;padding:2px 2px;-moz-border-radius:2px;-webkit-border-radius:2px;border:1px solid silver}.slick-viewport{height:100vh}.options-panel{-moz-border-radius:6px;-webkit-border-radius:6px;border:1px solid silver;background:#f0f0f0;padding:4px;margin-bottom:20px;width:320px;position:absolute;top:0px;left:650px}.slick-cell.task-name{font-weight:bold;text-align:right}.slick-cell.task-percent{text-align:right}.slick-cell.cell-move-handle{font-weight:bold;text-align:right;border-right:solid gray;background:#efefef;cursor:move}.cell-move-handle:hover{background:#b6b9bd}.slick-row.selected .cell-move-handle{background:#d5dc8d}.slick-row .cell-actions{text-align:left}.slick-row.complete{background-color:#dfd;color:#555}.percent-complete-bar{display:inline-block;height:6px;-moz-border-radius:3px;-webkit-border-radius:3px}.ui-datepicker-trigger{margin-top:2px;padding:0;vertical-align:top}input.editor-percentcomplete{width:100%;height:100%;border:0;margin:0;background:transparent;outline:0;padding:0;float:left}.editor-percentcomplete-picker{position:relative;display:inline-block;width:16px;height:100%;overflow:visible;z-index:1000;float:right}.editor-percentcomplete-helper{border:0 solid gray;position:absolute;top:-2px;left:-9px;padding-left:9px;width:120px;height:140px;display:none;overflow:visible}.editor-percentcomplete-wrapper{background:beige;padding:20px 8px;width:100%;height:98px;border:1px solid gray;border-left:0}.editor-percentcomplete-buttons{float:right}.editor-percentcomplete-buttons button{width:80px}.editor-percentcomplete-slider{float:left}.editor-percentcomplete-picker:hover .editor-percentcomplete-helper{display:block}.editor-percentcomplete-helper:hover{display:block}select.editor-yesno{width:100%;margin:0;vertical-align:middle}input.editor-checkbox{margin:0;height:100%;padding:0;border:0}.frozen{background:#eee}.slickgrid-container .slick-header-columns,.slickgrid-container .slick-header-column{background:rgba(31,86,126,0.0470588);height:40px}.slickgrid-container .slick-header-column.ui-state-default{height:40px;color:#204d6f;font-weight:bold;padding:10px 4px}.loading-spinner-container{width:100%;text-align:center}.react-grid-HeaderCell{border:1px solid #ddd;background:#f4f7f9}.react-grid-Cell{border:1px solid #ddd}.react-grid-Toolbar{background-color:#f9fafb;position:absolute;top:0px;right:0px;border:none;padding:18px 15px 7px}.notification-close{position:relative;float:right;margin-top:-48px;margin-right:13px;cursor:pointer}.react-grid-Container .react-grid-Toolbar{padding:0;border:none;right:113px;top:26px;background-color:transparent}.react-grid-Container .react-grid-Toolbar .btn{border:1px solid #ddd;text-indent:-9999px;height:27px}.tools:after{content:\\\"\\\\f0b0\\\";font-family:FontAwesome;font-style:normal;font-weight:normal;text-decoration:inherit;color:#566a81;font-size:18px;padding-right:0.5em;position:absolute;top:3px;left:7px;font-size:15px;pointer-events:none}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import ReactDataGrid from \"react-data-grid\";\n\nclass ExtDataGrid extends ReactDataGrid {\n    componentDidMount() {\n        this._mounted = true;\n        // eslint-disable-next-line prefer-destructuring\n        this.dataGridComponent = document.getElementsByClassName(\n            \"react-grid-Viewport\"\n        )[0];\n\n        window.addEventListener(\"resize\", this.metricsUpdated);\n        if (this.props.cellRangeSelection) {\n            // this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n        }\n        this.metricsUpdated();\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        window.removeEventListener(\"resize\", this.metricsUpdated);\n        // this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n}\n\nexport default ExtDataGrid;\n","/* eslint-disable react/destructuring-assignment */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: new Date()\n        };\n        // the variable to store component reference\n        this.input = null;\n\n        this.getInputNode = this.getInputNode.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(ev) {\n        this.setState({ value: ev.target.value });\n    }\n\n    // returning updated object with the date value in the required format\n    getValue() {\n        const updated = {};\n        const date = new Date(this.state.value);\n        const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"2-digit\"\n        });\n        const [\n            { value: month },\n            ,\n            { value: day },\n            ,\n            { value: year }\n        ] = dateTimeFormat.formatToParts(date);\n        updated[this.props.column.key] = `${year}-${month}-${day}`;\n        return updated;\n    }\n\n    // returning the component with the reference, input\n    getInputNode() {\n        return this.input;\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"date\"\n                    ref={(ref) => {\n                        this.input = ref;\n                    }}\n                    value={this.state.value}\n                    onChange={this.onValueChanged}\n                />\n            </div>\n        );\n    }\n}\n\nDatePicker.propTypes = {\n    column: PropTypes.string\n};\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\n\nimport React, { useState, useEffect } from \"react\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\nimport { ReactComponent as IconClose } from \"../images/icon-close.svg\";\n\nconst ErrorMessage = (props) => {\n    const [status, setStatus] = useState(props.status);\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n    if (status === \"invalid\") {\n        return (\n            <div id=\"errorMsg\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {SEARCH_NOT_FOUNT_ERROR}\n                </div>\n                <div\n                    role=\"presentation\"\n                    className=\"notification-close\"\n                    onClick={() => {\n                        props.closeWarningStatus();\n                        props.clearSearchValue();\n                    }}\n                >\n                    <i>\n                        <IconClose />\n                    </i>\n                </div>\n            </div>\n        );\n    }\n    return <div />;\n};\n\nexport default ErrorMessage;\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div\r\n            data-testid=\"columnItem\"\r\n            ref={(node) => drag(drop(node))}\r\n            style={{ ...style, opacity }}\r\n        >\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveColumn: PropTypes.any,\r\n    findColumn: PropTypes.any\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { columnsArray } = props;\r\n    const [columns, setColumns] = useState([...columnsArray]);\r\n\r\n    const findColumn = (id) => {\r\n        const column = columns.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            column,\r\n            index: columns.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const moveColumn = (id, atIndex) => {\r\n        const { column, index } = findColumn(id);\r\n        setColumns(\r\n            update(columns, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(columns, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, column]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderList(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    React.useEffect(() => {\r\n        setColumns(props.columnsArray);\r\n    }, [columnsArray]);\r\n    return (\r\n        <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n            {columns.map((column) => (\r\n                <ColumnItem\r\n                    key={column.id}\r\n                    id={`${column.id}`}\r\n                    text={column.text}\r\n                    moveColumn={moveColumn}\r\n                    findColumn={findColumn}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n    columnsArray: PropTypes.any,\r\n    handleReorderList: PropTypes.any\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport ColumnsList from \"./columnsList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconJustify } from \"../../images/icon-align-justify.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\n\nclass ColumnReordering extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            headerKeys,\n            columns,\n            existingPinnedHeadersList,\n            maxLeftPinnedColumn\n        } = this.props;\n        this.state = {\n            columnReorderEntityList: headerKeys,\n            columnSelectList: columns.map((item) => item.name),\n            leftPinnedColumList: existingPinnedHeadersList,\n            isAllSelected: true,\n            maxLeftPinnedColumns: maxLeftPinnedColumn\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * Method to reset the coloumn list onClick of Reset button\n     */\n    resetColumnReorderList = () => {\n        const { columns } = this.props;\n        this.setState({\n            columnReorderEntityList: columns.map((item) => item.name),\n            leftPinnedColumList: [],\n            isAllSelected: true\n        });\n    };\n\n    /**\n     * Method to Select all options in the coloumn list onClick of Select All button\n     */\n    selectAllToColumnReOrderList = () => {\n        const { columnReorderEntityList, isAllSelected } = this.state;\n        this.resetColumnReorderList();\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        let isExistingAllSelect = isAllSelected;\n        if (isExistingAllSelect) {\n            existingColumnReorderEntityList = [];\n            isExistingAllSelect = false;\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: isExistingAllSelect,\n            leftPinnedColumList: []\n        });\n    };\n\n    /**\n     * Method To add a column to columnReorderEntityList when selected.\n     * @param {String} typeToBeAdded\n     */\n    addToColumnReorderEntityList = (typeToBeAdded) => {\n        const {\n            columnReorderEntityList,\n            leftPinnedColumList,\n            columnSelectList\n        } = this.state;\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        let existingLeftPinnedList = leftPinnedColumList;\n        if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n            let indexOfInsertion = columnSelectList.findIndex(\n                (item) => item === typeToBeAdded\n            );\n            while (indexOfInsertion > 0) {\n                if (\n                    existingColumnReorderEntityList.includes(\n                        columnSelectList[indexOfInsertion - 1]\n                    )\n                ) {\n                    if (\n                        !existingLeftPinnedList.includes(\n                            columnSelectList[indexOfInsertion - 1]\n                        )\n                    ) {\n                        indexOfInsertion = existingColumnReorderEntityList.findIndex(\n                            // eslint-disable-next-line no-loop-func\n                            (item) =>\n                                item === columnSelectList[indexOfInsertion - 1]\n                        );\n                        indexOfInsertion += 1;\n                        break;\n                    } else {\n                        indexOfInsertion -= 1;\n                    }\n                } else {\n                    indexOfInsertion -= 1;\n                }\n            }\n            existingColumnReorderEntityList.splice(\n                indexOfInsertion,\n                0,\n                typeToBeAdded\n            );\n        } else {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (item) => {\n                    if (item !== typeToBeAdded) return item;\n                    return \"\";\n                }\n            );\n            if (existingLeftPinnedList.includes(typeToBeAdded)) {\n                existingLeftPinnedList = existingLeftPinnedList.filter(\n                    (item) => item !== typeToBeAdded\n                );\n            }\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: false,\n            leftPinnedColumList: existingLeftPinnedList\n        });\n    };\n\n    /**\n     * Method to handle the like-search on key stroke.\n     * @param {Event} e\n     */\n    filterColumnReorderList = (e) => {\n        const { columns } = this.props;\n        const searchKey = String(e.target.value).toLowerCase();\n        const existingList = columns.map((item) => item.name);\n        let filtererdColumnReorderList = [];\n        if (searchKey.length > 0) {\n            filtererdColumnReorderList = existingList.filter((item) => {\n                return item.toLowerCase().includes(searchKey);\n            });\n        } else {\n            filtererdColumnReorderList = columns.map((item) => item.name);\n        }\n        this.setState({\n            columnSelectList: filtererdColumnReorderList\n        });\n    };\n\n    createColumnsArrayFromProps = (colsList) => {\n        const { leftPinnedColumList, maxLeftPinnedColumns } = this.state;\n        return colsList.map((item) => {\n            return {\n                id: item,\n                text: (\n                    <div className=\"column__reorder\" key={item}>\n                        <div style={{ cursor: \"move\" }} className=\"column_drag\">\n                            <i>\n                                <IconJustify />\n                            </i>\n                        </div>\n                        <div className=\"column__reorder__name\">{item}</div>\n                        <div className=\"column__innerCells__wrap\">\n                            <div className=\"column__wrap\">\n                                <div className=\"column__checkbox\">\n                                    <input\n                                        data-testid=\"reArrangeLeftPin\"\n                                        role=\"button\"\n                                        type=\"checkbox\"\n                                        id={`checkBoxToPinLeft_${item}`}\n                                        checked={leftPinnedColumList.includes(\n                                            item\n                                        )}\n                                        disabled={\n                                            maxLeftPinnedColumns -\n                                                leftPinnedColumList.length <=\n                                            0\n                                                ? !leftPinnedColumList.includes(\n                                                      item\n                                                  )\n                                                : false\n                                        }\n                                        onChange={() =>\n                                            this.reArrangeLeftPinnedColumn(item)\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column__txt\">Pin Left</div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    /**\n     * Method to handle the position of columns Names when left pinned in coloumn selector view.\n     * @param {String} columHeaderName\n     */\n    reArrangeLeftPinnedColumn = (columHeaderName) => {\n        const { leftPinnedColumList, columnReorderEntityList } = this.state;\n        let existingLeftPinnedList = leftPinnedColumList;\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        if (!existingLeftPinnedList.includes(columHeaderName)) {\n            existingLeftPinnedList.unshift(columHeaderName);\n        } else {\n            existingLeftPinnedList = existingLeftPinnedList.filter(\n                (item) => item !== columHeaderName\n            );\n        }\n        this.setState({\n            leftPinnedColumList: existingLeftPinnedList\n        });\n\n        existingLeftPinnedList.forEach((item) => {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (subItem) => subItem !== item\n            );\n            existingColumnReorderEntityList.unshift(item);\n            return null;\n        });\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList\n        });\n    };\n\n    handleReorderList = (reordered) => {\n        const { handleheaderNameList } = this.props;\n        handleheaderNameList(reordered);\n    };\n\n    handleClick() {\n        const { closeColumnReOrdering } = this.props;\n        closeColumnReOrdering();\n    }\n\n    render() {\n        const {\n            columnReorderEntityList,\n            columnSelectList,\n            maxLeftPinnedColumns,\n            leftPinnedColumList\n        } = this.state;\n        const {\n            columns,\n            closeColumnReOrdering,\n            updateTableAsPerRowChooser\n        } = this.props;\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div\n                    className=\"neo-popover neo-popover--column columns--grid\"\n                    // ref={this.setWrapperRef}\n                >\n                    <div className=\"neo-popover__column column__grid\">\n                        <div className=\"column__chooser\">\n                            <div className=\"column__header\">\n                                <div className=\"\">\n                                    <strong>Column Chooser</strong>\n                                </div>\n                            </div>\n                            <div className=\"column__body\">\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Search column\"\n                                        className=\"custom__ctrl\"\n                                        onChange={this.filterColumnReorderList}\n                                    />\n                                </div>\n                                <div className=\"column__selectAll\">\n                                    <div className=\"column__checkbox\">\n                                        <input\n                                            type=\"checkbox\"\n                                            data-testid=\"selectAllCheckBox\"\n                                            id=\"selectallcolumncheckbox\"\n                                            onChange={() =>\n                                                this.selectAllToColumnReOrderList()\n                                            }\n                                            checked={\n                                                columnReorderEntityList.length ===\n                                                columns.length\n                                            }\n                                        />\n                                    </div>\n                                    <div className=\"column__txt\">\n                                        Select all\n                                    </div>\n                                </div>\n                                {columnSelectList.map((item) => {\n                                    return (\n                                        <div\n                                            className=\"column__wrap\"\n                                            key={item}\n                                        >\n                                            <div className=\"column__checkbox\">\n                                                <input\n                                                    data-testid=\"addToColumnReorderEntityList\"\n                                                    type=\"checkbox\"\n                                                    id={`checkboxtoselectreorder_${item}`}\n                                                    checked={columnReorderEntityList.includes(\n                                                        item\n                                                    )}\n                                                    onChange={() =>\n                                                        this.addToColumnReorderEntityList(\n                                                            item\n                                                        )\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"column__txt\">\n                                                {item}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"column__settings\">\n                            <div className=\"column__header\">\n                                <div className=\"column__headerTxt\">\n                                    <strong>Column Settings</strong>\n                                </div>\n                                <div\n                                    role=\"presentation\"\n                                    data-testid=\"closeColumnReordering\"\n                                    className=\"column__close\"\n                                    onClick={() => closeColumnReOrdering()}\n                                >\n                                    <i>\n                                        <IconClose />\n                                    </i>\n                                </div>\n                            </div>\n\n                            <div className=\"column__body\">\n                                <div className=\"column__info\">\n                                    <strong>\n                                        &nbsp; &nbsp; Selected Column Count :{\" \"}\n                                        {columnReorderEntityList.length}\n                                    </strong>\n                                    {maxLeftPinnedColumns -\n                                        leftPinnedColumList.length >\n                                    0 ? (\n                                        <strong>\n                                            &nbsp; &nbsp; Left Pinned Column\n                                            Count Remaining :{\" \"}\n                                            {maxLeftPinnedColumns -\n                                                leftPinnedColumList.length}\n                                        </strong>\n                                    ) : (\n                                        <strong style={{ color: \"red\" }}>\n                                            &nbsp; &nbsp; Maximum Count Of Left\n                                            Pin Columns REACHED\n                                        </strong>\n                                    )}\n                                </div>\n                                <DndProvider\n                                    backend={MultiBackend}\n                                    options={HTML5toTouch}\n                                >\n                                    <ColumnsList\n                                        columnsArray={this.createColumnsArrayFromProps(\n                                            columnReorderEntityList\n                                        )}\n                                        handleReorderList={\n                                            this.handleReorderList\n                                        }\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"column__footer\">\n                                <div className=\"column__btns\">\n                                    <button\n                                        data-testid=\"resetButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() =>\n                                            this.resetColumnReorderList()\n                                        }\n                                    >\n                                        Reset\n                                    </button>\n                                    <button\n                                        data-testid=\"cancelButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() => closeColumnReOrdering()}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        data-testid=\"saveButton\"\n                                        type=\"button\"\n                                        className=\"btns btns__save\"\n                                        onClick={() =>\n                                            updateTableAsPerRowChooser(\n                                                columnReorderEntityList,\n                                                leftPinnedColumList\n                                            )\n                                        }\n                                    >\n                                        Save\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nColumnReordering.propTypes = {\n    headerKeys: PropTypes.any,\n    columns: PropTypes.any,\n    existingPinnedHeadersList: PropTypes.any,\n    maxLeftPinnedColumn: PropTypes.any,\n    closeColumnReOrdering: PropTypes.any,\n    handleheaderNameList: PropTypes.any,\n    updateTableAsPerRowChooser: PropTypes.any\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n    CARD: \"sort\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n    cursor: \"move\"\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n    const originalIndex = findCard(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.CARD, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            // eslint-disable-next-line no-shadow\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveCard(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findCard(id);\n                moveCard(draggedId, overIndex);\n            }\n        }\n    });\n\n    const opacity = isDragging ? 0.5 : 1;\n    return (\n        <div\n            data-testid=\"sortingItem\"\n            ref={(node) => drag(drop(node))}\n            style={{ ...style, opacity }}\n        >\n            {text}\n        </div>\n    );\n};\n\nCard.propTypes = {\n    id: PropTypes.any,\n    text: PropTypes.any,\n    moveCard: PropTypes.any,\n    findCard: PropTypes.any\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport Card from \"./SortItem\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortingList = (props) => {\n    const { sortsArray } = props;\n    const [cards, setCards] = useState([...sortsArray]);\n\n    const findCard = (id) => {\n        const card = cards.filter((c) => `${c.id}` === id)[0];\n        return {\n            card,\n            index: cards.indexOf(card)\n        };\n    };\n\n    const moveCard = (id, atIndex) => {\n        const { card, index } = findCard(id);\n        setCards(\n            update(cards, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, card]\n                ]\n            })\n        );\n\n        const values = [];\n        let temp = [];\n        temp = update(cards, {\n            $splice: [\n                [index, 1],\n                [atIndex, 0, card]\n            ]\n        });\n        temp.forEach((item) => {\n            values.push(item.id);\n        });\n        props.handleReorderListOfSort(values);\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n    React.useEffect(() => {\n        setCards(props.sortsArray);\n    }, [sortsArray]);\n\n    return (\n        <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            {cards.map((card) => (\n                <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    moveCard={moveCard}\n                    findCard={findCard}\n                />\n            ))}\n        </div>\n    );\n};\n\nSortingList.propTypes = {\n    sortsArray: PropTypes.any,\n    handleReorderListOfSort: PropTypes.any\n};\n\nexport default SortingList;\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./SortingList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconNav } from \"../../images/icon-nav.svg\";\nimport { ReactComponent as SortCopy } from \"../../images/SortCopy.svg\";\nimport { ReactComponent as SortDelete } from \"../../images/SortDelete.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        const { sortingParamsObjectList } = this.props;\n        this.state = {\n            rowList: [true],\n            sortingOrderList:\n                sortingParamsObjectList === undefined\n                    ? []\n                    : sortingParamsObjectList,\n            errorMessage: false\n        };\n    }\n\n    add = () => {\n        const { rowList, sortingOrderList } = this.state;\n        const { columnFieldValue } = this.props;\n        const rowLists = [...rowList];\n        rowLists.push(true);\n        const existingSortingOrderList = sortingOrderList;\n        existingSortingOrderList.push({\n            sortBy: columnFieldValue[0],\n            order: \"Ascending\",\n            sortOn: \"Value\"\n        });\n        this.setState({\n            rowList: rowLists,\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    copy = (i) => {\n        const { sortingOrderList } = this.state;\n        const rowList = [...sortingOrderList];\n        rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n        this.setState({ sortingOrderList: rowList });\n    };\n\n    clearAll = () => {\n        const { clearAllSortingParams } = this.props;\n        this.setState({\n            sortingOrderList: [],\n            errorMessage: false\n        });\n        clearAllSortingParams();\n    };\n\n    remove = (i) => {\n        const { sortingOrderList } = this.state;\n        const sortingOrderLists = [...sortingOrderList];\n        sortingOrderLists.splice(i, 1);\n        this.setState({ sortingOrderList: sortingOrderLists });\n        if (sortingOrderList.length <= 1) {\n            this.setState({ errorMessage: false });\n        }\n    };\n\n    createColumnsArrayFromProps = (rowsValue) => {\n        const { columnFieldValue } = this.props;\n        return rowsValue.map((row, index) => {\n            return {\n                id: index,\n                text: (\n                    <div className=\"sort__bodyContent\" key={row}>\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div className=\"sort__icon\">\n                                <i>\n                                    <IconNav />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort by</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectSortingField\"\n                                    className=\"custom__ctrl\"\n                                    name=\"sortBy\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortBy\"\n                                        )\n                                    }\n                                    value={row.sortBy}\n                                >\n                                    {columnFieldValue.map((item) => (\n                                        <option key={item}>{item}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort on</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    className=\"custom__ctrl\"\n                                    name=\"sortOn\"\n                                    data-testid=\"selectingValue\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortOn\"\n                                        )\n                                    }\n                                    value={row.sortOn}\n                                >\n                                    <option>Value</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Order</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectOrder\"\n                                    className=\"custom__ctrl\"\n                                    name=\"order\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"order\"\n                                        )\n                                    }\n                                    value={row.order}\n                                >\n                                    <option>Ascending</option>\n                                    <option>Descending</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"copySort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.copy(index)}\n                            >\n                                <SortCopy />\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"removeSort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.remove(index)}\n                            >\n                                <SortDelete />\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    captureSortingFeildValues = (event, index, sortingKey) => {\n        const { sortingOrderList } = this.state;\n        const existingSortingOrderList = sortingOrderList;\n\n        if (sortingKey === \"sortBy\") {\n            existingSortingOrderList[index].sortBy = event.target.value;\n        }\n        if (sortingKey === \"order\") {\n            existingSortingOrderList[index].order = event.target.value;\n        }\n        if (\n            existingSortingOrderList[index].sortOn === \"\" ||\n            existingSortingOrderList[index].sortOn === undefined\n        ) {\n            existingSortingOrderList[index].sortOn = \"Value\";\n        }\n        this.setState({\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    updateTableAsPerSortCondition = () => {\n        const { sortingOrderList } = this.state;\n        const unique = new Set();\n        const showError = sortingOrderList.some(\n            (element) => unique.size === unique.add(element.sortBy).size\n        );\n        const { setTableAsPerSortingParams } = this.props;\n        if (showError) {\n            this.setState({ errorMessage: true });\n        } else {\n            this.setState({ errorMessage: false });\n            setTableAsPerSortingParams(sortingOrderList);\n        }\n    };\n\n    /**\n     *\n     * @param {*} reOrderedSortingList\n     */\n    handleReorderListOfSort = (reOrderedIndexList) => {\n        const { handleTableSortSwap } = this.props;\n        handleTableSortSwap(reOrderedIndexList);\n    };\n\n    handleClick = () => {\n        const { closeSorting } = this.props;\n        closeSorting();\n    };\n\n    render() {\n        const { sortingOrderList, errorMessage } = this.state;\n        const { closeSorting } = this.props;\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    role=\"presentation\"\n                                    data-testid=\"closeSorting\"\n                                    onClick={() => closeSorting()}\n                                >\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    handleReorderListOfSort={\n                                        this.handleReorderListOfSort\n                                    }\n                                    sortsArray={this.createColumnsArrayFromProps(\n                                        sortingOrderList\n                                    )}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {errorMessage ? (\n                                <span className=\"alert alert-danger\">\n                                    Sort by opted are same, Please choose\n                                    different one.\n                                </span>\n                            ) : (\n                                \"\"\n                            )}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                role=\"presentation\"\n                                className=\"sort__section\"\n                                data-testid=\"addSort\"\n                                onClick={() => this.add()}\n                                onKeyDown={() => this.add()}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={this.clearAll}\n                                >\n                                    Clear All\n                                </button>\n\n                                <button\n                                    data-testid=\"applySort\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() =>\n                                        this.updateTableAsPerSortCondition()\n                                    }\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nApp.propTypes = {\n    sortingParamsObjectList: PropTypes.any,\n    closeSorting: PropTypes.any,\n    columnFieldValue: PropTypes.any,\n    clearAllSortingParams: PropTypes.any,\n    setTableAsPerSortingParams: PropTypes.any,\n    handleTableSortSwap: PropTypes.any\n};\n\nexport default App;\n","import React from \"react\";\nimport JsPdf from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as XLSX from \"xlsx\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport { ReactComponent as IconCsv } from \"../../images/icon-csv.svg\";\nimport { ReactComponent as IconExcel } from \"../../images/icon-excel.svg\";\nimport { ReactComponent as IconPdf } from \"../../images/icon-pdf.svg\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\n\nclass ExportData extends React.Component {\n    constructor(props) {\n        super(props);\n        const { columnsList } = this.props;\n        this.state = {\n            columnValueList: columnsList,\n            columnEntityList: columnsList,\n            isAllSelected: true,\n            downLaodFileType: [],\n            // eslint-disable-next-line react/no-unused-state\n            warning: \"\",\n            clickTag: \"none\"\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.selectDownLoadType = this.selectDownLoadType.bind(this);\n        this.exportValidation = this.exportValidation.bind(this);\n    }\n\n    resetColumnExportList = () => {\n        this.setState({\n            columnEntityList: [],\n            isAllSelected: false\n        });\n    };\n\n    selectAllToColumnList = () => {\n        const { isAllSelected } = this.state;\n        const { columnsList } = this.props;\n        this.resetColumnExportList();\n        this.setState({\n            columnEntityList: !isAllSelected ? columnsList : [],\n            isAllSelected: !isAllSelected\n        });\n    };\n\n    addToColumnEntityList = (typeToBeAdded) => {\n        const { columnEntityList } = this.state;\n        let existingColumnEntityList = columnEntityList;\n        if (!existingColumnEntityList.includes(typeToBeAdded)) {\n            existingColumnEntityList.push(typeToBeAdded);\n        } else {\n            existingColumnEntityList = existingColumnEntityList.filter(\n                (item) => {\n                    return item !== typeToBeAdded;\n                }\n            );\n        }\n        this.setState({\n            columnEntityList: existingColumnEntityList,\n            isAllSelected: false\n        });\n    };\n\n    selectDownLoadType = (event) => {\n        // eslint-disable-next-line no-shadow\n        let { downLaodFileType } = this.state;\n        if (\n            event.target.checked &&\n            !downLaodFileType.includes(event.target.value)\n        ) {\n            downLaodFileType.push(event.target.value);\n            this.setState({ downLaodFileType });\n        } else {\n            downLaodFileType.forEach(function (value, index) {\n                if (value === event.target.value) {\n                    downLaodFileType = downLaodFileType.splice(index, value);\n                }\n            });\n            this.setState({ downLaodFileType });\n        }\n    };\n\n    exportRowData = () => {\n        // eslint-disable-next-line no-shadow\n        const { columnEntityList, downLaodFileType } = this.state;\n        const columnValueList = columnEntityList;\n        const filteredRow = [];\n        const filteredRowValues = [];\n        const filteredRowHeader = [];\n\n        if (columnValueList.length > 0 && downLaodFileType.length > 0) {\n            const { rows } = this.props;\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\n            rows.forEach((row, index) => {\n                const filteredColumnVal = {};\n                const rowFilteredValues = [];\n                const rowFilteredHeader = [];\n                columnValueList.forEach((columnName) => {\n                    const { key, name } = columnName;\n                    filteredColumnVal[name] = row[key];\n                    rowFilteredValues.push(row[key]);\n                    rowFilteredHeader.push(name);\n                });\n                filteredRow.push(filteredColumnVal);\n                filteredRowValues.push(rowFilteredValues);\n                if (rowLength === index + 1)\n                    filteredRowHeader.push(rowFilteredHeader);\n            });\n\n            downLaodFileType.forEach((item) => {\n                if (item === \"pdf\") {\n                    this.downloadPDF(filteredRowValues, filteredRowHeader);\n                } else if (item === \"excel\") {\n                    this.downloadXLSFile(filteredRow);\n                } else {\n                    this.downloadCSVFile(filteredRow);\n                }\n            });\n        }\n    };\n\n    downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\n        const unit = \"pt\";\n        const size = \"A4\"; // Use A1, A2, A3 or A4\n        const orientation = \"landscape\"; // portrait or landscape\n\n        const doc = new JsPdf(orientation, unit, size);\n\n        doc.setFontSize(12);\n        const title = \"iCargo Neo Report\";\n\n        const content = {\n            startY: 50,\n            head: rowFilteredHeader,\n            body: rowFilteredValues,\n            tableWidth: \"wrap\", // 'auto'|'wrap'|'number'\n            headStyles: { fillColor: [102, 102, 255] },\n            theme: \"grid\", // 'striped'|'grid'|'plain'|'css'\n            margin: { top: 30, right: 30, bottom: 10, left: 30 }\n        };\n\n        doc.text(title, 30, 40);\n        doc.autoTable(content);\n        doc.save(\"iCargo Neo Report.pdf\");\n    };\n\n    downloadCSVFile = async (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".csv\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        const href = await URL.createObjectURL(data);\n        const link = document.createElement(\"a\");\n        link.href = href;\n        link.download = fileName + fileExtension;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    downloadXLSFile = async (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".xlsx\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        const href = await URL.createObjectURL(data);\n        const link = document.createElement(\"a\");\n        link.href = href;\n        link.download = fileName + fileExtension;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    exportValidation = () => {\n        // eslint-disable-next-line no-shadow\n        const { columnEntityList, downLaodFileType } = this.state;\n        const columnLength = columnEntityList.length;\n        const fileLength = downLaodFileType.length;\n        if (columnLength > 0 && fileLength > 0) {\n            this.exportRowData();\n            this.setState({ clickTag: \"none\" });\n        } else if (columnLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"Column\" });\n            this.setState({ clickTag: \"\" });\n        } else if (fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type\" });\n            this.setState({ clickTag: \"\" });\n        }\n        if (columnLength === 0 && fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type & Column\" });\n            this.setState({ clickTag: \"\" });\n        }\n    };\n\n    handleClick() {\n        const { closeExport } = this.props;\n        closeExport();\n    }\n\n    render() {\n        const {\n            isAllSelected,\n            columnValueList,\n            columnEntityList,\n            clickTag\n        } = this.state;\n        const { closeExport } = this.props;\n        return (\n            <ClickAwayListener\n                onClickAway={this.handleClick}\n                className=\"neo-popover neo-popover--exports exports--grid\"\n            >\n                <div className=\"neo-popover__export export__grid\">\n                    <div className=\"export__chooser\">\n                        <div className=\"export__header\">\n                            <div className=\"\">\n                                <strong>Export Data</strong>\n                            </div>\n                        </div>\n                        <div className=\"export__body\">\n                            <div>\n                                <input\n                                    data-testid=\"searchExport\"\n                                    type=\"text\"\n                                    placeholder=\"Search export\"\n                                    className=\"custom__ctrl\"\n                                    onChange={this.columnSearchLogic}\n                                />\n                            </div>\n                            <div className=\"export__wrap export__headertxt\">\n                                <div className=\"export__checkbox\">\n                                    <input\n                                        data-testid=\"selectColumns\"\n                                        className=\"selectColumn\"\n                                        type=\"checkbox\"\n                                        onChange={() =>\n                                            this.selectAllToColumnList()\n                                        }\n                                        checked={isAllSelected}\n                                    />\n                                </div>\n                                <div className=\"export__txt\">Select All</div>\n                            </div>\n                            {columnValueList && columnValueList.length > 0\n                                ? columnValueList.map((column) => {\n                                      return (\n                                          <div\n                                              className=\"export__wrap\"\n                                              key={column.key}\n                                          >\n                                              <div className=\"export__checkbox\">\n                                                  <input\n                                                      data-testid=\"addToColumn\"\n                                                      type=\"checkbox\"\n                                                      checked={columnEntityList.includes(\n                                                          column\n                                                      )}\n                                                      onChange={() =>\n                                                          this.addToColumnEntityList(\n                                                              column\n                                                          )\n                                                      }\n                                                  />\n                                              </div>\n                                              <div className=\"export__txt\">\n                                                  {column.name}\n                                              </div>\n                                          </div>\n                                      );\n                                  })\n                                : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"export__settings\">\n                        <div className=\"export__header\">\n                            <div className=\"export__headerTxt\" />\n                            <div className=\"export__close\">\n                                <i role=\"presentation\" onClick={closeExport}>\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n                        <div className=\"export__as\">Export as</div>\n                        <div className=\"export__body\">\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        data-testid=\"addpdfDownloadType\"\n                                        type=\"checkbox\"\n                                        name=\"pdf\"\n                                        value=\"pdf\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconPdf />\n                                    </i>\n                                    <strong>PDF</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"excel\"\n                                        value=\"excel\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconExcel />\n                                    </i>\n                                    <strong>Excel</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"csv\"\n                                        value=\"csv\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconCsv />\n                                    </i>\n\n                                    <strong>CSV</strong>\n                                </div>\n                            </div>\n                            <div className=\"exportWarning\">\n                                <span style={{ display: clickTag }}>\n                                    <strong>\n                                        Select at least one file type\n                                    </strong>\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"export__footer\">\n                            <div className=\"export__btns\">\n                                <button\n                                    data-testid=\"closeExport\"\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={() => closeExport()}\n                                >\n                                    Cancel\n                                </button>\n                                <button\n                                    data-testid=\"exportValidationClick\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() => {\n                                        this.exportValidation();\n                                    }}\n                                >\n                                    Export\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nExportData.propTypes = {\n    columnsList: PropTypes.any,\n    closeExport: PropTypes.any,\n    rows: PropTypes.any\n};\n\nexport default ExportData;\n","import React, { Component } from \"react\";\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport PropTypes from \"prop-types\";\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport DatePicker from \"./functions/DatePicker\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\nimport { ReactComponent as IconColumns } from \"./images/icon-columns.svg\";\r\nimport { ReactComponent as IconShare } from \"./images/icon-share.svg\";\r\nimport { ReactComponent as IconGroupSort } from \"./images/icon-group-sort.svg\";\r\nimport { ReactComponent as IconSearch } from \"./images/icon-search.svg\";\r\nimport FormulaProcessor from \"./functions/FormulaProcessor\";\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\r\n\r\nconst { DropDownEditor } = Editors;\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nlet sortBy;\r\n(() => {\r\n    // utility functions\r\n    const defaultCmp = (a, b) => {\r\n        if (a === b) return 0;\r\n        return a < b ? -1 : 1;\r\n    };\r\n    const getCmpFunc = (primer, reverse) => {\r\n        let cmp = defaultCmp;\r\n        if (primer) {\r\n            cmp = (a, b) => {\r\n                return defaultCmp(primer(a), primer(b));\r\n            };\r\n        }\r\n        if (reverse) {\r\n            return (a, b) => {\r\n                return -1 * cmp(a, b);\r\n            };\r\n        }\r\n        return cmp;\r\n    };\r\n\r\n    // actual implementation\r\n    sortBy = function () {\r\n        const fields = [];\r\n        const nFields = arguments.length;\r\n        let field;\r\n        let name;\r\n        let cmp;\r\n\r\n        // preprocess sorting options\r\n        for (let i = 0; i < nFields; i++) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            field = arguments[i];\r\n            if (typeof field === \"string\") {\r\n                name = field;\r\n                cmp = defaultCmp;\r\n            } else {\r\n                name = field.name;\r\n                cmp = getCmpFunc(field.primer, field.reverse);\r\n            }\r\n            fields.push({\r\n                name,\r\n                cmp\r\n            });\r\n        }\r\n\r\n        return function (A, B) {\r\n            let result = 0;\r\n            for (let i = 0, l = nFields; i < l; i++) {\r\n                field = fields[i];\r\n                name = field.name;\r\n                cmp = field.cmp;\r\n\r\n                result = cmp(A[name], B[name]);\r\n                if (result !== 0) break;\r\n            }\r\n            return result;\r\n        };\r\n    };\r\n})();\r\n\r\nclass Spreadsheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { dataSet, pageSize, rows, columns } = this.props;\r\n        const dataSetVar = JSON.parse(JSON.stringify(dataSet));\r\n        this.state = {\r\n            warningStatus: \"\",\r\n            height: 680,\r\n            searchValue: \"\",\r\n            sortColumn: \"\",\r\n            sortDirection: \"NONE\",\r\n            pageRowCount: pageSize,\r\n            pageIndex: 1,\r\n            dataSet: dataSetVar,\r\n            subDataSet: [],\r\n            rows: dataSetVar ? dataSetVar.slice(0, 500) : [],\r\n            selectedIndexes: [],\r\n            junk: {},\r\n            columnReorderingComponent: null,\r\n            exportComponent: null,\r\n            filteringRows: rows,\r\n            tempRows: rows,\r\n            sortingPanelComponent: null,\r\n            count: rows.length,\r\n            sortingOrderSwapList: [],\r\n            sortingParamsObjectList: [],\r\n            // eslint-disable-next-line react/no-unused-state\r\n            pinnedReorder: false,\r\n            columns: columns.map((item) => {\r\n                const colItem = item;\r\n                if (colItem.editor === \"DatePicker\") {\r\n                    colItem.editor = DatePicker;\r\n                } else if (\r\n                    colItem.editor === \"DropDown\" &&\r\n                    colItem.dataSource\r\n                ) {\r\n                    colItem.editor = (\r\n                        <DropDownEditor options={colItem.dataSource} />\r\n                    );\r\n                } else if (colItem.editor === \"Text\") {\r\n                    colItem.editor = \"text\";\r\n                } else {\r\n                    colItem.editor = null;\r\n                }\r\n                if (colItem.filterType === \"numeric\") {\r\n                    colItem.filterRenderer = NumericFilter;\r\n                } else {\r\n                    colItem.filterRenderer = AutoCompleteFilter;\r\n                }\r\n                return colItem;\r\n            })\r\n        };\r\n        // document.addEventListener(\"copy\", this.handleCopy);\r\n        // document.addEventListener(\"paste\", this.handlePaste);\r\n        this.handleSearchValue = this.handleSearchValue.bind(this);\r\n        this.clearSearchValue = this.clearSearchValue.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n        this.formulaAppliedCols = columns.filter((item) => {\r\n            return item.formulaApplicable;\r\n        });\r\n    }\r\n\r\n    // updateRows = (startIdx, newRows) => {\r\n    //   this.setState((state) => {\r\n    //     const rows = state.rows.slice();\r\n    //     for (let i = 0; i < newRows.length; i++) {\r\n    //       if (startIdx + i < rows.length) {\r\n    //         rows[startIdx + i] = {\r\n    //           ...rows[startIdx + i],\r\n    //           ...newRows[i],\r\n    //         };\r\n    //       }\r\n    //     }\r\n    //     return {\r\n    //       rows,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n    // rowGetter = (i) => {\r\n    // console.log(i)\r\n    //   const { rows } = this.state;\r\n    //   return rows[i];\r\n    // };\r\n\r\n    // handleCopy = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft, botRight } = this.state;\r\n    //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n    //     .map((rowIdx) =>\r\n    //       this.state.columns\r\n    //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n    //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n    //         .join(\"\\t\")\r\n    //     )\r\n    //     .join(\"\\n\");\r\n    //   e.clipboardData.setData(\"text/plain\", text);\r\n    // };\r\n\r\n    // handlePaste = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft } = this.state;\r\n    //   const newRows = [];\r\n    //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n    //   pasteData.forEach((row) => {\r\n    //     const rowData = {};\r\n    //     // Merge the values from pasting and the keys from the columns\r\n    //     this.state.columns\r\n    //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n    //       .forEach((col, j) => {\r\n    //         rowData[col.key] = row[j];\r\n    //       });\r\n    //     newRows.push(rowData);\r\n    //   });\r\n    //   this.updateRows(topLeft.rowIdx, newRows);\r\n    // };\r\n\r\n    // setSelection = (args) => {\r\n    //   this.setState({\r\n    //     topLeft: {\r\n    //       rowIdx: args.topLeft.rowIdx,\r\n    //       colIdx: args.topLeft.idx,\r\n    //     },\r\n    //     botRight: {\r\n    //       rowIdx: args.bottomRight.rowIdx,\r\n    //       colIdx: args.bottomRight.idx,\r\n    //     },\r\n    //   });\r\n    // };\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(props) {\r\n        this.setState({\r\n            rows: props.rows,\r\n            count: props.count,\r\n            warningStatus: props.status\r\n        });\r\n    }\r\n\r\n    setStateAsync(stateObj) {\r\n        return new Promise((resolve) => {\r\n            this.setState(stateObj, resolve);\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n        const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n        resizeEvent.initEvent(\"resize\", true, false);\r\n        window.dispatchEvent(resizeEvent);\r\n    }\r\n\r\n    /**\r\n     * Method To render the filter values for filtering rows\r\n     * @param {*} rows is the row data to be considered for filtering\r\n     * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n     */\r\n    getValidFilterValues(rows, columnId) {\r\n        this.setState({ selectedIndexes: [] });\r\n        return rows\r\n            .map((r) => r[columnId])\r\n            .filter((item, i, a) => {\r\n                return i === a.indexOf(item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method To swap the columns\r\n     * @param {*} source is source column\r\n     * @param {*} target is the target column\r\n     */\r\n    // onHeaderDrop = (source, target) => {\r\n    //   const stateCopy = Object.assign({}, this.state);\r\n    //   const columnSourceIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === source\r\n    //   );\r\n    //   const columnTargetIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === target\r\n    //   );\r\n\r\n    //   stateCopy.columns.splice(\r\n    //     columnTargetIndex,\r\n    //     0,\r\n    //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n    //   );\r\n\r\n    //   const emptyColumns = Object.assign({}, this.state, {\r\n    //     columns: [],\r\n    //   });\r\n    //   this.setState(emptyColumns);\r\n\r\n    //   const reorderedColumns = Object.assign({}, this.state, {\r\n    //     columns: stateCopy.columns,\r\n    //   });\r\n    //   this.setState(reorderedColumns);\r\n    // };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    handleTableSortSwap = (reorderedSwap) => {\r\n        swapSortList = reorderedSwap;\r\n    };\r\n\r\n    updateTableAsPerRowChooser = (\r\n        inComingColumnsHeaderList,\r\n        pinnedColumnsList\r\n    ) => {\r\n        const { columns } = this.props;\r\n        let existingColumnsHeaderList = columns;\r\n        existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n            return inComingColumnsHeaderList.includes(item.name);\r\n        });\r\n        let rePositionedArray = existingColumnsHeaderList;\r\n        let singleHeaderOneList;\r\n        if (pinnedColumnsList.length > 0) {\r\n            pinnedColumnsList\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((item, index) => {\r\n                    singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                        (subItem) => item === subItem.name\r\n                    );\r\n                    rePositionedArray = this.arrayMove(\r\n                        existingColumnsHeaderList,\r\n                        existingColumnsHeaderList.indexOf(\r\n                            singleHeaderOneList[0]\r\n                        ),\r\n                        index\r\n                    );\r\n                });\r\n        }\r\n        if (swapList.length > 0) {\r\n            swapList.slice(0).forEach((item, index) => {\r\n                singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                    (subItem) => {\r\n                        return item === subItem.name;\r\n                    }\r\n                );\r\n                rePositionedArray = this.arrayMove(\r\n                    existingColumnsHeaderList,\r\n                    existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n                    index\r\n                );\r\n            });\r\n        }\r\n\r\n        existingColumnsHeaderList = rePositionedArray;\r\n        /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n        existingColumnsHeaderList.forEach((headerItem, index) => {\r\n            if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n                existingColumnsHeaderList[index].frozen = false;\r\n            }\r\n            if (pinnedColumnsList.includes(headerItem.name)) {\r\n                existingColumnsHeaderList[index].frozen = true;\r\n            }\r\n        });\r\n\r\n        const toTop = (key, value) => (a, b) =>\r\n            (b[key] === value) - (a[key] === value);\r\n        existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n        this.setState({\r\n            columns: existingColumnsHeaderList\r\n        });\r\n\r\n        const tempList = [];\r\n        existingColumnsHeaderList.forEach((item) => {\r\n            tempList.push(item.name);\r\n        });\r\n\r\n        if (swapList.length > 0) {\r\n            for (let i = 0; i < tempList.length; i++) {\r\n                if (tempList[i] === swapList[i])\r\n                    // eslint-disable-next-line react/no-unused-state\r\n                    this.setState({ pinnedReorder: true });\r\n            }\r\n        }\r\n        this.closeColumnReOrdering();\r\n        swapList = [];\r\n        // eslint-disable-next-line react/no-unused-state\r\n        this.setState({ pinnedReorder: false });\r\n    };\r\n\r\n    /**\r\n     * Method To re-position a particular object in an Array from oldIndex to newIndex\r\n     * @param {*} arr inComing array\r\n     * @param {*} oldIndex initial index\r\n     * @param {*} newIndex final index\r\n     */\r\n    arrayMove = (arr, oldIndex, newIndex) => {\r\n        if (newIndex >= arr.length) {\r\n            let k = newIndex - arr.length + 1;\r\n            while (k--) {\r\n                arr.push(undefined);\r\n            }\r\n        }\r\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Method to render the column Selector Pannel\r\n     */\r\n    columnReorderingPannel = () => {\r\n        const { columns } = this.state;\r\n        const { maxLeftPinnedColumn } = this.props;\r\n        this.setState({ selectedIndexes: [] });\r\n        const headerNameList = [];\r\n        const existingPinnedHeadersList = [];\r\n        columns\r\n            .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n            .map((item) => existingPinnedHeadersList.push(item.name));\r\n        columns.map((item) => headerNameList.push(item.name));\r\n        this.setState({\r\n            columnReorderingComponent: (\r\n                <ColumnReordering\r\n                    maxLeftPinnedColumn={maxLeftPinnedColumn}\r\n                    updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n                    headerKeys={headerNameList}\r\n                    closeColumnReOrdering={this.closeColumnReOrdering}\r\n                    existingPinnedHeadersList={existingPinnedHeadersList}\r\n                    handleheaderNameList={this.handleheaderNameList}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to stop the render the column Selector Pannel\r\n     */\r\n    closeColumnReOrdering = () => {\r\n        this.setState({\r\n            columnReorderingComponent: null\r\n        });\r\n    };\r\n\r\n    handleSearchValue = (value) => {\r\n        this.setState({ searchValue: value });\r\n    };\r\n\r\n    clearSearchValue = () => {\r\n        const { filteringRows } = this.state;\r\n        this.setState({ searchValue: \"\" });\r\n        this.setState({ filteringRows });\r\n    };\r\n\r\n    sortingPanel = () => {\r\n        const { columns, sortingParamsObjectList } = this.state;\r\n        this.setState({ selectedIndexes: [] });\r\n        const columnField = [];\r\n        columns.map((item) => columnField.push(item.name));\r\n        this.setState({\r\n            sortingPanelComponent: (\r\n                <Sorting\r\n                    setTableAsPerSortingParams={(args) =>\r\n                        this.setTableAsPerSortingParams(args)\r\n                    }\r\n                    sortingParamsObjectList={sortingParamsObjectList}\r\n                    handleTableSortSwap={this.handleTableSortSwap}\r\n                    clearAllSortingParams={this.clearAllSortingParams}\r\n                    columnFieldValue={columnField}\r\n                    closeSorting={this.closeSorting}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeSorting = () => {\r\n        this.setState({\r\n            sortingPanelComponent: null,\r\n            sortingOrderSwapList: []\r\n        });\r\n        swapSortList = [];\r\n    };\r\n\r\n    clearAllSortingParams = () => {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        let dataRows = this.getFilterResult([...dataSet]);\r\n        if (searchValue !== \"\") {\r\n            const searchKey = String(searchValue).toLowerCase();\r\n            dataRows = dataRows.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        if (hasSingleSortkey) {\r\n            dataRows = this.getSingleSortResult(dataRows);\r\n        }\r\n        this.setState({\r\n            rows: dataRows.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: dataRows\r\n        });\r\n    };\r\n\r\n    // Export Data Logic\r\n    exportColumnData = () => {\r\n        const { columns, dataSet, subDataSet } = this.state;\r\n        let exportData = dataSet;\r\n        if (this.isSubset()) {\r\n            exportData = subDataSet;\r\n        }\r\n        this.setState({ selectedIndexes: [] });\r\n        this.setState({\r\n            exportComponent: (\r\n                <ExportData\r\n                    rows={exportData}\r\n                    columnsList={columns}\r\n                    closeExport={this.closeExport}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeExport = () => {\r\n        this.setState({\r\n            exportComponent: null\r\n        });\r\n    };\r\n\r\n    setTableAsPerSortingParams = (tableSortList) => {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            subDataSet,\r\n            junk,\r\n            rows,\r\n            sortingOrderSwapList,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSearchKey = String(searchValue).toLowerCase() !== \"\";\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        let existingRows = [...dataSet];\r\n        if (hasFilter || hasSearchKey || hasSingleSortkey) {\r\n            existingRows = [...subDataSet];\r\n        }\r\n\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        existingRows.sort(sortBy(...sortingOrderNameList));\r\n        this.setState({\r\n            rows: existingRows.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: existingRows,\r\n            sortingParamsObjectList: tableSortList\r\n        });\r\n\r\n        this.closeSorting();\r\n    };\r\n\r\n    // Group sort - while updating conditions like search, filter or sorting; copy of setTableAsPerSortingParams.\r\n    groupSort = (tableSortList, existingRows) => {\r\n        const { rows, sortingOrderSwapList } = this.state;\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        return existingRows.sort(sortBy(...sortingOrderNameList));\r\n    };\r\n\r\n    toCamelCase = (str) => {\r\n        return str\r\n            .replace(/\\s(.)/g, function ($1) {\r\n                return $1.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, \"\")\r\n            .replace(/^(.)/, function ($1) {\r\n                return $1.toLowerCase();\r\n            });\r\n    };\r\n\r\n    getSearchRecords(e) {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            subDataSet,\r\n            junk,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n        let rowsToSearch = [];\r\n        // Remove search key\r\n        if (searchValue.startsWith(searchKey) || searchKey === \"\") {\r\n            rowsToSearch = this.getFilterResult([...dataSet]);\r\n            if (hasSingleSortkey) {\r\n                rowsToSearch = this.getSingleSortResult(rowsToSearch);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                rowsToSearch = this.groupSort(\r\n                    sortingParamsObjectList,\r\n                    rowsToSearch\r\n                );\r\n            }\r\n            return rowsToSearch;\r\n        }\r\n        // Set search key\r\n\r\n        if (\r\n            hasFilter ||\r\n            hasSingleSortkey ||\r\n            searchKey.length > 1 ||\r\n            hasGropSortKeys\r\n        )\r\n            return subDataSet;\r\n        return dataSet;\r\n    }\r\n\r\n    /**\r\n     * Method To dynamically swap the column from column chooser\r\n     * @param {*} reordered is the swapped array of columns\r\n     */\r\n    handleheaderNameList = (reordered) => {\r\n        swapList = reordered;\r\n    };\r\n\r\n    getSingleSortResult = (data) => {\r\n        const { sortDirection, sortColumn } = this.state;\r\n        if (sortDirection !== \"NONE\" && sortColumn !== \"\") {\r\n            const sortColumns = sortColumn;\r\n            const sortDirections = sortDirection;\r\n            this.setState({ selectedIndexes: [] });\r\n            const comparer = (a, b) => {\r\n                if (sortDirection === \"ASC\") {\r\n                    return a[sortColumns] > b[sortColumns] ? 1 : -1;\r\n                }\r\n                if (sortDirection === \"DESC\") {\r\n                    return a[sortColumns] < b[sortColumns] ? 1 : -1;\r\n                }\r\n                return 0;\r\n            };\r\n            return sortDirections === \"NONE\" ? data : [...data].sort(comparer);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Method To sort the rows for a particular column\r\n     * @param {*} data is the row datas to be considered for sorting\r\n     * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n     * @param {*} sortDirection is the type of sort\r\n     */\r\n    sortRows = (data, sortColumn, sortDirection) => {\r\n        const {\r\n            junk,\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            dataSet,\r\n            subDataSet,\r\n            pageIndex,\r\n            pageRowCount,\r\n            rows\r\n        } = this.state;\r\n        this.setState({ selectedIndexes: [] });\r\n        // eslint-disable-next-line consistent-return\r\n        const comparer = (a, b) => {\r\n            if (sortDirection === \"ASC\") {\r\n                return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n            }\r\n            if (sortDirection === \"DESC\") {\r\n                return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n            }\r\n        };\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSearchKey = String(searchValue).toLowerCase() !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n        let dtRows = [];\r\n        if (hasFilter || hasSearchKey || hasGropSortKeys) {\r\n            dtRows = subDataSet;\r\n        } else {\r\n            dtRows = dataSet;\r\n        }\r\n        const result = [...dtRows].sort(comparer);\r\n        this.setState({\r\n            rows: result.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: result,\r\n            selectedIndexes: [],\r\n            sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n            sortDirection\r\n        });\r\n        return sortDirection === \"NONE\" ? data : rows;\r\n    };\r\n\r\n    getSlicedRows = async (filters, rowsToSplit, firstResult) => {\r\n        const {\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        let data = [];\r\n        if (rowsToSplit.length > 0) {\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            let index = 0;\r\n            chunks.forEach(async (arr) => {\r\n                this.getRowsAsync(arr, filters).then(async (dt) => {\r\n                    index++;\r\n                    data = [...data, ...dt];\r\n                    if (index === chunks.length) {\r\n                        let dtSet = [...firstResult, ...data];\r\n                        if (searchValue !== \"\") {\r\n                            const searchKey = String(searchValue).toLowerCase();\r\n                            dtSet = dtSet.filter((item) => {\r\n                                return Object.values(item)\r\n                                    .toString()\r\n                                    .toLowerCase()\r\n                                    .includes(searchKey);\r\n                            });\r\n                        }\r\n\r\n                        dtSet = this.getSingleSortResult(dtSet);\r\n                        if (\r\n                            sortingParamsObjectList &&\r\n                            sortingParamsObjectList.length > 0\r\n                        ) {\r\n                            dtSet = this.groupSort(\r\n                                sortingParamsObjectList,\r\n                                dtSet\r\n                            );\r\n                        }\r\n                        const rw = dtSet.slice(0, pageIndex * pageRowCount);\r\n                        await this.setStateAsync({\r\n                            subDataSet: dtSet,\r\n                            rows: rw,\r\n                            tempRows: rw,\r\n                            count: rw.length\r\n                        });\r\n                        if (dtSet.length === 0) {\r\n                            this.handleWarningStatus();\r\n                        } else {\r\n                            this.closeWarningStatus(rw);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    getRowsAsync = async (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    getrows = (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual deselect of rows\r\n     * @param {*} rows is the deselected row\r\n     */\r\n    onRowsDeselected = (rows) => {\r\n        const { selectedIndexes } = this.state;\r\n        const rowIndexes = rows.map((r) => r.rowIdx);\r\n        this.setState({\r\n            selectedIndexes: selectedIndexes.filter(\r\n                (i) => rowIndexes.indexOf(i) === -1\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To update the cell/cells with the edited values\r\n     * @param {*} fromRow is the row from which this edit is performed\r\n     * @param {*} toRow is the row upto which this edit is performed\r\n     * @param {*} updated is the value of change\r\n     * @param {*} action is type of edit action performed\r\n     */\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n        let updatedArray = [];\r\n        let updatedValue = \"\";\r\n        console.log({ fromRow, toRow, updated, action });\r\n        console.log(\"change\", updated);\r\n        for (let update in updated) {\r\n            updatedValue = updated[update];\r\n        }\r\n        if (action === \"CELL_UPDATE\") {\r\n            const arr = FormulaProcessor(updatedValue);\r\n            let colKeyArray = [];\r\n            if (arr.length > 0) {\r\n                arr.forEach((ar) => {\r\n                    this.state.columns.forEach((item, index) => {\r\n                        if (index === ar - 1) {\r\n                            colKeyArray.push(item.key);\r\n                        }\r\n                    });\r\n                });\r\n                let tempSum = 0;\r\n                colKeyArray.forEach((item) => {\r\n                    tempSum += Number(this.state.rows[fromRow][item]);\r\n                });\r\n                updated[Object.keys(updated)] = tempSum;\r\n                console.log(updated[Object.keys(updated)]);\r\n                this.setState({\r\n                    prevRow: fromRow,\r\n                    prevAction: action,\r\n                    columnKeyArray: colKeyArray\r\n                });\r\n            }\r\n        }\r\n        if (action === \"CELL_DRAG\") {\r\n            if (this.state.prevAction === \"CELL_UPDATE\") {\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    console.log(this.state.columnKeyArray);\r\n                    updatedArray = [...this.state.columnKeyArray];\r\n                    this.setState({ prevRow: fromRow, prevAction: action });\r\n                }\r\n                let columnName = \"\";\r\n                const filter = this.formulaAppliedCols.filter((item) => {\r\n                    if (\r\n                        updated[item.key] !== null &&\r\n                        updated[item.key] !== undefined\r\n                    ) {\r\n                        columnName = item.key;\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                if (filter.length > 0) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n\r\n                    updated = applyFormula(updated, columnName);\r\n                }\r\n            }\r\n        }\r\n        if (action !== \"COPY_PASTE\") {\r\n            if (\r\n                action === \"CELL_DRAG\" &&\r\n                this.state.prevAction === \"CELL_UPDATE\"\r\n            ) {\r\n                this.setState((state) => {\r\n                    const rows = state.rows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(rows[i][item]);\r\n                        });\r\n                        rows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n                    return {\r\n                        rows\r\n                    };\r\n                });\r\n\r\n                this.setState((state) => {\r\n                    const filteringRows = state.filteringRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(filteringRows[i][item]);\r\n                        });\r\n                        filteringRows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n\r\n                    return {\r\n                        filteringRows\r\n                    };\r\n                });\r\n                this.setState((state) => {\r\n                    const tempRows = state.tempRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(tempRows[i][item]);\r\n                        });\r\n                        tempRows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n\r\n                    return {\r\n                        tempRows\r\n                    };\r\n                });\r\n            } else {\r\n                this.props.updatedRows({ fromRow, toRow, updated, action });\r\n                this.setState((state) => {\r\n                    const rows = state.rows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        rows[i] = {\r\n                            ...rows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        rows\r\n                    };\r\n                });\r\n\r\n                this.setState((state) => {\r\n                    const filteringRows = state.filteringRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        filteringRows[i] = {\r\n                            ...filteringRows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        filteringRows\r\n                    };\r\n                });\r\n                this.setState((state) => {\r\n                    const tempRows = state.tempRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        tempRows[i] = {\r\n                            ...tempRows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        tempRows\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        if (this.props.updateCellData) {\r\n            this.props.updateCellData(\r\n                this.state.tempRows[fromRow],\r\n                this.state.tempRows[toRow],\r\n                updated,\r\n                action\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual select of rows\r\n     * @param {*} rows is the selected row\r\n     */\r\n    onRowsSelected = (rows) => {\r\n        const { selectedIndexes } = this.state;\r\n        const { selectBulkData } = this.props;\r\n        this.setState({\r\n            selectedIndexes: selectedIndexes.concat(rows.map((r) => r.rowIdx))\r\n        });\r\n        if (selectBulkData) {\r\n            selectBulkData(rows);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To filter the multiple columns\r\n     * @param {*} value is the  incoming filtering event\r\n     */\r\n    handleFilterChange = async (value) => {\r\n        const {\r\n            dataSet,\r\n            pageRowCount,\r\n            junk,\r\n            pageIndex,\r\n            searchValue,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n            junk[value.column.key] = value;\r\n        } else {\r\n            delete junk[value.column.key];\r\n        }\r\n        this.setState({ junk });\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const firstPage = dataSet.slice(0, pageRowCount);\r\n        let data = this.getrows(firstPage, junk);\r\n        await this.setStateAsync({\r\n            rows: data,\r\n            tempRows: data,\r\n            count: data.length,\r\n            subDataSet: hasFilter ? data : [],\r\n            pageIndex: hasFilter ? pageIndex : 1\r\n        });\r\n        if (hasFilter) {\r\n            const rowsRemaining = dataSet.slice(pageRowCount, dataSet.length);\r\n            this.getSlicedRows(junk, rowsRemaining, data);\r\n        } else {\r\n            let rowsRemaining = dataSet; // .slice(this.state.pageRowCount, this.state.dataSet.length);\r\n            if (searchValue !== \"\") {\r\n                const searchKey = String(searchValue).toLowerCase();\r\n                rowsRemaining = rowsRemaining.filter((item) => {\r\n                    return Object.values(item)\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(searchKey);\r\n                });\r\n            }\r\n            rowsRemaining = this.getSingleSortResult(rowsRemaining);\r\n\r\n            if (sortingParamsObjectList && sortingParamsObjectList.length > 0) {\r\n                rowsRemaining = this.groupSort(\r\n                    sortingParamsObjectList,\r\n                    rowsRemaining\r\n                );\r\n            }\r\n\r\n            const rw = rowsRemaining.slice(0, pageIndex * pageRowCount);\r\n            await this.setStateAsync({\r\n                subDataSet: rowsRemaining,\r\n                rows: rw,\r\n                tempRows: rw,\r\n                count: rw.length\r\n            });\r\n            data = rw;\r\n        }\r\n        if (data.length === 0) {\r\n            this.handleWarningStatus();\r\n        } else {\r\n            this.closeWarningStatus(data);\r\n        }\r\n    };\r\n\r\n    isAtBottom = (event) => {\r\n        const { target } = event; // as HTMLDivElement;\r\n        const isbtm =\r\n            target.clientHeight + target.scrollTop >= target.scrollHeight - 10;\r\n        return isbtm;\r\n    };\r\n\r\n    isSubset() {\r\n        const {\r\n            junk,\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            sortDirection\r\n        } = this.state;\r\n        if (\r\n            Object.keys(junk).length > 0 ||\r\n            sortDirection !== \"NONE\" ||\r\n            searchValue !== \"\" ||\r\n            (sortingParamsObjectList && sortingParamsObjectList.length > 0)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadMoreRows = (from, newRowsCount) => {\r\n        return new Promise((resolve) => {\r\n            // const hasFilter = Object.keys(this.state.junk).length > 0;\r\n            const { dataSet, subDataSet } = this.state;\r\n            let to = from + newRowsCount;\r\n            if (this.isSubset() && subDataSet.length > 0) {\r\n                to = to < subDataSet.length ? to : subDataSet.length;\r\n                resolve(subDataSet.slice(from, to));\r\n            } else {\r\n                resolve(dataSet.slice(from, to));\r\n            }\r\n        });\r\n    };\r\n\r\n    handleScroll = async (event) => {\r\n        if (!this.isAtBottom(event)) return;\r\n        const { pageIndex, pageRowCount, rows } = this.state;\r\n        const newRows = await this.loadMoreRows(\r\n            pageIndex * pageRowCount,\r\n            pageRowCount\r\n        );\r\n        if (newRows && newRows.length > 0) {\r\n            let length = 0;\r\n            this.setState((prev) => {\r\n                length = prev.rows.length + newRows.length;\r\n            });\r\n            this.setState({\r\n                rows: [...rows, ...newRows],\r\n                count: length,\r\n                pageIndex: pageIndex + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    globalSearchLogic = (e, updatedRows) => {\r\n        const { pageIndex, pageRowCount } = this.state;\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = updatedRows.filter((item) => {\r\n            return Object.values(item)\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ warningStatus: \"invalid\", rows: [], count: 0 });\r\n        } else {\r\n            const rowSlice = filteredRows.slice(0, pageIndex * pageRowCount);\r\n            this.setState({\r\n                warningStatus: \"\",\r\n                rows: rowSlice,\r\n                subDataSet: filteredRows,\r\n                count: rowSlice.length\r\n            });\r\n        }\r\n    };\r\n\r\n    handleWarningStatus = () => {\r\n        this.setState({ warningStatus: \"invalid\" });\r\n    };\r\n\r\n    closeWarningStatus = (val) => {\r\n        const {\r\n            pageIndex,\r\n            pageRowCount,\r\n            dataSet,\r\n            sortDirection,\r\n            sortColumn,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        let rVal = val;\r\n        if (!rVal) {\r\n            const hasSingleSortkey =\r\n                sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n            const hasGropSortKeys =\r\n                sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n\r\n            let dataRows = this.getFilterResult([...dataSet]);\r\n            if (hasSingleSortkey) {\r\n                dataRows = this.getSingleSortResult(dataRows);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                dataRows = this.groupSort(sortingParamsObjectList, dataRows);\r\n            }\r\n            rVal = dataRows.slice(0, pageIndex * pageRowCount);\r\n        }\r\n        this.setState({ warningStatus: \"\", rows: rVal, count: rVal.length });\r\n    };\r\n\r\n    save = () => {\r\n        const { saveRows } = this.props;\r\n        const { dataSet } = this.state;\r\n        saveRows(dataSet);\r\n    };\r\n\r\n    clearAllFilters = () => {\r\n        const {\r\n            pageIndex,\r\n            pageRowCount,\r\n            dataSet,\r\n            sortDirection,\r\n            sortColumn,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n\r\n        let dtSet = this.getSearchResult(dataSet);\r\n        if (hasSingleSortkey) {\r\n            dtSet = this.getSingleSortResult(dtSet);\r\n        }\r\n        if (hasGropSortKeys) {\r\n            dtSet = this.groupSort(sortingParamsObjectList, dtSet);\r\n        }\r\n        const rVal = dtSet.slice(0, pageIndex * pageRowCount);\r\n        this.setState({\r\n            rows: rVal,\r\n            count: rVal.length,\r\n            subDataSet: dtSet\r\n        });\r\n    };\r\n\r\n    getSearchResult = (data) => {\r\n        const { searchValue } = this.state;\r\n        let dtSet = data;\r\n        const searchKey = String(searchValue).toLowerCase();\r\n        if (searchKey !== \"\") {\r\n            dtSet = dtSet.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        return dtSet;\r\n    };\r\n\r\n    getFilterResult = (data) => {\r\n        const { junk } = this.state;\r\n        let dataRows = [];\r\n        if (Object.keys(junk).length > 0) {\r\n            const rowsToSplit = [...data];\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            chunks.forEach((arr) => {\r\n                const dt = this.getrows(arr, junk);\r\n                dataRows = [...dataRows, ...dt];\r\n            });\r\n        } else {\r\n            dataRows = [...data];\r\n        }\r\n        return dataRows;\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            count,\r\n            searchValue,\r\n            sortingPanelComponent,\r\n            columnReorderingComponent,\r\n            exportComponent,\r\n            warningStatus,\r\n            filteringRows,\r\n            height,\r\n            columns,\r\n            rows,\r\n            selectedIndexes\r\n        } = this.state;\r\n        return (\r\n            <div onScroll={this.handleScroll} className=\"iCargo__custom\">\r\n                <div className=\"neo-grid-header\">\r\n                    <div className=\"neo-grid-header__results\">\r\n                        Showing &nbsp;<strong> {count} </strong> &nbsp; records\r\n                    </div>\r\n                    <div className=\"neo-grid-header__utilities\">\r\n                        <div className=\"txt-wrap\">\r\n                            <input\r\n                                data-testid=\"globalSearch\"\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    this.handleSearchValue(e.target.value);\r\n                                    const srchRows = this.getSearchRecords(e);\r\n                                    this.globalSearchLogic(e, srchRows);\r\n                                }}\r\n                                value={searchValue}\r\n                                className=\"txt\"\r\n                                placeholder=\"Search\"\r\n                            />\r\n                            <i>\r\n                                <IconSearch />\r\n                            </i>\r\n                        </div>\r\n                        <div\r\n                            role=\"presentation\"\r\n                            id=\"openSorting\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.sortingPanel}\r\n                        >\r\n                            <IconGroupSort />\r\n                        </div>\r\n                        {sortingPanelComponent}\r\n                        <div\r\n                            role=\"presentation\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.columnReorderingPannel}\r\n                        >\r\n                            <IconColumns />\r\n                        </div>\r\n                        {columnReorderingComponent}\r\n                        <div\r\n                            role=\"presentation\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.exportColumnData}\r\n                        >\r\n                            <IconShare />\r\n                        </div>\r\n                        {exportComponent}\r\n                    </div>\r\n                </div>\r\n                <ErrorMessage\r\n                    className=\"errorDiv\"\r\n                    status={warningStatus}\r\n                    closeWarningStatus={() => {\r\n                        this.closeWarningStatus();\r\n                    }}\r\n                    clearSearchValue={this.clearSearchValue}\r\n                />\r\n                <ExtDataGrid\r\n                    toolbar={<Toolbar enableFilter />}\r\n                    getValidFilterValues={(columnKey) =>\r\n                        this.getValidFilterValues(filteringRows, columnKey)\r\n                    }\r\n                    minHeight={height}\r\n                    columns={columns}\r\n                    rowGetter={(i) => rows[i]}\r\n                    rowsCount={rows.length}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    enableCellSelect\r\n                    onClearFilters={() => {\r\n                        this.setState({ junk: {} });\r\n                        this.clearAllFilters();\r\n                    }}\r\n                    onColumnResize={(idx, width) =>\r\n                        console.log(\r\n                            `Column ${idx} has been resized to ${width}`\r\n                        )\r\n                    }\r\n                    onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n                    rowSelection={{\r\n                        showCheckbox: true,\r\n                        enableShiftSelect: true,\r\n                        onRowsSelected: this.onRowsSelected,\r\n                        onRowsDeselected: this.onRowsDeselected,\r\n                        selectBy: {\r\n                            indexes: selectedIndexes\r\n                        }\r\n                    }}\r\n                    onGridSort={(sortColumn, sortDirection) =>\r\n                        this.sortRows(filteringRows, sortColumn, sortDirection)\r\n                    }\r\n                    globalSearch={this.globalSearchLogic}\r\n                    handleWarningStatus={this.handleWarningStatus}\r\n                    closeWarningStatus={this.closeWarningStatus}\r\n                    // cellRangeSelection={{\r\n                    //   onComplete: this.setSelection,\r\n                    // }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSpreadsheet.propTypes = {\r\n    airportCodes: PropTypes.any,\r\n    rows: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    status: PropTypes.any,\r\n    count: PropTypes.any,\r\n    updateCellData: PropTypes.any,\r\n    selectBulkData: PropTypes.any,\r\n    pinnedReorder: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    globalSearchLogic: PropTypes.any,\r\n    closeWarningStatus: PropTypes.any,\r\n    dataSet: PropTypes.any,\r\n    pageSize: PropTypes.any,\r\n    updatedRows: PropTypes.any,\r\n    saveRows: PropTypes.any\r\n};\r\n\r\nexport default Spreadsheet;\r\n","export default function FormulaProcessor(expression) {\n    let columnArray = [];\n    if (expression.match(/^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$/g)) {\n        console.log(\n            expression.match(/^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$/g)\n        );\n        const RegCode = /^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$$/g;\n        const exp = RegCode.exec(expression);\n        const parameter1 = exp.groups.one;\n        const parameter2 = exp.groups.more;\n        if (parameter1.match(/^(c\\d*?)$/i)) {\n            const RegCode1 = /^c(?<column>\\d*?)$/g;\n            const exper1 = RegCode1.exec(parameter1);\n            columnArray.push(Number(exper1.groups.column));\n        }\n        if (parameter2.length > 1) {\n            const moreParameters = parameter2.split(\",\");\n            moreParameters.forEach((item) => {\n                if (item.match(/^(c\\d*?)$/i)) {\n                    const RegCodes = /^c(?<column>\\d*?)$/g;\n                    const expers = RegCodes.exec(item);\n                    columnArray.push(Number(expers.groups.column));\n                }\n            });\n        } else {\n            if (parameter2.match(/^(c\\d*?)$/i)) {\n                const RegCode2 = /^c(?<column>\\d*?)$/g;\n                const exper2 = RegCode2.exec(parameter2);\n                columnArray.push(Number(exper2.groups.column));\n            }\n        }\n    }\n\n    if (columnArray.length > 1) {\n        console.log(columnArray);\n        return columnArray;\n    } else return [];\n}\n","export const applyFormula = (obj, columnName) => {\n    const val = obj;\n    const item = val[columnName].toString();\n    if (item && item.charAt(0) === \"=\") {\n        const operation = item.split(\"(\");\n        const value = operation[1]\n            .substring(0, operation[1].length - 1)\n            .split(/[,:]/);\n        switch (operation[0]) {\n            case \"=SUM\":\n            case \"=ADD\":\n            case \"=sum\":\n            case \"=add\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) + Number(b);\n                });\n                break;\n            case \"=MUL\":\n            case \"=mul\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) * Number(b);\n                });\n                break;\n            case \"=SUB\":\n            case \"=sub\":\n            case \"=DIFF\":\n            case \"=diff\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) - Number(b);\n                });\n                break;\n            case \"=min\":\n            case \"=MIN\":\n                val[columnName] = Math.min(...value);\n                break;\n            case \"=max\":\n            case \"=MAX\":\n                val[columnName] = Math.max(...value);\n                break;\n            default:\n        }\n    }\n    return val;\n};\n","import React, { useState, useEffect } from \"react\";\r\nimport Spreadsheet from \"spreadsheet\";\r\nimport CargoData from \"./data.json\";\r\n//import { fetchData } from \"./getData\";\r\n\r\nconst App = (props) => {\r\n    //Get spreadsheet height value, which is a required value\r\n    const gridHeight = \"90vh\";\r\n    //Set state value for variable to hold grid data\r\n    const [data, setData] = useState();\r\n    const rows = CargoData;\r\n\r\n    // Spreadsheet page size\r\n    const pageSize = 500;\r\n    const maxLeftPinnedColumn = 5;\r\n    //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\r\n    //Editable, Draggable, sortable, resizable, filterable, default width\r\n    const columns = [\r\n        {\r\n            key: \"flightno\",\r\n            name: \"FlightNo\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"date\",\r\n            name: \"Date\",\r\n            draggable: false,\r\n            editor: \"DatePicker\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"segmentfrom\",\r\n            name: \"Segment From\",\r\n            draggable: false,\r\n            editor: \"DropDown\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"revenue\",\r\n            name: \"Revenue\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"yeild\",\r\n            name: \"Yeild\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"segmentto\",\r\n            name: \"Segment To\",\r\n            draggable: false,\r\n            editor: \"DropDown\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"flightModel\",\r\n            name: \"Flight Model\",\r\n            draggable: false,\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"numeric\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"bodyType\",\r\n            name: \"Body Type\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"type\",\r\n            name: \"Type\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"startTime\",\r\n            name: \"Start Time\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"endTime\",\r\n            name: \"End Time\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"status\",\r\n            name: \"Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"additionalStatus\",\r\n            name: \"Additional Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"timeStatus\",\r\n            name: \"Time Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"weightpercentage\",\r\n            name: \"Weight Percentage\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"weightvalue\",\r\n            name: \"Weight Value\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"volumepercentage\",\r\n            name: \"Volume Percentage\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"volumevalue\",\r\n            name: \"Volume Value\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition1\",\r\n            name: \"uldposition1\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue1\",\r\n            name: \"uldvalue1\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition2\",\r\n            name: \"uldposition2\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue2\",\r\n            name: \"uldvalue2\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition3\",\r\n            name: \"uldposition3\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue3\",\r\n            name: \"uldvalue3\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition4\",\r\n            name: \"uldposition4\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue4\",\r\n            name: \"uldvalue4\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n\r\n        {\r\n            key: \"sr\",\r\n            name: \"SR\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"queuedBookingSR\",\r\n            name: \"Queued Booking SR\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"queuedBookingvolume\",\r\n            name: \"Queued Booking Volume\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        }\r\n    ];\r\n\r\n    //Configure columns and its related functions\r\n    const segmenToCode = [\r\n        \"AAA\",\r\n        \"AAB\",\r\n        \"AAC\",\r\n        \"ABA\",\r\n        \"ABB\",\r\n        \"ABC\",\r\n        \"ACA\",\r\n        \"ACB\",\r\n        \"ACC\",\r\n        \"BAA\",\r\n        \"BAB\",\r\n        \"BAC\",\r\n        \"BBA\",\r\n        \"BBB\",\r\n        \"BBC\",\r\n        \"BCA\",\r\n        \"BCB\",\r\n        \"BCC\",\r\n        \"CAA\",\r\n        \"CAB\",\r\n        \"CAC\",\r\n        \"CBA\",\r\n        \"CBB\",\r\n        \"CBC\",\r\n        \"CCA\",\r\n        \"CCB\",\r\n        \"CCC\",\r\n        \"XXX\",\r\n        \"XXY\",\r\n        \"XXZ\",\r\n        \"XYX\",\r\n        \"XYY\",\r\n        \"XYZ\",\r\n        \"XZX\",\r\n        \"XZY\",\r\n        \"XZZ\",\r\n        \"YXX\",\r\n        \"YXY\",\r\n        \"YXZ\",\r\n        \"YYX\",\r\n        \"YYY\",\r\n        \"YYZ\",\r\n        \"YZX\",\r\n        \"YZY\",\r\n        \"YZZ\",\r\n        \"ZXX\",\r\n        \"ZXY\",\r\n        \"ZXZ\",\r\n        \"ZYX\",\r\n        \"ZYY\",\r\n        \"ZYZ\",\r\n        \"ZZX\",\r\n        \"ZZY\",\r\n        \"ZZZ\"\r\n    ];\r\n\r\n    //Configure dropdown editor values\r\n    const segmentFromCode = [\r\n        \"AAA\",\r\n        \"AAB\",\r\n        \"AAC\",\r\n        \"ABA\",\r\n        \"ABB\",\r\n        \"ABC\",\r\n        \"ACA\",\r\n        \"ACB\",\r\n        \"ACC\",\r\n        \"BAA\",\r\n        \"BAB\",\r\n        \"BAC\",\r\n        \"BBA\",\r\n        \"BBB\",\r\n        \"BBC\",\r\n        \"BCA\",\r\n        \"BCB\",\r\n        \"BCC\",\r\n        \"CAA\",\r\n        \"CAB\",\r\n        \"CAC\",\r\n        \"CBA\",\r\n        \"CBB\",\r\n        \"CBC\",\r\n        \"CCA\",\r\n        \"CCB\",\r\n        \"CCC\"\r\n    ];\r\n\r\n    //Gets called when there is a cell edit\r\n    const updateCellData = (fromRow, toRow, value, updateType) => {\r\n        if (updateType === \"CELL_UPDATE\") {\r\n            console.log(\r\n                \"Starting row:\",\r\n                fromRow,\r\n                \"updated-Value:\",\r\n                value,\r\n                \"Updation-Type:\",\r\n                updateType,\r\n                \"Ending Row:\",\r\n                toRow\r\n            );\r\n        }\r\n        if (updateType === \"CELL_DRAG\") {\r\n            console.log(\r\n                \"fromRow:\",\r\n                fromRow,\r\n                \"toRow:\",\r\n                toRow,\r\n                \"updated-Value:\",\r\n                value,\r\n                \"Updation-Type:\",\r\n                updateType\r\n            );\r\n        }\r\n    };\r\n\r\n    //Gets called when row bulk edit is done\r\n    const selectBulkData = (selectedRows) => {\r\n        console.log(\"selectedRows:\", selectedRows);\r\n    };\r\n\r\n    //binding the required values of dropDown to the dataSource field in columns\r\n    columns.forEach((item) => {\r\n        if (item.key === \"segmentto\") {\r\n            let tempArray = [];\r\n            segmenToCode.forEach((it) => {\r\n                tempArray.push({ id: it, value: it });\r\n            });\r\n            item.dataSource = tempArray;\r\n        } else if (item.key === \"segmentfrom\") {\r\n            let tempArray = [];\r\n            segmentFromCode.forEach((it) => {\r\n                tempArray.push({ id: it, value: it });\r\n            });\r\n            item.dataSource = tempArray;\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data, uncomment below code to use API call\r\n        // fetchData(0).then((data) => {\r\n        //   setItems(data);\r\n        // });\r\n        setData(rows);\r\n    }, [rows]);\r\n\r\n    /**\r\n     * Method To render updated rows\r\n     * @param {*} rows is the updated row values\r\n     */\r\n    const updatedRows = ({ fromRow, toRow, updated }) => {\r\n        let tempData = [...data];\r\n        const temp = tempData.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            temp[i] = {\r\n                ...temp[i],\r\n                ...updated\r\n            };\r\n        }\r\n        setData(temp);\r\n        console.log(\"UpdatedRows:\", temp);\r\n    };\r\n\r\n    /**\r\n     * Method return updated rows\r\n     */\r\n    const handleSave = () => {\r\n        console.log(data);\r\n    };\r\n\r\n    if (data) {\r\n        return (\r\n            <div>\r\n                {/* click on button will load updated records in spreadsheet*/}\r\n                {/* <button type=\"button\" onClick={handleSave}>\r\n                    Load Data\r\n                </button> */}\r\n                <Spreadsheet\r\n                    rows={data.slice(0, pageSize)}\r\n                    dataSet={data}\r\n                    pageSize={pageSize}\r\n                    count={pageSize}\r\n                    columns={columns}\r\n                    gridHeight={gridHeight}\r\n                    updateCellData={updateCellData}\r\n                    selectBulkData={selectBulkData}\r\n                    maxLeftPinnedColumn={maxLeftPinnedColumn}\r\n                    updatedRows={updatedRows}\r\n                />\r\n            </div>\r\n        );\r\n    } else if (data === undefined) {\r\n        return <h2>Loading Data</h2>;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}