{"version":3,"sources":["webpack:///../dist/Styles/main.scss?079b","../../dist/Styles/main.scss","../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorMessage.js","../../src/common/ErrorConstants.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","this","document","window","constructor","value","Date","ev","updated","date","state","Intl","year","month","day","dateTimeFormat","props","column","type","ref","onChange","onValueChanged","React","DatePicker","PropTypes","string","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","onClick","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","data-testid","node","drag","drop","text","any","ColumnsList","columns","c","atIndex","setColumns","update","$splice","values","temp","display","flexWrap","key","columnsArray","handleReorderList","HTML5toTouch","backends","backend","HTML5Backend","enableMouseEvents","preview","transition","TouchTransition","columnReorderEntityList","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","isExistingAllSelect","typeToBeAdded","existingLeftPinnedList","indexOfInsertion","e","searchKey","String","existingList","filtererdColumnReorderList","columnSelectList","colsList","checked","disabled","columHeaderName","subItem","reordered","maxLeftPinnedColumn","onClickAway","handleClick","placeholder","filterColumnReorderList","length","map","color","createColumnsArrayFromProps","ColumnReordering","headerKeys","existingPinnedHeadersList","closeColumnReOrdering","handleheaderNameList","updateTableAsPerRowChooser","Card","findCard","moveCard","SortingList","card","cards","setCards","sortsArray","handleReorderListOfSort","rowList","existingSortingOrderList","sortBy","order","sortOn","sortingOrderList","JSON","errorMessage","rowsValue","row","name","sortingKey","event","unique","showError","element","reOrderedIndexList","onKeyDown","clearAll","App","sortingParamsObjectList","closeSorting","columnFieldValue","clearAllSortingParams","setTableAsPerSortingParams","handleTableSortSwap","downLaodFileType","columnEntityList","existingColumnEntityList","columnValueList","filteredRow","filteredRowValues","filteredRowHeader","rows","rowLength","filteredColumnVal","rowFilteredValues","rowFilteredHeader","columnName","doc","startY","head","body","tableWidth","headStyles","fillColor","theme","margin","top","right","bottom","left","filteredRowValue","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","columnLength","fileLength","clickTag","warning","columnSearchLogic","closeExport","selectDownLoadType","ExportData","columnsList","DropDownEditor","selectors","Data","swapList","swapSortList","NumericFilter","reorderedSwap","existingColumnsHeaderList","rePositionedArray","inComingColumnsHeaderList","pinnedColumnsList","singleHeaderOneList","headerItem","b","a","tempList","pinnedReorder","newIndex","arr","k","selectedIndexes","headerNameList","columnReorderingComponent","searchValue","filteringRows","columnField","sortingPanelComponent","args","sortingOrderSwapList","hasSingleSortkey","dataRows","Object","subDataSet","exportData","exportComponent","tableSortList","hasFilter","hasSearchKey","existingRows","sortingOrderNameList","nameOfItem","rowItem","primer","reverse","existingSortingOrderSwapList","stringOfItemIndex","str","$1","sortColumn","sortDirection","hasGropSortKeys","dtRows","result","rowsToSplit","chunks","dtSet","rw","tempRows","count","filterVal","filters","rowIndexes","r","action","filter","obj","val","operation","Number","Math","console","applyFormula","junk","firstPage","pageIndex","rowsRemaining","target","Promise","resolve","to","from","newRows","prev","filteredRows","updatedRows","rowSlice","warningStatus","rVal","dt","pageSize","dataSetVar","height","pageRowCount","dataSet","colItem","dataSource","resizeEvent","rowsToSearch","startsWith","getFilterResult","getSingleSortResult","groupSort","onScroll","handleScroll","srchRows","sortingPanel","columnReorderingPannel","exportColumnData","closeWarningStatus","clearSearchValue","toolbar","enableFilter","getValidFilterValues","columnKey","minHeight","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","idx","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","globalSearch","handleWarningStatus","defaultCmp","getCmpFunc","cmp","fields","nFields","arguments","field","A","B","l","Spreadsheet","airportCodes","updateCellData","selectBulkData","globalSearchLogic","saveRows","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","width","filterType","segmenToCode","segmentFromCode","forEach","tempArray","it","slice","gridHeight","fromRow","toRow","updateType","log","selectedRows","undefined","ReactDOM","render","getElementById"],"mappings":"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KAAM,YACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,IAEhB,CACI9N,IAAK,eACLiE,KAAM,eACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,IAEhB,CACI9N,IAAK,YACLiE,KAAM,YACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,IAGhB,CACI9N,IAAK,KACLiE,KAAM,KACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,IAEhB,CACI9N,IAAK,kBACLiE,KAAM,oBACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,IAEhB,CACI9N,IAAK,sBACLiE,KAAM,wBACNqN,WAAW,EACXC,OAAQ,OACRC,mBAAmB,EACnBC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,MAAO,IACPC,WAAY,qBACZ/D,WAAY,KAKdgE,EAAe,CACjB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAIEC,EAAkB,CACpB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAqCJzS,EAAQ0S,SAAQ,SAAChU,GACb,GAAiB,cAAbA,EAAKgC,IAAqB,CAC1B,IAAIiS,EAAY,GAChBH,EAAaE,SAAQ,SAACE,GAClBD,EAAU3W,KAAK,CAAE+B,GAAI6U,EAAIvW,MAAOuW,OAEpClU,EAAK8P,WAAamE,OACf,GAAiB,gBAAbjU,EAAKgC,IAAuB,CACnC,IAAIiS,EAAY,GAChBF,EAAgBC,SAAQ,SAACE,GACrBD,EAAU3W,KAAK,CAAE+B,GAAI6U,EAAIvW,MAAOuW,OAEpClU,EAAK8P,WAAamE,MAI1B/U,qBAAU,WAKNkU,EAAQ5L,KACT,CAACA,IA0BJ,OAAIsB,EAEI,6BAKI,kBAAC,GAAD,CACItB,KAAMsB,EAAKqL,MAAM,EAnjBhB,KAojBDvE,QAAS9G,EACT0G,SArjBC,IAsjBD/B,MAtjBC,IAujBDnM,QAASA,EACT8S,WA9jBG,OA+jBHpB,eA/FO,SAACqB,EAASC,EAAO3W,EAAO4W,GACxB,gBAAfA,GACAlG,QAAQmG,IACJ,gBACAH,EACA,iBACA1W,EACA,iBACA4W,EACA,cACAD,GAGW,cAAfC,GACAlG,QAAQmG,IACJ,WACAH,EACA,SACAC,EACA,iBACA3W,EACA,iBACA4W,IA0EItB,eApEO,SAACwB,GACpBpG,QAAQmG,IAAI,gBAAiBC,IAoEjB1Q,oBA1jBY,EA2jBZoL,YArCI,SAAC,GAGjB,IAHkD,IAA/BkF,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOxW,EAAc,EAAdA,QAE7B+D,EADM,YAAOiH,GACGqL,QACblX,EAAIoX,EAASpX,GAAKqX,EAAOrX,IAC9B4E,EAAK5E,GAAL,2BACO4E,EAAK5E,IACLa,GAGXsV,EAAQvR,GACRwM,QAAQmG,IAAI,eAAgB3S,YA+BZ6S,IAAT5L,EACA,4CAEA,MC3kBf6L,IAASC,OAAO,kBAAC,GAAD,MAASpX,SAASqX,eAAe,W","file":"static/js/main.3d3c1800.chunk.js","sourcesContent":["var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./main.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--default: rgba(26, 72, 105);--secondary: #f9fafb;--text-light: #566a81;--titlecolor: rgba(26, 72, 105);--button-blue:#0e4bda;--danger: #ff0000;--white: #fff;--dark-grey:#9ea2a5;--light-grey:#ccc;--border-grey: #d8d8d8;--placeholder: #bbbbbb;--box-shadow: rgba(32, 77, 111, 0.2);--scroll-track:#f1f1f1;--scroll-thumb:#c1c1c1;--focus: #199ed8;--border-table:#d2d5de;--em-base: 16}body{color:var(--text-light);font-family:sans-serif,Arial,\\\"Segoe UI\\\",serif;font-size:.75rem}::placeholder{color:#bbb}::-ms-input-placeholder{color:#bbb}::-ms-input-placeholder{color:#bbb}.error{color:var(--danger)}.txt{height:25px;border-radius:3px;padding:1px 0 0 3px;font-size:12px;color:#000;border:#cfd0d0 solid 1px}.neo-grid-header{background-color:var(--secondary);display:flex;padding:20px 15px;justify-content:space-between}.neo-grid-header__results{display:flex;font-size:.875rem;color:var(--titlecolor);font-weight:700}.neo-grid-header__results span{margin-left:5px;display:inline-block}.neo-grid-header__results .showing{margin-left:5px;padding-left:5px;position:relative}.neo-grid-header__results .showing:before{content:\\\"\\\";position:absolute;height:15px;width:1px;left:0;top:3px;background:var(--default)}.neo-grid-header__utilities{display:flex;align-items:center}.neo-grid-header__utilities .txt-wrap{position:relative;right:31px}.neo-grid-header__utilities .txt-wrap .txt{padding:1px 0 0 23px}.neo-grid-header__utilities .txt-wrap i{position:absolute;left:7px;top:4px}.neo-grid-header__utilities .utilities-icon{margin-left:10px;border:var(--border-grey) solid 1px;padding:0 8px;border-radius:3px;cursor:pointer;line-height:1px;height:25px;display:flex;align-items:center}.neo-popover{z-index:16;box-shadow:0px 15px 30px var(--box-shadow);position:absolute;font-size:.875rem;color:var(--titlecolor);line-height:32px;top:60px;right:25px;transition:0.5s;background:var(--white);border:1px solid var(--border-grey)}.neo-popover:before{width:0px;height:0px;border-left:11px solid transparent;border-right:11px solid transparent;border-bottom:11px solid var(--white);content:\\\"\\\";top:-10px;position:absolute;right:69px}.neo-popover ::-webkit-scrollbar{width:6px}.neo-popover ::-webkit-scrollbar-track{background:var(--scroll-track)}.neo-popover ::-webkit-scrollbar-thumb{background:var(--scroll-thumb)}.neo-popover ::-webkit-scrollbar-thumb:hover{background:var(--light-grey)}.neo-popover__title{display:flex;border-bottom:1px solid var(--border-grey);padding:5px 10px}.neo-popover__title h2{font-size:.875rem;margin:0}.neo-popover__content{margin:10px;min-height:50px;overflow-y:auto;max-height:150px;overflow-x:hidden}.neo-popover__close{margin-left:auto;font-size:1.125rem;cursor:pointer}.neo-popover__sort{width:497px}.neo-popover__sort .sort__bodyContent{display:flex}.neo-popover__sort .sort__section{margin:0px 0px 15px 41px;display:flex;color:var(--dark-grey);width:14%;cursor:pointer}.neo-popover__sort .sort__section span{font-size:1.375rem;line-height:13px;color:#3c476f}.neo-popover__sort .sort__section .sort__txt{margin-left:5px;color:#3c476f;line-height:normal;font-size:.75rem;font-weight:normal}.neo-popover__sort ul{display:flex;width:100%;justify-content:space-around}.neo-popover__sort ul li{font-size:.75rem;position:relative;left:-28px}.neo-popover__sort ul li:nth-child(2){left:-58px}.neo-popover__sort ul li:nth-child(3){left:-88px}.neo-popover__sort .sort__reorder{padding:0px 6px;font-size:.75rem}.neo-popover__sort .sort__reorder .sort__icon{margin:2px 0 0;cursor:pointer}.neo-popover__sort .sort__reorder .custom__ctrl{width:120px;height:28px;border-radius:3px;border-color:#d7d7d7;color:rgba(26,72,105,0.6)}.neo-popover__sort .sort__reorder .temp{font-size:3.125rem}.neo-popover__sort .sort__footer{padding:10px;border-top:var(--light-grey);display:flex}.neo-popover__sort .sort__footer .sort__btns{margin-left:auto}.neo-popover__sort .sort__footer .btns{border:none;background:var(--white);border-radius:5px;width:88px;margin-left:10px;height:28px;color:var(--button-blue);cursor:pointer}.neo-popover__sort .sort__footer .btns__save{color:var(--white);background:var(--button-blue)}.neo-popover__sort .icon-close{font-size:.9375rem}.neo-popover__sort .sort-warning{margin-bottom:10px;padding-left:43px;color:var(--danger)}.neo-popover.neo-popover--column{right:15px}.neo-popover.neo-popover--column:before{right:40px}.neo-popover__column{display:flex}.neo-popover__column .column__header{display:flex;border-bottom:1px solid var(--light-grey);padding:10px 10px 2px 10px}.neo-popover__column .column__chooser{border-right:1px solid var(--light-grey)}.neo-popover__column .column__chooser .column__body{padding:10px;margin-bottom:10px;height:440px;overflow-y:auto;overflow-x:hidden}.neo-popover__column .column__chooser .column__info{font-size:12px;border-bottom:#eee solid 1px;width:100%}.neo-popover__column .column__chooser .column__selectAll{display:flex;padding:0px 10px}.neo-popover__column .column__chooser .custom__ctrl{border:1px solid var(--light-grey);border-radius:5px;padding:0px 5px;width:100%;height:25px;font-size:.6875rem}.neo-popover__column .column__chooser .column__wrap{display:flex;border:1px solid var(--light-grey);border-radius:5px;padding:0px 10px}.neo-popover__column .column__chooser .column__wrap .column__txt{font-size:.75rem;color:var(--titlecolor)}.neo-popover__column .column__chooser .column__checkbox{margin-right:10px}.neo-popover__column .column__settings .column__close{margin-left:auto;font-size:1.125rem;cursor:pointer}.neo-popover__column .column__settings .column__body{display:flex;padding:10px;flex-wrap:wrap;overflow-y:scroll;height:380px;width:768px;padding-bottom:60px}.neo-popover__column .column__settings .column__reorder{border:1px solid #8da3b4;border-radius:3px;text-align:center;min-height:150px;margin:10px 5px;padding:10px 3px;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-webkit-touch-callout:none;min-width:100px;max-width:100px;word-break:break-all;line-height:normal;font-size:.75rem}.neo-popover__column .column__settings .column__reorder.full-width{width:95%;max-width:none;height:auto;min-height:80px;max-height:80px;text-align:left;padding-left:10px}.neo-popover__column .column__settings .column__reorder .column_drag{margin-bottom:10px}.neo-popover__column .column__settings .column__reorder__name{word-break:break-all;line-height:15px}.neo-popover__column .column__settings .column__wrap{display:flex;justify-content:center}.neo-popover__column .column__settings .column__innerCells__wrap{margin-top:15px}.neo-popover__column .column__settings .column__checkbox{margin-right:10px}.neo-popover__column .column__settings .column__footer{padding:10px;border-top:1px solid var(--border-grey);position:absolute;bottom:0px;right:0px;width:80.3%;display:flex;background:var(--white)}.neo-popover__column .column__settings .column__btns{margin-left:auto}.neo-popover__column .column__settings .btns{border:1px solid var(--button-blue);background:#fff;border-radius:5px;width:98px;margin-left:10px;color:var(--button-blue);height:32px}.neo-popover__column .column__settings .btns__save{color:#fff;background:var(--button-blue)}.neo-popover__column .column__settings .icon-close{font-size:.9375rem}.neo-popover.neo-popover--exports{right:10px;width:40%}@media only screen and (max-width: 1024px){.neo-popover.neo-popover--exports{width:auto}}.neo-popover.neo-popover--exports:before{right:9px}.neo-popover__export{display:flex}.neo-popover__export .export__header{padding:10px;border-bottom:var(--border-grey) solid 1px;color:#3c425e;font-size:.8125rem;display:flex}.neo-popover__export .export__chooser{width:45%}@media only screen and (max-width: 1024px){.neo-popover__export .export__chooser{width:auto}}.neo-popover__export .export__chooser .export__body{padding:10px;padding-bottom:10px;height:440px;overflow-y:auto;overflow-x:hidden;border-right:var(--border-grey) solid 1px}.neo-popover__export .export__chooser .export__txt{font-size:.75rem;color:var(--titlecolor)}.neo-popover__export .export__chooser .custom__ctrl{border:1px solid var(--light-grey);border-radius:5px;padding:0px 5px;box-sizing:border-box;height:25px;font-size:.6875rem;width:100%}.neo-popover__export .export__chooser .export__wrap{display:flex;border:1px solid var(--light-grey);border-radius:5px;padding:0px 10px}.neo-popover__export .export__chooser .export__wrap.export__headertxt{border:none}.neo-popover__export .export__chooser .export__checkbox{margin-right:10px}.neo-popover__export .export__settings{width:100%}@media only screen and (max-width: 1024px){.neo-popover__export .export__settings{width:auto}}.neo-popover__export .export__settings .export__close{margin-left:auto;font-size:.9375rem;cursor:pointer}.neo-popover__export .export__settings .export__as{padding:10px 15px 0;font-size:.8125rem}.neo-popover__export .export__settings .export__body{display:flex;padding:10px}.neo-popover__export .export__settings .export__reorder{border:1px solid var(--dark-grey);border-radius:5px;height:81px;margin:0 5px;padding:8px 10px;width:78px}.neo-popover__export .export__settings .export__file{text-align:center}.neo-popover__export .export__settings .export__file strong{display:block;font-size:.8125rem;font-weight:normal;line-height:normal}.neo-popover__export .export__settings .check-wrap{line-height:normal}.neo-popover__export .export__settings .check-wrap input{margin:0px}.neo-popover__export .export__settings .export__footer{padding:15px 10px;border-top:1px solid var(--border-grey);position:absolute;bottom:0px;right:0px;width:66%;display:flex}@media only screen and (max-width: 1024px){.neo-popover__export .export__settings .export__footer{width:61.5%}}.neo-popover__export .export__settings .export__btns{margin-left:auto}.neo-popover__export .export__settings .btns{border:1px solid var(--button-blue);background:var(--white);border-radius:5px;width:98px;margin-left:10px;color:var(--button-blue);height:32px}.neo-popover__export .export__settings .btns__save{color:var(--white);background:var(--button-blue)}.neo-popover__export .export__settings .exportWarning{position:absolute;margin-top:290px;right:5%}.neo-grid .react-grid-Header{background:#f4f7f9;color:#204d6f;vertical-align:top;font-weight:bold}.globalSeachInput .form-control{padding-left:30px}.noRecordDiv{position:relative;left:40%;text-align:center;font-size:x-large}.Select div,.Select input,.Select span{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;z-index:10}.gridDiv{overflow:hidden;outline:0px;position:relative;min-height:680px;margin-top:50px}.fa-search:before{content:\\\"\\\\f002\\\";position:absolute;top:9px;left:3%;color:darkslategrey}.errorDiv{position:fixed;top:7%;left:50%;transform:translate(-50%, 5px)}.parentDiv{display:flex;padding:15px;align-items:center;background:#f4f8f7}.totalCount{position:absolute;left:1.5%;width:20%}.filterIcons{font-size:14px;margin:0px 0px 0px 10px;border:1px solid #ddd;padding:2px 5px;color:#566a81;cursor:pointer;background:#fff}.filterArrow{margin:0px 0px 3px 5px}.globalSearch{width:20%;margin-left:auto;position:relative;margin-right:40px;display:flex;align-items:center}.grid-header label{display:inline-block;font-weight:bold;margin:auto auto auto 6px}.grid-header .ui-icon{margin:4px 4px auto 6px;background-color:transparent;border-color:transparent}.grid-header .ui-icon.ui-state-hover{background-color:#fff}.grid-header #txtSearch{margin:0 4px 0 4px;padding:2px 2px;-moz-border-radius:2px;-webkit-border-radius:2px;border:1px solid silver}.slick-viewport{height:100vh}.options-panel{-moz-border-radius:6px;-webkit-border-radius:6px;border:1px solid silver;background:#f0f0f0;padding:4px;margin-bottom:20px;width:320px;position:absolute;top:0px;left:650px}.slick-cell.task-name{font-weight:bold;text-align:right}.slick-cell.task-percent{text-align:right}.slick-cell.cell-move-handle{font-weight:bold;text-align:right;border-right:solid gray;background:#efefef;cursor:move}.cell-move-handle:hover{background:#b6b9bd}.slick-row.selected .cell-move-handle{background:#d5dc8d}.slick-row .cell-actions{text-align:left}.slick-row.complete{background-color:#dfd;color:#555}.percent-complete-bar{display:inline-block;height:6px;-moz-border-radius:3px;-webkit-border-radius:3px}.ui-datepicker-trigger{margin-top:2px;padding:0;vertical-align:top}input.editor-percentcomplete{width:100%;height:100%;border:0;margin:0;background:transparent;outline:0;padding:0;float:left}.editor-percentcomplete-picker{position:relative;display:inline-block;width:16px;height:100%;overflow:visible;z-index:1000;float:right}.editor-percentcomplete-helper{border:0 solid gray;position:absolute;top:-2px;left:-9px;padding-left:9px;width:120px;height:140px;display:none;overflow:visible}.editor-percentcomplete-wrapper{background:beige;padding:20px 8px;width:100%;height:98px;border:1px solid gray;border-left:0}.editor-percentcomplete-buttons{float:right}.editor-percentcomplete-buttons button{width:80px}.editor-percentcomplete-slider{float:left}.editor-percentcomplete-picker:hover .editor-percentcomplete-helper{display:block}.editor-percentcomplete-helper:hover{display:block}select.editor-yesno{width:100%;margin:0;vertical-align:middle}input.editor-checkbox{margin:0;height:100%;padding:0;border:0}.frozen{background:#eee}.slickgrid-container .slick-header-columns,.slickgrid-container .slick-header-column{background:rgba(31,86,126,0.0470588);height:40px}.slickgrid-container .slick-header-column.ui-state-default{height:40px;color:#204d6f;font-weight:bold;padding:10px 4px}.loading-spinner-container{width:100%;text-align:center}.react-grid-HeaderCell{border:1px solid #ddd;background:#f4f7f9}.react-grid-Cell{border:1px solid #ddd}.react-grid-Toolbar{background-color:#f9fafb;position:absolute;top:0px;right:0px;border:none;padding:18px 15px 7px}.notification-close{position:relative;float:right;margin-top:-48px;margin-right:13px;cursor:pointer}.react-grid-Container .react-grid-Toolbar{padding:0;border:none;right:113px;top:26px;background-color:transparent}.react-grid-Container .react-grid-Toolbar .btn{border:1px solid #ddd;text-indent:-9999px;height:27px}.tools:after{content:\\\"\\\\f0b0\\\";font-family:FontAwesome;font-style:normal;font-weight:normal;text-decoration:inherit;color:#566a81;font-size:18px;padding-right:0.5em;position:absolute;top:3px;left:7px;font-size:15px;pointer-events:none}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import ReactDataGrid from \"react-data-grid\";\n\nclass ExtDataGrid extends ReactDataGrid {\n    componentDidMount() {\n        this._mounted = true;\n        // eslint-disable-next-line prefer-destructuring\n        this.dataGridComponent = document.getElementsByClassName(\n            \"react-grid-Viewport\"\n        )[0];\n\n        window.addEventListener(\"resize\", this.metricsUpdated);\n        if (this.props.cellRangeSelection) {\n            // this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n        }\n        this.metricsUpdated();\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        window.removeEventListener(\"resize\", this.metricsUpdated);\n        // this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n}\n\nexport default ExtDataGrid;\n","/* eslint-disable react/destructuring-assignment */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: new Date()\n        };\n        // the variable to store component reference\n        this.input = null;\n\n        this.getInputNode = this.getInputNode.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(ev) {\n        this.setState({ value: ev.target.value });\n    }\n\n    // returning updated object with the date value in the required format\n    getValue() {\n        const updated = {};\n        const date = new Date(this.state.value);\n        const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"2-digit\"\n        });\n        const [\n            { value: month },\n            ,\n            { value: day },\n            ,\n            { value: year }\n        ] = dateTimeFormat.formatToParts(date);\n        updated[this.props.column.key] = `${year}-${month}-${day}`;\n        return updated;\n    }\n\n    // returning the component with the reference, input\n    getInputNode() {\n        return this.input;\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"date\"\n                    ref={(ref) => {\n                        this.input = ref;\n                    }}\n                    value={this.state.value}\n                    onChange={this.onValueChanged}\n                />\n            </div>\n        );\n    }\n}\n\nDatePicker.propTypes = {\n    column: PropTypes.string\n};\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\n\nimport React, { useState, useEffect } from \"react\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\nimport { ReactComponent as IconClose } from \"../images/icon-close.svg\";\n\nconst ErrorMessage = (props) => {\n    const [status, setStatus] = useState(props.status);\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n    if (status === \"invalid\") {\n        return (\n            <div id=\"errorMsg\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {SEARCH_NOT_FOUNT_ERROR}\n                </div>\n                <div\n                    role=\"presentation\"\n                    className=\"notification-close\"\n                    onClick={() => {\n                        props.closeWarningStatus();\n                        props.clearSearchValue();\n                    }}\n                >\n                    <i>\n                        <IconClose />\n                    </i>\n                </div>\n            </div>\n        );\n    }\n    return <div />;\n};\n\nexport default ErrorMessage;\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div\r\n            data-testid=\"columnItem\"\r\n            ref={(node) => drag(drop(node))}\r\n            style={{ ...style, opacity }}\r\n        >\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveColumn: PropTypes.any,\r\n    findColumn: PropTypes.any\r\n};\r\n\r\nexport default ColumnItem;\r\n","/* eslint-disable react/jsx-fragments */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n    const findColumn = (id) => {\r\n        const column = columns.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            column,\r\n            index: columns.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const moveColumn = (id, atIndex) => {\r\n        const { column, index } = findColumn(id);\r\n        setColumns(\r\n            update(columns, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(columns, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, column]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderList(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    React.useEffect(() => {\r\n        setColumns(props.columnsArray);\r\n    }, [props.columnsArray]);\r\n    return (\r\n        <Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columns.map((column) => (\r\n                    <ColumnItem\r\n                        key={column.id}\r\n                        id={`${column.id}`}\r\n                        text={column.text}\r\n                        moveColumn={moveColumn}\r\n                        findColumn={findColumn}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n    columnsArray: PropTypes.any,\r\n    handleReorderList: PropTypes.any\r\n};\r\n\r\nexport default ColumnsList;\r\n","/* eslint-disable react/destructuring-assignment */\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-loop-func */\n/* eslint-disable no-else-return */\n\nimport React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport ColumnsList from \"./columnsList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconJustify } from \"../../images/icon-align-justify.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\nclass ColumnReordering extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columnReorderEntityList: this.props.headerKeys,\n            columnSelectList: this.props.columns.map((item) => item.name),\n            leftPinnedColumList: this.props.existingPinnedHeadersList,\n            isAllSelected: true,\n            maxLeftPinnedColumn: this.props.maxLeftPinnedColumn\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * Method to reset the coloumn list onClick of Reset button\n     */\n    resetColumnReorderList = () => {\n        this.setState({\n            columnReorderEntityList: this.props.columns.map(\n                (item) => item.name\n            ),\n            leftPinnedColumList: [],\n            isAllSelected: true\n        });\n    };\n\n    /**\n     * Method to Select all options in the coloumn list onClick of Select All button\n     */\n    selectAllToColumnReOrderList = () => {\n        this.resetColumnReorderList();\n        let existingColumnReorderEntityList = this.state\n            .columnReorderEntityList;\n        let isExistingAllSelect = this.state.isAllSelected;\n        if (isExistingAllSelect) {\n            existingColumnReorderEntityList = [];\n            isExistingAllSelect = false;\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: isExistingAllSelect,\n            leftPinnedColumList: []\n        });\n    };\n\n    /**\n     * Method To add a column to columnReorderEntityList when selected.\n     * @param {String} typeToBeAdded\n     */\n    addToColumnReorderEntityList = (typeToBeAdded) => {\n        let existingColumnReorderEntityList = this.state\n            .columnReorderEntityList;\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\n        if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n            let indexOfInsertion = this.state.columnSelectList.findIndex(\n                (item) => item === typeToBeAdded\n            );\n            while (indexOfInsertion > 0) {\n                if (\n                    existingColumnReorderEntityList.includes(\n                        this.state.columnSelectList[indexOfInsertion - 1]\n                    )\n                ) {\n                    if (\n                        !existingLeftPinnedList.includes(\n                            this.state.columnSelectList[indexOfInsertion - 1]\n                        )\n                    ) {\n                        indexOfInsertion = existingColumnReorderEntityList.findIndex(\n                            (item) =>\n                                item ===\n                                this.state.columnSelectList[\n                                    indexOfInsertion - 1\n                                ]\n                        );\n                        indexOfInsertion += 1;\n                        break;\n                    } else {\n                        indexOfInsertion -= 1;\n                    }\n                } else {\n                    indexOfInsertion -= 1;\n                }\n            }\n            existingColumnReorderEntityList.splice(\n                indexOfInsertion,\n                0,\n                typeToBeAdded\n            );\n        } else {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (item) => {\n                    if (item !== typeToBeAdded) return item;\n                    else return \"\";\n                }\n            );\n            if (existingLeftPinnedList.includes(typeToBeAdded)) {\n                existingLeftPinnedList = existingLeftPinnedList.filter(\n                    (item) => item !== typeToBeAdded\n                );\n            }\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: false,\n            leftPinnedColumList: existingLeftPinnedList\n        });\n    };\n\n    /**\n     * Method to handle the like-search on key stroke.\n     * @param {Event} e\n     */\n    filterColumnReorderList = (e) => {\n        const searchKey = String(e.target.value).toLowerCase();\n        const existingList = this.props.columns.map((item) => item.name);\n        let filtererdColumnReorderList = [];\n        if (searchKey.length > 0) {\n            filtererdColumnReorderList = existingList.filter((item) => {\n                return item.toLowerCase().includes(searchKey);\n            });\n        } else {\n            filtererdColumnReorderList = this.props.columns.map(\n                (item) => item.name\n            );\n        }\n        this.setState({\n            columnSelectList: filtererdColumnReorderList\n        });\n    };\n\n    createColumnsArrayFromProps = (colsList) => {\n        return colsList.map((item) => {\n            return {\n                id: item,\n                text: (\n                    <div className=\"column__reorder\" key={item}>\n                        <div style={{ cursor: \"move\" }} className=\"column_drag\">\n                            <i>\n                                <IconJustify />\n                            </i>\n                        </div>\n                        <div className=\"column__reorder__name\">{item}</div>\n                        <div className=\"column__innerCells__wrap\">\n                            <div className=\"column__wrap\">\n                                <div className=\"column__checkbox\">\n                                    <input\n                                        data-testid=\"reArrangeLeftPin\"\n                                        role=\"button\"\n                                        type=\"checkbox\"\n                                        id={`checkBoxToPinLeft_${item}`}\n                                        checked={this.state.leftPinnedColumList.includes(\n                                            item\n                                        )}\n                                        disabled={\n                                            this.state.maxLeftPinnedColumn -\n                                                this.state.leftPinnedColumList\n                                                    .length <=\n                                            0\n                                                ? !this.state.leftPinnedColumList.includes(\n                                                      item\n                                                  )\n                                                : false\n                                        }\n                                        onChange={() =>\n                                            this.reArrangeLeftPinnedColumn(item)\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column__txt\">Pin Left</div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    /**\n     * Method to handle the position of columns Names when left pinned in coloumn selector view.\n     * @param {String} columHeaderName\n     */\n    reArrangeLeftPinnedColumn = (columHeaderName) => {\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\n        let existingColumnReorderEntityList = this.state\n            .columnReorderEntityList;\n        if (!existingLeftPinnedList.includes(columHeaderName)) {\n            existingLeftPinnedList.unshift(columHeaderName);\n        } else {\n            existingLeftPinnedList = existingLeftPinnedList.filter(\n                (item) => item !== columHeaderName\n            );\n        }\n        this.setState({\n            leftPinnedColumList: existingLeftPinnedList\n        });\n\n        existingLeftPinnedList.forEach((item) => {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (subItem) => subItem !== item\n            );\n            existingColumnReorderEntityList.unshift(item);\n            return null;\n        });\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList\n        });\n    };\n\n    handleReorderList = (reordered) => {\n        this.props.handleheaderNameList(reordered);\n    };\n\n    handleClick() {\n        this.props.closeColumnReOrdering();\n    }\n\n    render() {\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div\n                    className=\"neo-popover neo-popover--column columns--grid\"\n                    // ref={this.setWrapperRef}\n                >\n                    <div className=\"neo-popover__column column__grid\">\n                        <div className=\"column__chooser\">\n                            <div className=\"column__header\">\n                                <div className=\"\">\n                                    <strong>Column Chooser</strong>\n                                </div>\n                            </div>\n                            <div className=\"column__body\">\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Search column\"\n                                        className=\"custom__ctrl\"\n                                        onChange={this.filterColumnReorderList}\n                                    />\n                                </div>\n                                <div className=\"column__selectAll\">\n                                    <div className=\"column__checkbox\">\n                                        <input\n                                            type=\"checkbox\"\n                                            data-testid=\"selectAllCheckBox\"\n                                            id=\"selectallcolumncheckbox\"\n                                            onChange={() =>\n                                                this.selectAllToColumnReOrderList()\n                                            }\n                                            checked={\n                                                this.state\n                                                    .columnReorderEntityList\n                                                    .length ===\n                                                this.props.columns.length\n                                            }\n                                        />\n                                    </div>\n                                    <div className=\"column__txt\">\n                                        Select all\n                                    </div>\n                                </div>\n                                {this.state.columnSelectList.map((item) => {\n                                    return (\n                                        <div\n                                            className=\"column__wrap\"\n                                            key={item}\n                                        >\n                                            <div className=\"column__checkbox\">\n                                                <input\n                                                    data-testid=\"addToColumnReorderEntityList\"\n                                                    type=\"checkbox\"\n                                                    id={`checkboxtoselectreorder_${item}`}\n                                                    checked={this.state.columnReorderEntityList.includes(\n                                                        item\n                                                    )}\n                                                    onChange={() =>\n                                                        this.addToColumnReorderEntityList(\n                                                            item\n                                                        )\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"column__txt\">\n                                                {item}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"column__settings\">\n                            <div className=\"column__header\">\n                                <div className=\"column__headerTxt\">\n                                    <strong>Column Settings</strong>\n                                </div>\n                                <div\n                                    role=\"presentation\"\n                                    data-testid=\"closeColumnReordering\"\n                                    className=\"column__close\"\n                                    onClick={() =>\n                                        this.props.closeColumnReOrdering()\n                                    }\n                                >\n                                    <i>\n                                        <IconClose />\n                                    </i>\n                                </div>\n                            </div>\n\n                            <div className=\"column__body\">\n                                <div className=\"column__info\">\n                                    <strong>\n                                        &nbsp; &nbsp; Selected Column Count :{\" \"}\n                                        {\n                                            this.state.columnReorderEntityList\n                                                .length\n                                        }\n                                    </strong>\n                                    {this.state.maxLeftPinnedColumn -\n                                        this.state.leftPinnedColumList.length >\n                                    0 ? (\n                                        <strong>\n                                            &nbsp; &nbsp; Left Pinned Column\n                                            Count Remaining :{\" \"}\n                                            {this.state.maxLeftPinnedColumn -\n                                                this.state.leftPinnedColumList\n                                                    .length}\n                                        </strong>\n                                    ) : (\n                                        <strong style={{ color: \"red\" }}>\n                                            &nbsp; &nbsp; Maximum Count Of Left\n                                            Pin Columns REACHED\n                                        </strong>\n                                    )}\n                                </div>\n                                <DndProvider\n                                    backend={MultiBackend}\n                                    options={HTML5toTouch}\n                                >\n                                    <ColumnsList\n                                        columnsArray={this.createColumnsArrayFromProps(\n                                            this.state.columnReorderEntityList\n                                        )}\n                                        handleReorderList={\n                                            this.handleReorderList\n                                        }\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"column__footer\">\n                                <div className=\"column__btns\">\n                                    <button\n                                        data-testid=\"resetButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() =>\n                                            this.resetColumnReorderList()\n                                        }\n                                    >\n                                        Reset\n                                    </button>\n                                    <button\n                                        data-testid=\"cancelButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() =>\n                                            this.props.closeColumnReOrdering()\n                                        }\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        data-testid=\"saveButton\"\n                                        type=\"button\"\n                                        className=\"btns btns__save\"\n                                        onClick={() =>\n                                            this.props.updateTableAsPerRowChooser(\n                                                this.state\n                                                    .columnReorderEntityList,\n                                                this.state.leftPinnedColumList\n                                            )\n                                        }\n                                    >\n                                        Save\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nColumnReordering.propTypes = {\n    headerKeys: PropTypes.any,\n    columns: PropTypes.any,\n    existingPinnedHeadersList: PropTypes.any,\n    maxLeftPinnedColumn: PropTypes.any,\n    closeColumnReOrdering: PropTypes.any,\n    handleheaderNameList: PropTypes.any,\n    updateTableAsPerRowChooser: PropTypes.any\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n    CARD: \"sort\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n    cursor: \"move\"\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n    const originalIndex = findCard(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.CARD, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            // eslint-disable-next-line no-shadow\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveCard(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findCard(id);\n                moveCard(draggedId, overIndex);\n            }\n        }\n    });\n\n    const opacity = isDragging ? 0.5 : 1;\n    return (\n        <div\n            data-testid=\"sortingItem\"\n            ref={(node) => drag(drop(node))}\n            style={{ ...style, opacity }}\n        >\n            {text}\n        </div>\n    );\n};\n\nCard.propTypes = {\n    id: PropTypes.any,\n    text: PropTypes.any,\n    moveCard: PropTypes.any,\n    findCard: PropTypes.any\n};\n\nexport default Card;\n","/* eslint-disable react/jsx-fragments */\n/* eslint-disable react/destructuring-assignment */\nimport React, { useState, Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport Card from \"./SortItem\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortingList = (props) => {\n    const [cards, setCards] = useState([...props.sortsArray]);\n\n    const findCard = (id) => {\n        const card = cards.filter((c) => `${c.id}` === id)[0];\n        return {\n            card,\n            index: cards.indexOf(card)\n        };\n    };\n\n    const moveCard = (id, atIndex) => {\n        const { card, index } = findCard(id);\n        setCards(\n            update(cards, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, card]\n                ]\n            })\n        );\n\n        const values = [];\n        let temp = [];\n        temp = update(cards, {\n            $splice: [\n                [index, 1],\n                [atIndex, 0, card]\n            ]\n        });\n        temp.forEach((item) => {\n            values.push(item.id);\n        });\n        props.handleReorderListOfSort(values);\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n    React.useEffect(() => {\n        setCards(props.sortsArray);\n    }, [props.sortsArray]);\n\n    return (\n        <Fragment>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {cards.map((card) => (\n                    <Card\n                        key={card.id}\n                        id={`${card.id}`}\n                        text={card.text}\n                        moveCard={moveCard}\n                        findCard={findCard}\n                    />\n                ))}\n            </div>\n        </Fragment>\n    );\n};\n\nSortingList.propTypes = {\n    sortsArray: PropTypes.any,\n    handleReorderListOfSort: PropTypes.any\n};\n\nexport default SortingList;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\n/* eslint-disable react/no-access-state-in-setstate */\nimport React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./SortingList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconNav } from \"../../images/icon-nav.svg\";\nimport { ReactComponent as SortCopy } from \"../../images/SortCopy.svg\";\nimport { ReactComponent as SortDelete } from \"../../images/SortDelete.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rowList: [true],\n            sortingOrderList:\n                this.props.sortingParamsObjectList === undefined\n                    ? []\n                    : this.props.sortingParamsObjectList,\n            errorMessage: false\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    add = () => {\n        const rowList = [...this.state.rowList];\n        rowList.push(true);\n        const existingSortingOrderList = this.state.sortingOrderList;\n        existingSortingOrderList.push({\n            sortBy: this.props.columnFieldValue[0],\n            order: \"Ascending\",\n            sortOn: \"Value\"\n        });\n        this.setState({\n            rowList,\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    copy = (i) => {\n        const rowList = [...this.state.sortingOrderList];\n        rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n        this.setState({ sortingOrderList: rowList });\n    };\n\n    clearAll = () => {\n        this.setState({ sortingOrderList: [], errorMessage: false });\n        this.props.clearAllSortingParams();\n    };\n\n    remove = (i) => {\n        const sortingOrderList = [...this.state.sortingOrderList];\n        sortingOrderList.splice(i, 1);\n        this.setState({ sortingOrderList });\n        if (sortingOrderList.length <= 1) {\n            this.setState({ errorMessage: false });\n        }\n    };\n\n    createColumnsArrayFromProps = (rowsValue) => {\n        return rowsValue.map((row, index) => {\n            return {\n                id: index,\n                text: (\n                    <div className=\"sort__bodyContent\" key={row}>\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div className=\"sort__icon\">\n                                <i>\n                                    <IconNav />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort by</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectSortingField\"\n                                    className=\"custom__ctrl\"\n                                    name=\"sortBy\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortBy\"\n                                        )\n                                    }\n                                    value={row.sortBy}\n                                >\n                                    {this.props.columnFieldValue.map((item) => (\n                                        <option key={item}>{item}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort on</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    className=\"custom__ctrl\"\n                                    name=\"sortOn\"\n                                    data-testid=\"selectingValue\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortOn\"\n                                        )\n                                    }\n                                    value={row.sortOn}\n                                >\n                                    <option>Value</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Order</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectOrder\"\n                                    className=\"custom__ctrl\"\n                                    name=\"order\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"order\"\n                                        )\n                                    }\n                                    value={row.order}\n                                >\n                                    <option>Ascending</option>\n                                    <option>Descending</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"copySort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.copy(index)}\n                            >\n                                <SortCopy />\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"removeSort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.remove(index)}\n                            >\n                                <SortDelete />\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    captureSortingFeildValues = (event, index, sortingKey) => {\n        const existingSortingOrderList = this.state.sortingOrderList;\n\n        if (sortingKey === \"sortBy\") {\n            existingSortingOrderList[index].sortBy = event.target.value;\n        }\n        if (sortingKey === \"order\") {\n            existingSortingOrderList[index].order = event.target.value;\n        }\n        if (\n            existingSortingOrderList[index].sortOn === \"\" ||\n            existingSortingOrderList[index].sortOn === undefined\n        ) {\n            existingSortingOrderList[index].sortOn = \"Value\";\n        }\n        this.setState({\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    updateTableAsPerSortCondition = () => {\n        const unique = new Set();\n        const showError = this.state.sortingOrderList.some(\n            (element) => unique.size === unique.add(element.sortBy).size\n        );\n        showError\n            ? this.setState({\n                  errorMessage: true\n              })\n            : this.setState({\n                  errorMessage: false\n              });\n        if (!showError) {\n            this.props.setTableAsPerSortingParams(this.state.sortingOrderList);\n        }\n    };\n\n    /**\n     *\n     * @param {*} reOrderedSortingList\n     */\n    handleReorderListOfSort = (reOrderedIndexList) => {\n        this.props.handleTableSortSwap(reOrderedIndexList);\n    };\n\n    handleClick() {\n        this.props.closeSorting();\n    }\n\n    render() {\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    role=\"presentation\"\n                                    data-testid=\"closeSorting\"\n                                    onClick={() => this.props.closeSorting()}\n                                >\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    handleReorderListOfSort={\n                                        this.handleReorderListOfSort\n                                    }\n                                    sortsArray={this.createColumnsArrayFromProps(\n                                        this.state.sortingOrderList\n                                    )}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {this.state.errorMessage ? (\n                                <span className=\"alert alert-danger\">\n                                    Sort by opted are same, Please choose\n                                    different one.\n                                </span>\n                            ) : (\n                                \"\"\n                            )}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                role=\"presentation\"\n                                className=\"sort__section\"\n                                data-testid=\"addSort\"\n                                onClick={() => this.add()}\n                                onKeyDown={() => this.add()}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={this.clearAll}\n                                >\n                                    Clear All\n                                </button>\n\n                                <button\n                                    data-testid=\"applySort\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() =>\n                                        this.updateTableAsPerSortCondition()\n                                    }\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nApp.propTypes = {\n    sortingParamsObjectList: PropTypes.any,\n    closeSorting: PropTypes.any,\n    columnFieldValue: PropTypes.any,\n    clearAllSortingParams: PropTypes.any,\n    setTableAsPerSortingParams: PropTypes.any,\n    handleTableSortSwap: PropTypes.any\n};\n\nexport default App;\n","/* eslint-disable react/destructuring-assignment */\nimport React from \"react\";\nimport JsPdf from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport { ReactComponent as IconCsv } from \"../../images/icon-csv.svg\";\nimport { ReactComponent as IconExcel } from \"../../images/icon-excel.svg\";\nimport { ReactComponent as IconPdf } from \"../../images/icon-pdf.svg\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columnValueList: this.props.columnsList,\n            columnEntityList: this.props.columnsList,\n            isAllSelected: true,\n            downLaodFileType: [],\n            // eslint-disable-next-line react/no-unused-state\n            warning: \" \",\n            clickTag: \"none\"\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.selectDownLoadType = this.selectDownLoadType.bind(this);\n        this.exportValidation = this.exportValidation.bind(this);\n    }\n\n    resetColumnExportList = () => {\n        this.setState({\n            columnEntityList: [],\n            isAllSelected: false\n        });\n    };\n\n    selectAllToColumnList = () => {\n        this.resetColumnExportList();\n        this.setState({\n            // eslint-disable-next-line react/no-access-state-in-setstate\n            columnEntityList: !this.state.isAllSelected\n                ? this.props.columnsList\n                : [],\n            // eslint-disable-next-line react/no-access-state-in-setstate\n            isAllSelected: !this.state.isAllSelected\n        });\n    };\n\n    addToColumnEntityList = (typeToBeAdded) => {\n        // eslint-disable-next-line react/no-access-state-in-setstate\n        let existingColumnEntityList = this.state.columnEntityList;\n        if (!existingColumnEntityList.includes(typeToBeAdded)) {\n            existingColumnEntityList.push(typeToBeAdded);\n        } else {\n            existingColumnEntityList = existingColumnEntityList.filter(\n                (item) => {\n                    return item !== typeToBeAdded;\n                }\n            );\n        }\n        this.setState({\n            columnEntityList: existingColumnEntityList,\n            isAllSelected: false\n        });\n    };\n\n    selectDownLoadType = (event) => {\n        if (\n            event.target.checked &&\n            !this.state.downLaodFileType.includes(event.target.value)\n        ) {\n            downLaodFileType.push(event.target.value);\n            this.setState({ downLaodFileType });\n        } else {\n            downLaodFileType.forEach(function (value, index) {\n                if (value === event.target.value) {\n                    downLaodFileType = downLaodFileType.splice(index, value);\n                }\n            });\n            this.setState({ downLaodFileType });\n        }\n    };\n\n    exportRowData = () => {\n        const columnValueList = this.state.columnEntityList;\n        const filteredRow = [];\n        const filteredRowValues = [];\n        const filteredRowHeader = [];\n\n        if (\n            columnValueList.length > 0 &&\n            this.state.downLaodFileType.length > 0\n        ) {\n            const { rows } = this.props;\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\n            rows.forEach((row, index) => {\n                const filteredColumnVal = {};\n                const rowFilteredValues = [];\n                const rowFilteredHeader = [];\n                columnValueList.forEach((columnName) => {\n                    const { key, name } = columnName;\n                    filteredColumnVal[name] = row[key];\n                    rowFilteredValues.push(row[key]);\n                    rowFilteredHeader.push(name);\n                });\n                filteredRow.push(filteredColumnVal);\n                filteredRowValues.push(rowFilteredValues);\n                if (rowLength === index + 1)\n                    filteredRowHeader.push(rowFilteredHeader);\n            });\n\n            this.state.downLaodFileType.forEach((item) => {\n                if (item === \"pdf\") {\n                    this.downloadPDF(filteredRowValues, filteredRowHeader);\n                } else if (item === \"excel\") {\n                    this.downloadXLSFile(filteredRow);\n                } else {\n                    this.downloadCSVFile(filteredRow);\n                }\n            });\n        }\n    };\n\n    downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\n        const unit = \"pt\";\n        const size = \"A4\"; // Use A1, A2, A3 or A4\n        const orientation = \"landscape\"; // portrait or landscape\n\n        const doc = new JsPdf(orientation, unit, size);\n\n        doc.setFontSize(12);\n        const title = \"iCargo Neo Report\";\n\n        const content = {\n            startY: 50,\n            head: rowFilteredHeader,\n            body: rowFilteredValues,\n            tableWidth: \"wrap\", // 'auto'|'wrap'|'number'\n            headStyles: { fillColor: [102, 102, 255] },\n            theme: \"grid\", // 'striped'|'grid'|'plain'|'css'\n            margin: { top: 30, right: 30, bottom: 10, left: 30 }\n        };\n\n        doc.text(title, 30, 40);\n        doc.autoTable(content);\n        doc.save(\"iCargo Neo Report.pdf\");\n    };\n\n    downloadCSVFile = (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".csv\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    downloadXLSFile = (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".xlsx\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    exportValidation = () => {\n        const columnLength = this.state.columnEntityList.length;\n        const fileLength = this.state.downLaodFileType.length;\n        if (columnLength > 0 && fileLength > 0) {\n            this.exportRowData();\n            this.setState({ clickTag: \"none\" });\n        } else if (columnLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"Column\" });\n            this.setState({ clickTag: \"\" });\n        } else if (fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type\" });\n            this.setState({ clickTag: \"\" });\n        }\n        if (columnLength === 0 && fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type & Column\" });\n            this.setState({ clickTag: \"\" });\n        }\n    };\n\n    handleClick() {\n        this.props.closeExport();\n    }\n\n    render() {\n        return (\n            <ClickAwayListener\n                onClickAway={this.handleClick}\n                className=\"neo-popover neo-popover--exports exports--grid\"\n            >\n                <div className=\"neo-popover__export export__grid\">\n                    <div className=\"export__chooser\">\n                        <div className=\"export__header\">\n                            <div className=\"\">\n                                <strong>Export Data</strong>\n                            </div>\n                        </div>\n                        <div className=\"export__body\">\n                            <div>\n                                <input\n                                    data-testid=\"searchExport\"\n                                    type=\"text\"\n                                    placeholder=\"Search export\"\n                                    className=\"custom__ctrl\"\n                                    onChange={this.columnSearchLogic}\n                                />\n                            </div>\n                            <div className=\"export__wrap export__headertxt\">\n                                <div className=\"export__checkbox\">\n                                    <input\n                                        data-testid=\"selectColumns\"\n                                        className=\"selectColumn\"\n                                        type=\"checkbox\"\n                                        onChange={() =>\n                                            this.selectAllToColumnList()\n                                        }\n                                        checked={this.state.isAllSelected}\n                                    />\n                                </div>\n                                <div className=\"export__txt\">Select All</div>\n                            </div>\n                            {this.state.columnValueList &&\n                            this.state.columnValueList.length > 0\n                                ? this.state.columnValueList.map((column) => {\n                                      return (\n                                          <div\n                                              className=\"export__wrap\"\n                                              key={column.key}\n                                          >\n                                              <div className=\"export__checkbox\">\n                                                  <input\n                                                      data-testid=\"addToColumn\"\n                                                      type=\"checkbox\"\n                                                      checked={this.state.columnEntityList.includes(\n                                                          column\n                                                      )}\n                                                      onChange={() =>\n                                                          this.addToColumnEntityList(\n                                                              column\n                                                          )\n                                                      }\n                                                  />\n                                              </div>\n                                              <div className=\"export__txt\">\n                                                  {column.name}\n                                              </div>\n                                          </div>\n                                      );\n                                  })\n                                : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"export__settings\">\n                        <div className=\"export__header\">\n                            <div className=\"export__headerTxt\" />\n                            <div className=\"export__close\">\n                                <i\n                                    role=\"presentation\"\n                                    onClick={this.props.closeExport}\n                                >\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n                        <div className=\"export__as\">Export as</div>\n                        <div className=\"export__body\">\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        data-testid=\"addpdfDownloadType\"\n                                        type=\"checkbox\"\n                                        name=\"pdf\"\n                                        value=\"pdf\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconPdf />\n                                    </i>\n                                    <strong>PDF</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"excel\"\n                                        value=\"excel\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconExcel />\n                                    </i>\n                                    <strong>Excel</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"csv\"\n                                        value=\"csv\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconCsv />\n                                    </i>\n\n                                    <strong>CSV</strong>\n                                </div>\n                            </div>\n                            <div className=\"exportWarning\">\n                                <span style={{ display: this.state.clickTag }}>\n                                    <strong>\n                                        Select at least one file type\n                                    </strong>\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"export__footer\">\n                            <div className=\"export__btns\">\n                                <button\n                                    data-testid=\"closeExport\"\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={() => this.props.closeExport()}\n                                >\n                                    Cancel\n                                </button>\n                                <button\n                                    data-testid=\"exportValidationClick\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() => {\n                                        this.exportValidation();\n                                    }}\n                                >\n                                    Export\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nExportData.propTypes = {\n    columnsList: PropTypes.any,\n    closeExport: PropTypes.any,\n    rows: PropTypes.any\n};\n\nexport default ExportData;\n","/* eslint-disable lines-between-class-members */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable react/destructuring-assignment */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport PropTypes from \"prop-types\";\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport DatePicker from \"./functions/DatePicker\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\nimport { ReactComponent as IconColumns } from \"./images/icon-columns.svg\";\r\nimport { ReactComponent as IconShare } from \"./images/icon-share.svg\";\r\nimport { ReactComponent as IconGroupSort } from \"./images/icon-group-sort.svg\";\r\nimport { ReactComponent as IconSearch } from \"./images/icon-search.svg\";\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\r\n\r\nconst { DropDownEditor } = Editors;\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\nclass Spreadsheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { dataSet, pageSize } = this.props;\r\n\r\n        const dataSetVar = JSON.parse(JSON.stringify(dataSet));\r\n        this.state = {\r\n            warningStatus: \"\",\r\n            height: 680,\r\n            searchValue: \"\",\r\n            sortColumn: \"\",\r\n            sortDirection: \"NONE\",\r\n            pageRowCount: pageSize,\r\n            pageIndex: 1,\r\n            dataSet: dataSetVar,\r\n            subDataSet: [],\r\n            rows: dataSetVar ? dataSetVar.slice(0, 500) : [],\r\n            selectedIndexes: [],\r\n            junk: {},\r\n            columnReorderingComponent: null,\r\n            exportComponent: null,\r\n            filteringRows: this.props.rows,\r\n            tempRows: this.props.rows,\r\n            sortingPanelComponent: null,\r\n            count: this.props.rows.length,\r\n            sortingOrderSwapList: [],\r\n            sortingParamsObjectList: [],\r\n            // eslint-disable-next-line react/no-unused-state\r\n            pinnedReorder: false,\r\n            columns: this.props.columns.map((item) => {\r\n                const colItem = item;\r\n                if (colItem.editor === \"DatePicker\") {\r\n                    colItem.editor = DatePicker;\r\n                } else if (\r\n                    colItem.editor === \"DropDown\" &&\r\n                    colItem.dataSource\r\n                ) {\r\n                    colItem.editor = (\r\n                        <DropDownEditor options={colItem.dataSource} />\r\n                    );\r\n                } else if (colItem.editor === \"Text\") {\r\n                    colItem.editor = \"text\";\r\n                } else {\r\n                    colItem.editor = null;\r\n                }\r\n                if (colItem.filterType === \"numeric\") {\r\n                    colItem.filterRenderer = NumericFilter;\r\n                } else {\r\n                    colItem.filterRenderer = AutoCompleteFilter;\r\n                }\r\n                return colItem;\r\n            })\r\n        };\r\n        // document.addEventListener(\"copy\", this.handleCopy);\r\n        // document.addEventListener(\"paste\", this.handlePaste);\r\n        this.handleSearchValue = this.handleSearchValue.bind(this);\r\n        this.clearSearchValue = this.clearSearchValue.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n        this.formulaAppliedCols = this.props.columns.filter((item) => {\r\n            return item.formulaApplicable;\r\n        });\r\n    }\r\n\r\n    // updateRows = (startIdx, newRows) => {\r\n    //   this.setState((state) => {\r\n    //     const rows = state.rows.slice();\r\n    //     for (let i = 0; i < newRows.length; i++) {\r\n    //       if (startIdx + i < rows.length) {\r\n    //         rows[startIdx + i] = {\r\n    //           ...rows[startIdx + i],\r\n    //           ...newRows[i],\r\n    //         };\r\n    //       }\r\n    //     }\r\n    //     return {\r\n    //       rows,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n    // rowGetter = (i) => {\r\n    // console.log(i)\r\n    //   const { rows } = this.state;\r\n    //   return rows[i];\r\n    // };\r\n\r\n    // handleCopy = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft, botRight } = this.state;\r\n    //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n    //     .map((rowIdx) =>\r\n    //       this.state.columns\r\n    //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n    //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n    //         .join(\"\\t\")\r\n    //     )\r\n    //     .join(\"\\n\");\r\n    //   e.clipboardData.setData(\"text/plain\", text);\r\n    // };\r\n\r\n    // handlePaste = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft } = this.state;\r\n    //   const newRows = [];\r\n    //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n    //   pasteData.forEach((row) => {\r\n    //     const rowData = {};\r\n    //     // Merge the values from pasting and the keys from the columns\r\n    //     this.state.columns\r\n    //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n    //       .forEach((col, j) => {\r\n    //         rowData[col.key] = row[j];\r\n    //       });\r\n    //     newRows.push(rowData);\r\n    //   });\r\n    //   this.updateRows(topLeft.rowIdx, newRows);\r\n    // };\r\n\r\n    // setSelection = (args) => {\r\n    //   this.setState({\r\n    //     topLeft: {\r\n    //       rowIdx: args.topLeft.rowIdx,\r\n    //       colIdx: args.topLeft.idx,\r\n    //     },\r\n    //     botRight: {\r\n    //       rowIdx: args.bottomRight.rowIdx,\r\n    //       colIdx: args.bottomRight.idx,\r\n    //     },\r\n    //   });\r\n    // };\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(props) {\r\n        this.setState({\r\n            rows: props.rows,\r\n            count: props.count,\r\n            warningStatus: props.status\r\n        });\r\n    }\r\n\r\n    setStateAsync(stateObj) {\r\n        return new Promise((resolve) => {\r\n            this.setState(stateObj, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method To render the filter values for filtering rows\r\n     * @param {*} rows is the row data to be considered for filtering\r\n     * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n     */\r\n    getValidFilterValues(rows, columnId) {\r\n        this.setState({ selectedIndexes: [] });\r\n        return rows\r\n            .map((r) => r[columnId])\r\n            .filter((item, i, a) => {\r\n                return i === a.indexOf(item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method To swap the columns\r\n     * @param {*} source is source column\r\n     * @param {*} target is the target column\r\n     */\r\n    // onHeaderDrop = (source, target) => {\r\n    //   const stateCopy = Object.assign({}, this.state);\r\n    //   const columnSourceIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === source\r\n    //   );\r\n    //   const columnTargetIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === target\r\n    //   );\r\n\r\n    //   stateCopy.columns.splice(\r\n    //     columnTargetIndex,\r\n    //     0,\r\n    //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n    //   );\r\n\r\n    //   const emptyColumns = Object.assign({}, this.state, {\r\n    //     columns: [],\r\n    //   });\r\n    //   this.setState(emptyColumns);\r\n\r\n    //   const reorderedColumns = Object.assign({}, this.state, {\r\n    //     columns: stateCopy.columns,\r\n    //   });\r\n    //   this.setState(reorderedColumns);\r\n    // };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    handleTableSortSwap = (reorderedSwap) => {\r\n        swapSortList = reorderedSwap;\r\n    };\r\n\r\n    updateTableAsPerRowChooser = (\r\n        inComingColumnsHeaderList,\r\n        pinnedColumnsList\r\n    ) => {\r\n        let existingColumnsHeaderList = this.props.columns;\r\n        existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n            return inComingColumnsHeaderList.includes(item.name);\r\n        });\r\n        let rePositionedArray = existingColumnsHeaderList;\r\n        let singleHeaderOneList;\r\n        if (pinnedColumnsList.length > 0) {\r\n            pinnedColumnsList\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((item, index) => {\r\n                    singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                        (subItem) => item === subItem.name\r\n                    );\r\n                    rePositionedArray = this.arrayMove(\r\n                        existingColumnsHeaderList,\r\n                        existingColumnsHeaderList.indexOf(\r\n                            singleHeaderOneList[0]\r\n                        ),\r\n                        index\r\n                    );\r\n                });\r\n        }\r\n        if (swapList.length > 0) {\r\n            swapList.slice(0).forEach((item, index) => {\r\n                singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                    (subItem) => {\r\n                        return item === subItem.name;\r\n                    }\r\n                );\r\n                rePositionedArray = this.arrayMove(\r\n                    existingColumnsHeaderList,\r\n                    existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n                    index\r\n                );\r\n            });\r\n        }\r\n\r\n        existingColumnsHeaderList = rePositionedArray;\r\n        /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n        existingColumnsHeaderList.forEach((headerItem, index) => {\r\n            if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n                existingColumnsHeaderList[index].frozen = false;\r\n            }\r\n            if (pinnedColumnsList.includes(headerItem.name)) {\r\n                existingColumnsHeaderList[index].frozen = true;\r\n            }\r\n        });\r\n\r\n        const toTop = (key, value) => (a, b) =>\r\n            (b[key] === value) - (a[key] === value);\r\n        existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n        this.setState({\r\n            columns: existingColumnsHeaderList\r\n        });\r\n\r\n        const tempList = [];\r\n        existingColumnsHeaderList.forEach((item) => {\r\n            tempList.push(item.name);\r\n        });\r\n\r\n        if (swapList.length > 0) {\r\n            for (let i = 0; i < tempList.length; i++) {\r\n                if (tempList[i] === swapList[i])\r\n                    // eslint-disable-next-line react/no-unused-state\r\n                    this.setState({ pinnedReorder: true });\r\n            }\r\n        }\r\n        this.closeColumnReOrdering();\r\n        swapList = [];\r\n        // eslint-disable-next-line react/no-unused-state\r\n        this.setState({ pinnedReorder: false });\r\n    };\r\n\r\n    /**\r\n     * Method To re-position a particular object in an Array from oldIndex to newIndex\r\n     * @param {*} arr inComing array\r\n     * @param {*} oldIndex initial index\r\n     * @param {*} newIndex final index\r\n     */\r\n    arrayMove = (arr, oldIndex, newIndex) => {\r\n        if (newIndex >= arr.length) {\r\n            let k = newIndex - arr.length + 1;\r\n            while (k--) {\r\n                arr.push(undefined);\r\n            }\r\n        }\r\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Method to render the column Selector Pannel\r\n     */\r\n    columnReorderingPannel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const headerNameList = [];\r\n        const existingPinnedHeadersList = [];\r\n        this.state.columns\r\n            .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n            .map((item) => existingPinnedHeadersList.push(item.name));\r\n        this.state.columns.map((item) => headerNameList.push(item.name));\r\n        this.setState({\r\n            columnReorderingComponent: (\r\n                <ColumnReordering\r\n                    maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\r\n                    updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n                    headerKeys={headerNameList}\r\n                    closeColumnReOrdering={this.closeColumnReOrdering}\r\n                    existingPinnedHeadersList={existingPinnedHeadersList}\r\n                    handleheaderNameList={this.handleheaderNameList}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to stop the render the column Selector Pannel\r\n     */\r\n    closeColumnReOrdering = () => {\r\n        this.setState({\r\n            columnReorderingComponent: null\r\n        });\r\n    };\r\n\r\n    handleSearchValue = (value) => {\r\n        this.setState({ searchValue: value });\r\n    };\r\n\r\n    clearSearchValue = () => {\r\n        this.setState({ searchValue: \"\" });\r\n        this.setState({ filteringRows: this.state.filteringRows });\r\n    };\r\n\r\n    sortingPanel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const columnField = [];\r\n        this.state.columns.map((item) => columnField.push(item.name));\r\n        this.setState({\r\n            sortingPanelComponent: (\r\n                <Sorting\r\n                    setTableAsPerSortingParams={(args) =>\r\n                        this.setTableAsPerSortingParams(args)\r\n                    }\r\n                    sortingParamsObjectList={this.state.sortingParamsObjectList}\r\n                    handleTableSortSwap={this.handleTableSortSwap}\r\n                    clearAllSortingParams={this.clearAllSortingParams}\r\n                    columnFieldValue={columnField}\r\n                    closeSorting={this.closeSorting}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeSorting = () => {\r\n        this.setState({\r\n            sortingPanelComponent: null,\r\n            sortingOrderSwapList: []\r\n        });\r\n        swapSortList = [];\r\n    };\r\n\r\n    clearAllSortingParams = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n\r\n        let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n        if (this.state.searchValue !== \"\") {\r\n            const searchKey = String(this.state.searchValue).toLowerCase();\r\n            dataRows = dataRows.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        if (hasSingleSortkey) {\r\n            dataRows = this.getSingleSortResult(dataRows);\r\n        }\r\n        this.setState({\r\n            rows: dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: dataRows\r\n        });\r\n    };\r\n\r\n    // Export Data Logic\r\n    exportColumnData = () => {\r\n        let exportData = this.state.dataSet;\r\n        if (this.isSubset()) {\r\n            exportData = this.state.subDataSet;\r\n        }\r\n        this.setState({ selectedIndexes: [] });\r\n        this.setState({\r\n            exportComponent: (\r\n                <ExportData\r\n                    rows={exportData}\r\n                    columnsList={this.state.columns}\r\n                    closeExport={this.closeExport}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeExport = () => {\r\n        this.setState({\r\n            exportComponent: null\r\n        });\r\n    };\r\n\r\n    setTableAsPerSortingParams = (tableSortList) => {\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        let existingRows = [...this.state.dataSet];\r\n        if (hasFilter || hasSearchKey || hasSingleSortkey) {\r\n            existingRows = [...this.state.subDataSet];\r\n        }\r\n\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        existingRows.sort(sortBy(...sortingOrderNameList));\r\n        this.setState({\r\n            rows: existingRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: existingRows,\r\n            sortingParamsObjectList: tableSortList\r\n        });\r\n\r\n        this.closeSorting();\r\n    };\r\n\r\n    // Group sort - while updating conditions like search, filter or sorting; copy of setTableAsPerSortingParams.\r\n    groupSort = (tableSortList, existingRows) => {\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        return existingRows.sort(sortBy(...sortingOrderNameList));\r\n    };\r\n\r\n    toCamelCase = (str) => {\r\n        return str\r\n            .replace(/\\s(.)/g, function ($1) {\r\n                return $1.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, \"\")\r\n            .replace(/^(.)/, function ($1) {\r\n                return $1.toLowerCase();\r\n            });\r\n    };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    componentDidUpdate() {\r\n        // Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n        const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n        resizeEvent.initEvent(\"resize\", true, false);\r\n        window.dispatchEvent(resizeEvent);\r\n    }\r\n\r\n    getSearchRecords(e) {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let rowsToSearch = [];\r\n        // Remove search key\r\n        if (this.state.searchValue.startsWith(searchKey) || searchKey === \"\") {\r\n            rowsToSearch = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                rowsToSearch = this.getSingleSortResult(rowsToSearch);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                rowsToSearch = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsToSearch\r\n                );\r\n            }\r\n            return rowsToSearch;\r\n        }\r\n        // Set search key\r\n\r\n        if (\r\n            hasFilter ||\r\n            hasSingleSortkey ||\r\n            searchKey.length > 1 ||\r\n            hasGropSortKeys\r\n        )\r\n            return this.state.subDataSet;\r\n        return this.state.dataSet;\r\n    }\r\n\r\n    /**\r\n     * Method To dynamically swap the column from column chooser\r\n     * @param {*} reordered is the swapped array of columns\r\n     */\r\n    handleheaderNameList = (reordered) => {\r\n        swapList = reordered;\r\n    };\r\n\r\n    getSingleSortResult = (data) => {\r\n        if (\r\n            this.state.sortDirection !== \"NONE\" &&\r\n            this.state.sortColumn !== \"\"\r\n        ) {\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortColumn = this.state.sortColumn;\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortDirection = this.state.sortDirection;\r\n            this.setState({ selectedIndexes: [] });\r\n            const comparer = (a, b) => {\r\n                if (sortDirection === \"ASC\") {\r\n                    return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n                }\r\n                if (sortDirection === \"DESC\") {\r\n                    return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n                }\r\n                return 0;\r\n            };\r\n            return sortDirection === \"NONE\" ? data : [...data].sort(comparer);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Method To sort the rows for a particular column\r\n     * @param {*} data is the row datas to be considered for sorting\r\n     * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n     * @param {*} sortDirection is the type of sort\r\n     */\r\n    sortRows = (data, sortColumn, sortDirection) => {\r\n        this.setState({ selectedIndexes: [] });\r\n        // eslint-disable-next-line consistent-return\r\n        const comparer = (a, b) => {\r\n            if (sortDirection === \"ASC\") {\r\n                return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n            }\r\n            if (sortDirection === \"DESC\") {\r\n                return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n            }\r\n        };\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let dtRows = [];\r\n        if (hasFilter || hasSearchKey || hasGropSortKeys) {\r\n            dtRows = this.state.subDataSet;\r\n        } else {\r\n            dtRows = this.state.dataSet;\r\n        }\r\n        const result = [...dtRows].sort(comparer);\r\n        this.setState({\r\n            rows: result.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: result,\r\n            selectedIndexes: [],\r\n            sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n            sortDirection\r\n        });\r\n        return sortDirection === \"NONE\" ? data : this.state.rows;\r\n    };\r\n\r\n    getSlicedRows = async (filters, rowsToSplit, firstResult) => {\r\n        let data = [];\r\n        if (rowsToSplit.length > 0) {\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            let index = 0;\r\n            chunks.forEach(async (arr) => {\r\n                this.getRowsAsync(arr, filters).then(async (dt) => {\r\n                    index++;\r\n                    data = [...data, ...dt];\r\n                    if (index === chunks.length) {\r\n                        let dtSet = [...firstResult, ...data];\r\n                        if (this.state.searchValue !== \"\") {\r\n                            const searchKey = String(\r\n                                this.state.searchValue\r\n                            ).toLowerCase();\r\n                            dtSet = dtSet.filter((item) => {\r\n                                return Object.values(item)\r\n                                    .toString()\r\n                                    .toLowerCase()\r\n                                    .includes(searchKey);\r\n                            });\r\n                        }\r\n\r\n                        dtSet = this.getSingleSortResult(dtSet);\r\n                        if (\r\n                            this.state.sortingParamsObjectList &&\r\n                            this.state.sortingParamsObjectList.length > 0\r\n                        ) {\r\n                            dtSet = this.groupSort(\r\n                                this.state.sortingParamsObjectList,\r\n                                dtSet\r\n                            );\r\n                        }\r\n                        const rw = dtSet.slice(\r\n                            0,\r\n                            this.state.pageIndex * this.state.pageRowCount\r\n                        );\r\n                        await this.setStateAsync({\r\n                            subDataSet: dtSet,\r\n                            rows: rw,\r\n                            tempRows: rw,\r\n                            count: rw.length\r\n                        });\r\n                        if (dtSet.length === 0) {\r\n                            this.handleWarningStatus();\r\n                        } else {\r\n                            this.closeWarningStatus(rw);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    getRowsAsync = async (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    getrows = (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual deselect of rows\r\n     * @param {*} rows is the deselected row\r\n     */\r\n    onRowsDeselected = (rows) => {\r\n        const rowIndexes = rows.map((r) => r.rowIdx);\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.filter(\r\n                (i) => rowIndexes.indexOf(i) === -1\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To update the cell/cells with the edited values\r\n     * @param {*} fromRow is the row from which this edit is performed\r\n     * @param {*} toRow is the row upto which this edit is performed\r\n     * @param {*} updated is the value of change\r\n     * @param {*} action is type of edit action performed\r\n     */\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n        let columnName = \"\";\r\n        const filter = this.formulaAppliedCols.filter((item) => {\r\n            if (updated[item.key] !== null && updated[item.key] !== undefined) {\r\n                columnName = item.key;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (filter.length > 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            updated = applyFormula(updated, columnName);\r\n        }\r\n\r\n        if (action !== \"COPY_PASTE\") {\r\n            this.props.updatedRows({ fromRow, toRow, updated, action });\r\n            this.setState((state) => {\r\n                const rows = state.rows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    rows[i] = {\r\n                        ...rows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    rows\r\n                };\r\n            });\r\n\r\n            this.setState((state) => {\r\n                const filteringRows = state.filteringRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    filteringRows[i] = {\r\n                        ...filteringRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    filteringRows\r\n                };\r\n            });\r\n            this.setState((state) => {\r\n                const tempRows = state.tempRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    tempRows[i] = {\r\n                        ...tempRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    tempRows\r\n                };\r\n            });\r\n        }\r\n        if (this.props.updateCellData) {\r\n            this.props.updateCellData(\r\n                this.state.tempRows[fromRow],\r\n                this.state.tempRows[toRow],\r\n                updated,\r\n                action\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual select of rows\r\n     * @param {*} rows is the selected row\r\n     */\r\n    onRowsSelected = (rows) => {\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.concat(\r\n                rows.map((r) => r.rowIdx)\r\n            )\r\n        });\r\n        if (this.props.selectBulkData) {\r\n            this.props.selectBulkData(rows);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To filter the multiple columns\r\n     * @param {*} value is the  incoming filtering event\r\n     */\r\n    handleFilterChange = async (value) => {\r\n        const { junk } = this.state;\r\n        if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n            junk[value.column.key] = value;\r\n        } else {\r\n            delete junk[value.column.key];\r\n        }\r\n        this.setState({ junk });\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const firstPage = this.state.dataSet.slice(0, this.state.pageRowCount);\r\n        let data = this.getrows(firstPage, this.state.junk);\r\n        await this.setStateAsync({\r\n            rows: data,\r\n            tempRows: data,\r\n            count: data.length,\r\n            subDataSet: hasFilter ? data : [],\r\n            pageIndex: hasFilter ? this.state.pageIndex : 1\r\n        });\r\n        if (hasFilter) {\r\n            const rowsRemaining = this.state.dataSet.slice(\r\n                this.state.pageRowCount,\r\n                this.state.dataSet.length\r\n            );\r\n            this.getSlicedRows(this.state.junk, rowsRemaining, data);\r\n        } else {\r\n            let rowsRemaining = this.state.dataSet; // .slice(this.state.pageRowCount, this.state.dataSet.length);\r\n            if (this.state.searchValue !== \"\") {\r\n                const searchKey = String(this.state.searchValue).toLowerCase();\r\n                rowsRemaining = rowsRemaining.filter((item) => {\r\n                    return Object.values(item)\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(searchKey);\r\n                });\r\n            }\r\n            rowsRemaining = this.getSingleSortResult(rowsRemaining);\r\n\r\n            if (\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0\r\n            ) {\r\n                rowsRemaining = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsRemaining\r\n                );\r\n            }\r\n\r\n            const rw = rowsRemaining.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            await this.setStateAsync({\r\n                subDataSet: rowsRemaining,\r\n                rows: rw,\r\n                tempRows: rw,\r\n                count: rw.length\r\n            });\r\n            data = rw;\r\n        }\r\n        if (data.length === 0) {\r\n            this.handleWarningStatus();\r\n        } else {\r\n            this.closeWarningStatus(data);\r\n        }\r\n    };\r\n\r\n    isAtBottom = (event) => {\r\n        const { target } = event; // as HTMLDivElement;\r\n        const isbtm =\r\n            target.clientHeight + target.scrollTop >= target.scrollHeight - 10;\r\n        return isbtm;\r\n    };\r\n\r\n    isSubset() {\r\n        if (\r\n            Object.keys(this.state.junk).length > 0 ||\r\n            this.state.sortDirection !== \"NONE\" ||\r\n            this.state.searchValue !== \"\" ||\r\n            (this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadMoreRows = (from, newRowsCount) => {\r\n        return new Promise((resolve) => {\r\n            // const hasFilter = Object.keys(this.state.junk).length > 0;\r\n            let to = from + newRowsCount;\r\n            if (this.isSubset() && this.state.subDataSet.length > 0) {\r\n                to =\r\n                    to < this.state.subDataSet.length\r\n                        ? to\r\n                        : this.state.subDataSet.length;\r\n                resolve(this.state.subDataSet.slice(from, to));\r\n            } else {\r\n                resolve(this.state.dataSet.slice(from, to));\r\n            }\r\n        });\r\n    };\r\n\r\n    handleScroll = async (event) => {\r\n        if (!this.isAtBottom(event)) return;\r\n        const newRows = await this.loadMoreRows(\r\n            this.state.pageIndex * this.state.pageRowCount,\r\n            this.state.pageRowCount\r\n        );\r\n        if (newRows && newRows.length > 0) {\r\n            let length = 0;\r\n            this.setState((prev) => {\r\n                length = prev.rows.length + newRows.length;\r\n            });\r\n            this.setState({\r\n                rows: [...this.state.rows, ...newRows],\r\n                count: length,\r\n                pageIndex: this.state.pageIndex + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    globalSearchLogic = (e, updatedRows) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = updatedRows.filter((item) => {\r\n            return Object.values(item)\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ warningStatus: \"invalid\", rows: [], count: 0 });\r\n        } else {\r\n            const rowSlice = filteredRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            this.setState({\r\n                warningStatus: \"\",\r\n                rows: rowSlice,\r\n                subDataSet: filteredRows,\r\n                count: rowSlice.length\r\n            });\r\n        }\r\n    };\r\n\r\n    handleWarningStatus = () => {\r\n        this.setState({ warningStatus: \"invalid\" });\r\n    };\r\n\r\n    closeWarningStatus = (val) => {\r\n        let rVal = val;\r\n        if (!rVal) {\r\n            const hasSingleSortkey =\r\n                this.state.sortDirection !== \"NONE\" &&\r\n                this.state.sortColumn !== \"\";\r\n            const hasGropSortKeys =\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0;\r\n\r\n            let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                dataRows = this.getSingleSortResult(dataRows);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                dataRows = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    dataRows\r\n                );\r\n            }\r\n            rVal = dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n        }\r\n        this.setState({ warningStatus: \"\", rows: rVal, count: rVal.length });\r\n    };\r\n\r\n    save = () => {\r\n        this.props.saveRows(this.state.dataSet);\r\n    };\r\n\r\n    clearAllFilters = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n\r\n        let dtSet = this.getSearchResult(this.state.dataSet);\r\n        if (hasSingleSortkey) {\r\n            dtSet = this.getSingleSortResult(dtSet);\r\n        }\r\n        if (hasGropSortKeys) {\r\n            dtSet = this.groupSort(this.state.sortingParamsObjectList, dtSet);\r\n        }\r\n        const rVal = dtSet.slice(\r\n            0,\r\n            this.state.pageIndex * this.state.pageRowCount\r\n        );\r\n        this.setState({\r\n            rows: rVal,\r\n            count: rVal.length,\r\n            subDataSet: dtSet\r\n        });\r\n    };\r\n    getSearchResult = (data) => {\r\n        let dtSet = data;\r\n        const searchKey = String(this.state.searchValue).toLowerCase();\r\n        if (searchKey !== \"\") {\r\n            dtSet = dtSet.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        return dtSet;\r\n    };\r\n    getFilterResult = (data) => {\r\n        let dataRows = [];\r\n        if (Object.keys(this.state.junk).length > 0) {\r\n            const rowsToSplit = [...data];\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            chunks.forEach((arr) => {\r\n                const dt = this.getrows(arr, this.state.junk);\r\n                dataRows = [...dataRows, ...dt];\r\n            });\r\n        } else {\r\n            dataRows = [...data];\r\n        }\r\n        return dataRows;\r\n    };\r\n    render() {\r\n        return (\r\n            <div onScroll={this.handleScroll}>\r\n                <div className=\"neo-grid-header\">\r\n                    <div className=\"neo-grid-header__results\">\r\n                        Showing &nbsp;<strong> {this.state.count} </strong>{\" \"}\r\n                        &nbsp; records\r\n                    </div>\r\n                    <div className=\"neo-grid-header__utilities\">\r\n                        <div className=\"txt-wrap\">\r\n                            <input\r\n                                data-testid=\"globalSearch\"\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    this.handleSearchValue(e.target.value);\r\n                                    const srchRows = this.getSearchRecords(e);\r\n                                    this.globalSearchLogic(e, srchRows);\r\n                                }}\r\n                                value={this.state.searchValue}\r\n                                className=\"txt\"\r\n                                placeholder=\"Search\"\r\n                            />\r\n                            <i>\r\n                                <IconSearch />\r\n                            </i>\r\n                        </div>\r\n                        <div\r\n                            id=\"openSorting\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.sortingPanel}\r\n                        >\r\n                            <IconGroupSort />\r\n                        </div>\r\n                        {this.state.sortingPanelComponent}\r\n                        <div\r\n                            className=\"filterIcons\"\r\n                            onClick={this.columnReorderingPannel}\r\n                        >\r\n                            <IconColumns />\r\n                        </div>\r\n                        {this.state.columnReorderingComponent}\r\n                        <div\r\n                            className=\"filterIcons\"\r\n                            onClick={this.exportColumnData}\r\n                        >\r\n                            <IconShare />\r\n                        </div>\r\n                        {this.state.exportComponent}\r\n                    </div>\r\n                </div>\r\n                <ErrorMessage\r\n                    className=\"errorDiv\"\r\n                    status={this.state.warningStatus}\r\n                    closeWarningStatus={() => {\r\n                        this.closeWarningStatus();\r\n                    }}\r\n                    clearSearchValue={this.clearSearchValue}\r\n                />\r\n                <ExtDataGrid\r\n                    toolbar={<Toolbar enableFilter />}\r\n                    getValidFilterValues={(columnKey) =>\r\n                        this.getValidFilterValues(\r\n                            this.state.filteringRows,\r\n                            columnKey\r\n                        )\r\n                    }\r\n                    minHeight={this.state.height}\r\n                    columns={this.state.columns}\r\n                    rowGetter={(i) => this.state.rows[i]}\r\n                    rowsCount={this.state.rows.length}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    enableCellSelect\r\n                    onClearFilters={() => {\r\n                        this.setState({ junk: {} });\r\n                        this.clearAllFilters();\r\n                    }}\r\n                    onColumnResize={(idx, width) =>\r\n                        console.log(\r\n                            `Column ${idx} has been resized to ${width}`\r\n                        )\r\n                    }\r\n                    onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n                    rowSelection={{\r\n                        showCheckbox: true,\r\n                        enableShiftSelect: true,\r\n                        onRowsSelected: this.onRowsSelected,\r\n                        onRowsDeselected: this.onRowsDeselected,\r\n                        selectBy: {\r\n                            indexes: this.state.selectedIndexes\r\n                        }\r\n                    }}\r\n                    onGridSort={(sortColumn, sortDirection) =>\r\n                        this.sortRows(\r\n                            this.state.filteringRows,\r\n                            sortColumn,\r\n                            sortDirection\r\n                        )\r\n                    }\r\n                    globalSearch={this.globalSearchLogic}\r\n                    handleWarningStatus={this.handleWarningStatus}\r\n                    closeWarningStatus={this.closeWarningStatus}\r\n                    // cellRangeSelection={{\r\n                    //   onComplete: this.setSelection,\r\n                    // }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nlet sortBy;\r\n(function () {\r\n    // utility functions\r\n    const defaultCmp = function (a, b) {\r\n        if (a === b) return 0;\r\n        return a < b ? -1 : 1;\r\n    };\r\n    const getCmpFunc = function (primer, reverse) {\r\n        let cmp = defaultCmp;\r\n        if (primer) {\r\n            cmp = function (a, b) {\r\n                return defaultCmp(primer(a), primer(b));\r\n            };\r\n        }\r\n        if (reverse) {\r\n            return function (a, b) {\r\n                return -1 * cmp(a, b);\r\n            };\r\n        }\r\n        return cmp;\r\n    };\r\n\r\n    // actual implementation\r\n    sortBy = function () {\r\n        const fields = [];\r\n        const nFields = arguments.length;\r\n        let field;\r\n        let name;\r\n        let cmp;\r\n\r\n        // preprocess sorting options\r\n        for (let i = 0; i < nFields; i++) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            field = arguments[i];\r\n            if (typeof field === \"string\") {\r\n                name = field;\r\n                cmp = defaultCmp;\r\n            } else {\r\n                name = field.name;\r\n                cmp = getCmpFunc(field.primer, field.reverse);\r\n            }\r\n            fields.push({\r\n                name,\r\n                cmp\r\n            });\r\n        }\r\n\r\n        return function (A, B) {\r\n            let result;\r\n            for (let i = 0, l = nFields; i < l; i++) {\r\n                result = 0;\r\n                field = fields[i];\r\n                name = field.name;\r\n                cmp = field.cmp;\r\n\r\n                result = cmp(A[name], B[name]);\r\n                if (result !== 0) break;\r\n            }\r\n            return result;\r\n        };\r\n    };\r\n})();\r\n\r\nSpreadsheet.propTypes = {\r\n    airportCodes: PropTypes.any,\r\n    rows: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    status: PropTypes.any,\r\n    count: PropTypes.any,\r\n    updateCellData: PropTypes.any,\r\n    selectBulkData: PropTypes.any,\r\n    pinnedReorder: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    globalSearchLogic: PropTypes.any,\r\n    closeWarningStatus: PropTypes.any,\r\n    dataSet: PropTypes.any,\r\n    pageSize: PropTypes.any,\r\n    updatedRows: PropTypes.any,\r\n    saveRows: PropTypes.any\r\n};\r\n\r\nexport default Spreadsheet;\r\n","export const applyFormula = (obj, columnName) => {\n    const val = obj;\n    const item = val[columnName].toString();\n    if (item && item.charAt(0) === \"=\") {\n        const operation = item.split(\"(\");\n        const value = operation[1]\n            .substring(0, operation[1].length - 1)\n            .split(/[,:]/);\n        switch (operation[0]) {\n            case \"=SUM\":\n            case \"=ADD\":\n            case \"=sum\":\n            case \"=add\":\n                val[columnName] = value.reduce(function (a, b) {\n                    return Number(a) + Number(b);\n                });\n                break;\n            case \"=MUL\":\n            case \"=mul\":\n                val[columnName] = value.reduce(function (a, b) {\n                    return Number(a) * Number(b);\n                });\n                break;\n            case \"=SUB\":\n            case \"=sub\":\n            case \"=DIFF\":\n            case \"=diff\":\n                val[columnName] = value.reduce(function (a, b) {\n                    return Number(a) - Number(b);\n                });\n                break;\n            case \"=min\":\n            case \"=MIN\":\n                // eslint-disable-next-line prefer-spread\n                val[columnName] = Math.min.apply(Math, value);\n                break;\n            case \"=max\":\n            case \"=MAX\":\n                // eslint-disable-next-line prefer-spread\n                val[columnName] = Math.max.apply(Math, value);\n                break;\n            default:\n                console.log(\"No Calculation\");\n        }\n    }\n    return val;\n};\n","import React, { useState, useEffect } from \"react\";\r\nimport Spreadsheet from \"spreadsheet\";\r\nimport CargoData from \"./data.json\";\r\n//import { fetchData } from \"./getData\";\r\n\r\nconst App = (props) => {\r\n    //Get spreadsheet height value, which is a required value\r\n    const gridHeight = \"90vh\";\r\n    //Set state value for variable to hold grid data\r\n    const [data, setData] = useState();\r\n    const rows = CargoData;\r\n\r\n    // Spreadsheet page size\r\n    const pageSize = 500;\r\n    const maxLeftPinnedColumn = 5;\r\n    //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\r\n    //Editable, Draggable, sortable, resizable, filterable, default width\r\n    const columns = [\r\n        {\r\n            key: \"flightno\",\r\n            name: \"FlightNo\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"date\",\r\n            name: \"Date\",\r\n            draggable: false,\r\n            editor: \"DatePicker\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"segmentfrom\",\r\n            name: \"Segment From\",\r\n            draggable: false,\r\n            editor: \"DropDown\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"revenue\",\r\n            name: \"Revenue\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"yeild\",\r\n            name: \"Yeild\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"segmentto\",\r\n            name: \"Segment To\",\r\n            draggable: false,\r\n            editor: \"DropDown\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"flightModel\",\r\n            name: \"Flight Model\",\r\n            draggable: false,\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"numeric\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"bodyType\",\r\n            name: \"Body Type\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"type\",\r\n            name: \"Type\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"startTime\",\r\n            name: \"Start Time\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"endTime\",\r\n            name: \"End Time\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"status\",\r\n            name: \"Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"additionalStatus\",\r\n            name: \"Additional Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"timeStatus\",\r\n            name: \"Time Status\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"weightpercentage\",\r\n            name: \"Weight Percentage\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"weightvalue\",\r\n            name: \"Weight Value\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"volumepercentage\",\r\n            name: \"Volume Percentage\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: true,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"volumevalue\",\r\n            name: \"Volume Value\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition1\",\r\n            name: \"uldposition1\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue1\",\r\n            name: \"uldvalue1\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition2\",\r\n            name: \"uldposition2\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue2\",\r\n            name: \"uldvalue2\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition3\",\r\n            name: \"uldposition3\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue3\",\r\n            name: \"uldvalue3\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldposition4\",\r\n            name: \"uldposition4\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"uldvalue4\",\r\n            name: \"uldvalue4\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n\r\n        {\r\n            key: \"sr\",\r\n            name: \"SR\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"queuedBookingSR\",\r\n            name: \"Queued Booking SR\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        },\r\n        {\r\n            key: \"queuedBookingvolume\",\r\n            name: \"Queued Booking Volume\",\r\n            draggable: false,\r\n            editor: \"Text\",\r\n            formulaApplicable: false,\r\n            sortable: true,\r\n            resizable: true,\r\n            filterable: true,\r\n            width: 150,\r\n            filterType: \"autoCompleteFilter\",\r\n            dataSource: []\r\n        }\r\n    ];\r\n\r\n    //Configure columns and its related functions\r\n    const segmenToCode = [\r\n        \"AAA\",\r\n        \"AAB\",\r\n        \"AAC\",\r\n        \"ABA\",\r\n        \"ABB\",\r\n        \"ABC\",\r\n        \"ACA\",\r\n        \"ACB\",\r\n        \"ACC\",\r\n        \"BAA\",\r\n        \"BAB\",\r\n        \"BAC\",\r\n        \"BBA\",\r\n        \"BBB\",\r\n        \"BBC\",\r\n        \"BCA\",\r\n        \"BCB\",\r\n        \"BCC\",\r\n        \"CAA\",\r\n        \"CAB\",\r\n        \"CAC\",\r\n        \"CBA\",\r\n        \"CBB\",\r\n        \"CBC\",\r\n        \"CCA\",\r\n        \"CCB\",\r\n        \"CCC\",\r\n        \"XXX\",\r\n        \"XXY\",\r\n        \"XXZ\",\r\n        \"XYX\",\r\n        \"XYY\",\r\n        \"XYZ\",\r\n        \"XZX\",\r\n        \"XZY\",\r\n        \"XZZ\",\r\n        \"YXX\",\r\n        \"YXY\",\r\n        \"YXZ\",\r\n        \"YYX\",\r\n        \"YYY\",\r\n        \"YYZ\",\r\n        \"YZX\",\r\n        \"YZY\",\r\n        \"YZZ\",\r\n        \"ZXX\",\r\n        \"ZXY\",\r\n        \"ZXZ\",\r\n        \"ZYX\",\r\n        \"ZYY\",\r\n        \"ZYZ\",\r\n        \"ZZX\",\r\n        \"ZZY\",\r\n        \"ZZZ\"\r\n    ];\r\n\r\n    //Configure dropdown editor values\r\n    const segmentFromCode = [\r\n        \"AAA\",\r\n        \"AAB\",\r\n        \"AAC\",\r\n        \"ABA\",\r\n        \"ABB\",\r\n        \"ABC\",\r\n        \"ACA\",\r\n        \"ACB\",\r\n        \"ACC\",\r\n        \"BAA\",\r\n        \"BAB\",\r\n        \"BAC\",\r\n        \"BBA\",\r\n        \"BBB\",\r\n        \"BBC\",\r\n        \"BCA\",\r\n        \"BCB\",\r\n        \"BCC\",\r\n        \"CAA\",\r\n        \"CAB\",\r\n        \"CAC\",\r\n        \"CBA\",\r\n        \"CBB\",\r\n        \"CBC\",\r\n        \"CCA\",\r\n        \"CCB\",\r\n        \"CCC\"\r\n    ];\r\n\r\n    //Gets called when there is a cell edit\r\n    const updateCellData = (fromRow, toRow, value, updateType) => {\r\n        if (updateType === \"CELL_UPDATE\") {\r\n            console.log(\r\n                \"Starting row:\",\r\n                fromRow,\r\n                \"updated-Value:\",\r\n                value,\r\n                \"Updation-Type:\",\r\n                updateType,\r\n                \"Ending Row:\",\r\n                toRow\r\n            );\r\n        }\r\n        if (updateType === \"CELL_DRAG\") {\r\n            console.log(\r\n                \"fromRow:\",\r\n                fromRow,\r\n                \"toRow:\",\r\n                toRow,\r\n                \"updated-Value:\",\r\n                value,\r\n                \"Updation-Type:\",\r\n                updateType\r\n            );\r\n        }\r\n    };\r\n\r\n    //Gets called when row bulk edit is done\r\n    const selectBulkData = (selectedRows) => {\r\n        console.log(\"selectedRows:\", selectedRows);\r\n    };\r\n\r\n    //binding the required values of dropDown to the dataSource field in columns\r\n    columns.forEach((item) => {\r\n        if (item.key === \"segmentto\") {\r\n            let tempArray = [];\r\n            segmenToCode.forEach((it) => {\r\n                tempArray.push({ id: it, value: it });\r\n            });\r\n            item.dataSource = tempArray;\r\n        } else if (item.key === \"segmentfrom\") {\r\n            let tempArray = [];\r\n            segmentFromCode.forEach((it) => {\r\n                tempArray.push({ id: it, value: it });\r\n            });\r\n            item.dataSource = tempArray;\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data, uncomment below code to use API call\r\n        // fetchData(0).then((data) => {\r\n        //   setItems(data);\r\n        // });\r\n        setData(rows);\r\n    }, [rows]);\r\n\r\n    /**\r\n     * Method To render updated rows\r\n     * @param {*} rows is the updated row values\r\n     */\r\n    const updatedRows = ({ fromRow, toRow, updated }) => {\r\n        let tempData = [...data];\r\n        const temp = tempData.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            temp[i] = {\r\n                ...temp[i],\r\n                ...updated\r\n            };\r\n        }\r\n        setData(temp);\r\n        console.log(\"UpdatedRows:\", temp);\r\n    };\r\n\r\n    /**\r\n     * Method return updated rows\r\n     */\r\n    const handleSave = () => {\r\n        console.log(data);\r\n    };\r\n\r\n    if (data) {\r\n        return (\r\n            <div>\r\n                {/* click on button will load updated records in spreadsheet*/}\r\n                {/* <button type=\"button\" onClick={handleSave}>\r\n                    Load Data\r\n                </button> */}\r\n                <Spreadsheet\r\n                    rows={data.slice(0, pageSize)}\r\n                    dataSet={data}\r\n                    pageSize={pageSize}\r\n                    count={pageSize}\r\n                    columns={columns}\r\n                    gridHeight={gridHeight}\r\n                    updateCellData={updateCellData}\r\n                    selectBulkData={selectBulkData}\r\n                    maxLeftPinnedColumn={maxLeftPinnedColumn}\r\n                    updatedRows={updatedRows}\r\n                />\r\n            </div>\r\n        );\r\n    } else if (data === undefined) {\r\n        return <h2>Loading Data</h2>;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}