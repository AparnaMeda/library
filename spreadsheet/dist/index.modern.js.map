{"version":3,"file":"index.modern.js","sources":["../src/common/extDataGrid.js","../src/utilities/utils.js","../src/functions/DatePicker.js","../src/common/ErrorConstants.js","../src/common/ErrorMessage.js","../src/overlays/column_chooser/ItemTypes.js","../src/overlays/column_chooser/columnItem.js","../src/overlays/column_chooser/columnsList.js","../src/overlays/column_chooser/Chooser.js","../src/overlays/sorting/ItemTypes.js","../src/overlays/sorting/SortItem.js","../src/overlays/sorting/SortingList.js","../src/overlays/sorting/Sorting.js","../src/overlays/export_data/ExportData.js","../src/functions/FormulaProcessor.js","../src/index.js"],"sourcesContent":["import ReactDataGrid from \"react-data-grid\";\n\nclass ExtDataGrid extends ReactDataGrid {\n    componentDidMount() {\n        this._mounted = true;\n        // eslint-disable-next-line prefer-destructuring\n        this.dataGridComponent = document.getElementsByClassName(\n            \"react-grid-Viewport\"\n        )[0];\n\n        window.addEventListener(\"resize\", this.metricsUpdated);\n        if (this.props.cellRangeSelection) {\n            // this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n        }\n        this.metricsUpdated();\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        window.removeEventListener(\"resize\", this.metricsUpdated);\n        // this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n}\n\nexport default ExtDataGrid;\n","export const applyFormula = (obj, columnName) => {\n    const val = obj;\n    const item = val[columnName].toString();\n    if (item && item.charAt(0) === \"=\") {\n        const operation = item.split(\"(\");\n        const value = operation[1]\n            .substring(0, operation[1].length - 1)\n            .split(/[,:]/);\n        switch (operation[0]) {\n            case \"=SUM\":\n            case \"=ADD\":\n            case \"=sum\":\n            case \"=add\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) + Number(b);\n                });\n                break;\n            case \"=MUL\":\n            case \"=mul\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) * Number(b);\n                });\n                break;\n            case \"=SUB\":\n            case \"=sub\":\n            case \"=DIFF\":\n            case \"=diff\":\n                val[columnName] = value.reduce((a, b) => {\n                    return Number(a) - Number(b);\n                });\n                break;\n            case \"=min\":\n            case \"=MIN\":\n                val[columnName] = Math.min(...value);\n                break;\n            case \"=max\":\n            case \"=MAX\":\n                val[columnName] = Math.max(...value);\n                break;\n            default:\n        }\n    }\n    return val;\n};\n","/* eslint-disable react/destructuring-assignment */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: new Date()\n        };\n        // the variable to store component reference\n        this.input = null;\n\n        this.getInputNode = this.getInputNode.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(ev) {\n        this.setState({ value: ev.target.value });\n    }\n\n    // returning updated object with the date value in the required format\n    getValue() {\n        const updated = {};\n        const date = new Date(this.state.value);\n        const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"2-digit\"\n        });\n        const [\n            { value: month },\n            ,\n            { value: day },\n            ,\n            { value: year }\n        ] = dateTimeFormat.formatToParts(date);\n        updated[this.props.column.key] = `${year}-${month}-${day}`;\n        return updated;\n    }\n\n    // returning the component with the reference, input\n    getInputNode() {\n        return this.input;\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"date\"\n                    ref={(ref) => {\n                        this.input = ref;\n                    }}\n                    value={this.state.value}\n                    onChange={this.onValueChanged}\n                />\n            </div>\n        );\n    }\n}\n\nDatePicker.propTypes = {\n    column: PropTypes.string\n};\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\n\nimport React, { useState, useEffect } from \"react\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\nimport { ReactComponent as IconClose } from \"../images/icon-close.svg\";\n\nconst ErrorMessage = (props) => {\n    const [status, setStatus] = useState(props.status);\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n    if (status === \"invalid\") {\n        return (\n            <div id=\"errorMsg\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {SEARCH_NOT_FOUNT_ERROR}\n                </div>\n                <div\n                    role=\"presentation\"\n                    className=\"notification-close\"\n                    onClick={() => {\n                        props.closeWarningStatus();\n                        props.clearSearchValue();\n                    }}\n                >\n                    <i>\n                        <IconClose />\n                    </i>\n                </div>\n            </div>\n        );\n    }\n    return <div />;\n};\n\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div\r\n            data-testid=\"columnItem\"\r\n            ref={(node) => drag(drop(node))}\r\n            style={{ ...style, opacity }}\r\n        >\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveColumn: PropTypes.any,\r\n    findColumn: PropTypes.any\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { columnsArray } = props;\r\n    const [columns, setColumns] = useState([...columnsArray]);\r\n\r\n    const findColumn = (id) => {\r\n        const column = columns.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            column,\r\n            index: columns.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const moveColumn = (id, atIndex) => {\r\n        const { column, index } = findColumn(id);\r\n        setColumns(\r\n            update(columns, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(columns, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, column]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderList(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    React.useEffect(() => {\r\n        setColumns(props.columnsArray);\r\n    }, [columnsArray]);\r\n    return (\r\n        <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n            {columns.map((column) => (\r\n                <ColumnItem\r\n                    key={column.id}\r\n                    id={`${column.id}`}\r\n                    text={column.text}\r\n                    moveColumn={moveColumn}\r\n                    findColumn={findColumn}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n    columnsArray: PropTypes.any,\r\n    handleReorderList: PropTypes.any\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport ColumnsList from \"./columnsList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconJustify } from \"../../images/icon-align-justify.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\n\nclass ColumnReordering extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            headerKeys,\n            columns,\n            existingPinnedHeadersList,\n            maxLeftPinnedColumn\n        } = this.props;\n        this.state = {\n            columnReorderEntityList: headerKeys,\n            columnSelectList: columns.map((item) => item.name),\n            leftPinnedColumList: existingPinnedHeadersList,\n            isAllSelected: true,\n            maxLeftPinnedColumns: maxLeftPinnedColumn\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * Method to reset the coloumn list onClick of Reset button\n     */\n    resetColumnReorderList = () => {\n        const { columns } = this.props;\n        this.setState({\n            columnReorderEntityList: columns.map((item) => item.name),\n            leftPinnedColumList: [],\n            isAllSelected: true\n        });\n    };\n\n    /**\n     * Method to Select all options in the coloumn list onClick of Select All button\n     */\n    selectAllToColumnReOrderList = () => {\n        const { columnReorderEntityList, isAllSelected } = this.state;\n        this.resetColumnReorderList();\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        let isExistingAllSelect = isAllSelected;\n        if (isExistingAllSelect) {\n            existingColumnReorderEntityList = [];\n            isExistingAllSelect = false;\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: isExistingAllSelect,\n            leftPinnedColumList: []\n        });\n    };\n\n    /**\n     * Method To add a column to columnReorderEntityList when selected.\n     * @param {String} typeToBeAdded\n     */\n    addToColumnReorderEntityList = (typeToBeAdded) => {\n        const {\n            columnReorderEntityList,\n            leftPinnedColumList,\n            columnSelectList\n        } = this.state;\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        let existingLeftPinnedList = leftPinnedColumList;\n        if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n            let indexOfInsertion = columnSelectList.findIndex(\n                (item) => item === typeToBeAdded\n            );\n            while (indexOfInsertion > 0) {\n                if (\n                    existingColumnReorderEntityList.includes(\n                        columnSelectList[indexOfInsertion - 1]\n                    )\n                ) {\n                    if (\n                        !existingLeftPinnedList.includes(\n                            columnSelectList[indexOfInsertion - 1]\n                        )\n                    ) {\n                        indexOfInsertion = existingColumnReorderEntityList.findIndex(\n                            // eslint-disable-next-line no-loop-func\n                            (item) =>\n                                item === columnSelectList[indexOfInsertion - 1]\n                        );\n                        indexOfInsertion += 1;\n                        break;\n                    } else {\n                        indexOfInsertion -= 1;\n                    }\n                } else {\n                    indexOfInsertion -= 1;\n                }\n            }\n            existingColumnReorderEntityList.splice(\n                indexOfInsertion,\n                0,\n                typeToBeAdded\n            );\n        } else {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (item) => {\n                    if (item !== typeToBeAdded) return item;\n                    return \"\";\n                }\n            );\n            if (existingLeftPinnedList.includes(typeToBeAdded)) {\n                existingLeftPinnedList = existingLeftPinnedList.filter(\n                    (item) => item !== typeToBeAdded\n                );\n            }\n        }\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList,\n            isAllSelected: false,\n            leftPinnedColumList: existingLeftPinnedList\n        });\n    };\n\n    /**\n     * Method to handle the like-search on key stroke.\n     * @param {Event} e\n     */\n    filterColumnReorderList = (e) => {\n        const { columns } = this.props;\n        const searchKey = String(e.target.value).toLowerCase();\n        const existingList = columns.map((item) => item.name);\n        let filtererdColumnReorderList = [];\n        if (searchKey.length > 0) {\n            filtererdColumnReorderList = existingList.filter((item) => {\n                return item.toLowerCase().includes(searchKey);\n            });\n        } else {\n            filtererdColumnReorderList = columns.map((item) => item.name);\n        }\n        this.setState({\n            columnSelectList: filtererdColumnReorderList\n        });\n    };\n\n    createColumnsArrayFromProps = (colsList) => {\n        const { leftPinnedColumList, maxLeftPinnedColumns } = this.state;\n        return colsList.map((item) => {\n            return {\n                id: item,\n                text: (\n                    <div className=\"column__reorder\" key={item}>\n                        <div style={{ cursor: \"move\" }} className=\"column_drag\">\n                            <i>\n                                <IconJustify />\n                            </i>\n                        </div>\n                        <div className=\"column__reorder__name\">{item}</div>\n                        <div className=\"column__innerCells__wrap\">\n                            <div className=\"column__wrap\">\n                                <div className=\"column__checkbox\">\n                                    <input\n                                        data-testid=\"reArrangeLeftPin\"\n                                        role=\"button\"\n                                        type=\"checkbox\"\n                                        id={`checkBoxToPinLeft_${item}`}\n                                        checked={leftPinnedColumList.includes(\n                                            item\n                                        )}\n                                        disabled={\n                                            maxLeftPinnedColumns -\n                                                leftPinnedColumList.length <=\n                                            0\n                                                ? !leftPinnedColumList.includes(\n                                                      item\n                                                  )\n                                                : false\n                                        }\n                                        onChange={() =>\n                                            this.reArrangeLeftPinnedColumn(item)\n                                        }\n                                    />\n                                </div>\n                                <div className=\"column__txt\">Pin Left</div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    /**\n     * Method to handle the position of columns Names when left pinned in coloumn selector view.\n     * @param {String} columHeaderName\n     */\n    reArrangeLeftPinnedColumn = (columHeaderName) => {\n        const { leftPinnedColumList, columnReorderEntityList } = this.state;\n        let existingLeftPinnedList = leftPinnedColumList;\n        let existingColumnReorderEntityList = columnReorderEntityList;\n        if (!existingLeftPinnedList.includes(columHeaderName)) {\n            existingLeftPinnedList.unshift(columHeaderName);\n        } else {\n            existingLeftPinnedList = existingLeftPinnedList.filter(\n                (item) => item !== columHeaderName\n            );\n        }\n        this.setState({\n            leftPinnedColumList: existingLeftPinnedList\n        });\n\n        existingLeftPinnedList.forEach((item) => {\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n                (subItem) => subItem !== item\n            );\n            existingColumnReorderEntityList.unshift(item);\n            return null;\n        });\n        this.setState({\n            columnReorderEntityList: existingColumnReorderEntityList\n        });\n    };\n\n    handleReorderList = (reordered) => {\n        const { handleheaderNameList } = this.props;\n        handleheaderNameList(reordered);\n    };\n\n    handleClick() {\n        const { closeColumnReOrdering } = this.props;\n        closeColumnReOrdering();\n    }\n\n    render() {\n        const {\n            columnReorderEntityList,\n            columnSelectList,\n            maxLeftPinnedColumns,\n            leftPinnedColumList\n        } = this.state;\n        const {\n            columns,\n            closeColumnReOrdering,\n            updateTableAsPerRowChooser\n        } = this.props;\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div\n                    className=\"neo-popover neo-popover--column columns--grid\"\n                    // ref={this.setWrapperRef}\n                >\n                    <div className=\"neo-popover__column column__grid\">\n                        <div className=\"column__chooser\">\n                            <div className=\"column__header\">\n                                <div className=\"\">\n                                    <strong>Column Chooser</strong>\n                                </div>\n                            </div>\n                            <div className=\"column__body\">\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Search column\"\n                                        className=\"custom__ctrl\"\n                                        onChange={this.filterColumnReorderList}\n                                    />\n                                </div>\n                                <div className=\"column__selectAll\">\n                                    <div className=\"column__checkbox\">\n                                        <input\n                                            type=\"checkbox\"\n                                            data-testid=\"selectAllCheckBox\"\n                                            id=\"selectallcolumncheckbox\"\n                                            onChange={() =>\n                                                this.selectAllToColumnReOrderList()\n                                            }\n                                            checked={\n                                                columnReorderEntityList.length ===\n                                                columns.length\n                                            }\n                                        />\n                                    </div>\n                                    <div className=\"column__txt\">\n                                        Select all\n                                    </div>\n                                </div>\n                                {columnSelectList.map((item) => {\n                                    return (\n                                        <div\n                                            className=\"column__wrap\"\n                                            key={item}\n                                        >\n                                            <div className=\"column__checkbox\">\n                                                <input\n                                                    data-testid=\"addToColumnReorderEntityList\"\n                                                    type=\"checkbox\"\n                                                    id={`checkboxtoselectreorder_${item}`}\n                                                    checked={columnReorderEntityList.includes(\n                                                        item\n                                                    )}\n                                                    onChange={() =>\n                                                        this.addToColumnReorderEntityList(\n                                                            item\n                                                        )\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"column__txt\">\n                                                {item}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"column__settings\">\n                            <div className=\"column__header\">\n                                <div className=\"column__headerTxt\">\n                                    <strong>Column Settings</strong>\n                                </div>\n                                <div\n                                    role=\"presentation\"\n                                    data-testid=\"closeColumnReordering\"\n                                    className=\"column__close\"\n                                    onClick={() => closeColumnReOrdering()}\n                                >\n                                    <i>\n                                        <IconClose />\n                                    </i>\n                                </div>\n                            </div>\n\n                            <div className=\"column__body\">\n                                <div className=\"column__info\">\n                                    <strong>\n                                        &nbsp; &nbsp; Selected Column Count :{\" \"}\n                                        {columnReorderEntityList.length}\n                                    </strong>\n                                    {maxLeftPinnedColumns -\n                                        leftPinnedColumList.length >\n                                    0 ? (\n                                        <strong>\n                                            &nbsp; &nbsp; Left Pinned Column\n                                            Count Remaining :{\" \"}\n                                            {maxLeftPinnedColumns -\n                                                leftPinnedColumList.length}\n                                        </strong>\n                                    ) : (\n                                        <strong style={{ color: \"red\" }}>\n                                            &nbsp; &nbsp; Maximum Count Of Left\n                                            Pin Columns REACHED\n                                        </strong>\n                                    )}\n                                </div>\n                                <DndProvider\n                                    backend={MultiBackend}\n                                    options={HTML5toTouch}\n                                >\n                                    <ColumnsList\n                                        columnsArray={this.createColumnsArrayFromProps(\n                                            columnReorderEntityList\n                                        )}\n                                        handleReorderList={\n                                            this.handleReorderList\n                                        }\n                                    />\n                                </DndProvider>\n                            </div>\n                            <div className=\"column__footer\">\n                                <div className=\"column__btns\">\n                                    <button\n                                        data-testid=\"resetButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() =>\n                                            this.resetColumnReorderList()\n                                        }\n                                    >\n                                        Reset\n                                    </button>\n                                    <button\n                                        data-testid=\"cancelButton\"\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={() => closeColumnReOrdering()}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        data-testid=\"saveButton\"\n                                        type=\"button\"\n                                        className=\"btns btns__save\"\n                                        onClick={() =>\n                                            updateTableAsPerRowChooser(\n                                                columnReorderEntityList,\n                                                leftPinnedColumList\n                                            )\n                                        }\n                                    >\n                                        Save\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nColumnReordering.propTypes = {\n    headerKeys: PropTypes.any,\n    columns: PropTypes.any,\n    existingPinnedHeadersList: PropTypes.any,\n    maxLeftPinnedColumn: PropTypes.any,\n    closeColumnReOrdering: PropTypes.any,\n    handleheaderNameList: PropTypes.any,\n    updateTableAsPerRowChooser: PropTypes.any\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n    CARD: \"sort\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n    cursor: \"move\"\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n    const originalIndex = findCard(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.CARD, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            // eslint-disable-next-line no-shadow\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveCard(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findCard(id);\n                moveCard(draggedId, overIndex);\n            }\n        }\n    });\n\n    const opacity = isDragging ? 0.5 : 1;\n    return (\n        <div\n            data-testid=\"sortingItem\"\n            ref={(node) => drag(drop(node))}\n            style={{ ...style, opacity }}\n        >\n            {text}\n        </div>\n    );\n};\n\nCard.propTypes = {\n    id: PropTypes.any,\n    text: PropTypes.any,\n    moveCard: PropTypes.any,\n    findCard: PropTypes.any\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport Card from \"./SortItem\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortingList = (props) => {\n    const { sortsArray } = props;\n    const [cards, setCards] = useState([...sortsArray]);\n\n    const findCard = (id) => {\n        const card = cards.filter((c) => `${c.id}` === id)[0];\n        return {\n            card,\n            index: cards.indexOf(card)\n        };\n    };\n\n    const moveCard = (id, atIndex) => {\n        const { card, index } = findCard(id);\n        setCards(\n            update(cards, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, card]\n                ]\n            })\n        );\n\n        const values = [];\n        let temp = [];\n        temp = update(cards, {\n            $splice: [\n                [index, 1],\n                [atIndex, 0, card]\n            ]\n        });\n        temp.forEach((item) => {\n            values.push(item.id);\n        });\n        props.handleReorderListOfSort(values);\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n    React.useEffect(() => {\n        setCards(props.sortsArray);\n    }, [sortsArray]);\n\n    return (\n        <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            {cards.map((card) => (\n                <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    moveCard={moveCard}\n                    findCard={findCard}\n                />\n            ))}\n        </div>\n    );\n};\n\nSortingList.propTypes = {\n    sortsArray: PropTypes.any,\n    handleReorderListOfSort: PropTypes.any\n};\n\nexport default SortingList;\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport SortingList from \"./SortingList\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\nimport { ReactComponent as IconNav } from \"../../images/icon-nav.svg\";\nimport { ReactComponent as SortCopy } from \"../../images/SortCopy.svg\";\nimport { ReactComponent as SortDelete } from \"../../images/SortDelete.svg\";\n\nconst HTML5toTouch = {\n    backends: [\n        {\n            backend: HTML5Backend\n        },\n        {\n            backend: TouchBackend,\n            options: { enableMouseEvents: true },\n            preview: true,\n            transition: TouchTransition\n        }\n    ]\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        const { sortingParamsObjectList } = this.props;\n        this.state = {\n            rowList: [true],\n            sortingOrderList:\n                sortingParamsObjectList === undefined\n                    ? []\n                    : sortingParamsObjectList,\n            errorMessage: false\n        };\n    }\n\n    add = () => {\n        const { rowList, sortingOrderList } = this.state;\n        const { columnFieldValue } = this.props;\n        const rowLists = [...rowList];\n        rowLists.push(true);\n        const existingSortingOrderList = sortingOrderList;\n        existingSortingOrderList.push({\n            sortBy: columnFieldValue[0],\n            order: \"Ascending\",\n            sortOn: \"Value\"\n        });\n        this.setState({\n            rowList: rowLists,\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    copy = (i) => {\n        const { sortingOrderList } = this.state;\n        const rowList = [...sortingOrderList];\n        rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n        this.setState({ sortingOrderList: rowList });\n    };\n\n    clearAll = () => {\n        const { clearAllSortingParams } = this.props;\n        this.setState({\n            sortingOrderList: [],\n            errorMessage: false\n        });\n        clearAllSortingParams();\n    };\n\n    remove = (i) => {\n        const { sortingOrderList } = this.state;\n        const sortingOrderLists = [...sortingOrderList];\n        sortingOrderLists.splice(i, 1);\n        this.setState({ sortingOrderList: sortingOrderLists });\n        if (sortingOrderList.length <= 1) {\n            this.setState({ errorMessage: false });\n        }\n    };\n\n    createColumnsArrayFromProps = (rowsValue) => {\n        const { columnFieldValue } = this.props;\n        return rowsValue.map((row, index) => {\n            return {\n                id: index,\n                text: (\n                    <div className=\"sort__bodyContent\" key={row}>\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div className=\"sort__icon\">\n                                <i>\n                                    <IconNav />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort by</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectSortingField\"\n                                    className=\"custom__ctrl\"\n                                    name=\"sortBy\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortBy\"\n                                        )\n                                    }\n                                    value={row.sortBy}\n                                >\n                                    {columnFieldValue.map((item) => (\n                                        <option key={item}>{item}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Sort on</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    className=\"custom__ctrl\"\n                                    name=\"sortOn\"\n                                    data-testid=\"selectingValue\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"sortOn\"\n                                        )\n                                    }\n                                    value={row.sortOn}\n                                >\n                                    <option>Value</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>Order</div>\n                            </div>\n\n                            <div className=\"sort__file\">\n                                <select\n                                    data-testid=\"selectOrder\"\n                                    className=\"custom__ctrl\"\n                                    name=\"order\"\n                                    onChange={(e) =>\n                                        this.captureSortingFeildValues(\n                                            e,\n                                            index,\n                                            \"order\"\n                                        )\n                                    }\n                                    value={row.order}\n                                >\n                                    <option>Ascending</option>\n                                    <option>Descending</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"copySort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.copy(index)}\n                            >\n                                <SortCopy />\n                            </div>\n                        </div>\n\n                        <div className=\"sort__reorder\">\n                            <div className=\"\">\n                                <div>&nbsp;</div>\n                            </div>\n\n                            <div\n                                data-testid=\"removeSort\"\n                                role=\"presentation\"\n                                className=\"sort__icon\"\n                                onClick={() => this.remove(index)}\n                            >\n                                <SortDelete />\n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n        });\n    };\n\n    captureSortingFeildValues = (event, index, sortingKey) => {\n        const { sortingOrderList } = this.state;\n        const existingSortingOrderList = sortingOrderList;\n\n        if (sortingKey === \"sortBy\") {\n            existingSortingOrderList[index].sortBy = event.target.value;\n        }\n        if (sortingKey === \"order\") {\n            existingSortingOrderList[index].order = event.target.value;\n        }\n        if (\n            existingSortingOrderList[index].sortOn === \"\" ||\n            existingSortingOrderList[index].sortOn === undefined\n        ) {\n            existingSortingOrderList[index].sortOn = \"Value\";\n        }\n        this.setState({\n            sortingOrderList: existingSortingOrderList\n        });\n    };\n\n    updateTableAsPerSortCondition = () => {\n        const { sortingOrderList } = this.state;\n        const unique = new Set();\n        const showError = sortingOrderList.some(\n            (element) => unique.size === unique.add(element.sortBy).size\n        );\n        const { setTableAsPerSortingParams } = this.props;\n        if (showError) {\n            this.setState({ errorMessage: true });\n        } else {\n            this.setState({ errorMessage: false });\n            setTableAsPerSortingParams(sortingOrderList);\n        }\n    };\n\n    /**\n     *\n     * @param {*} reOrderedSortingList\n     */\n    handleReorderListOfSort = (reOrderedIndexList) => {\n        const { handleTableSortSwap } = this.props;\n        handleTableSortSwap(reOrderedIndexList);\n    };\n\n    handleClick = () => {\n        const { closeSorting } = this.props;\n        closeSorting();\n    };\n\n    render() {\n        const { sortingOrderList, errorMessage } = this.state;\n        const { closeSorting } = this.props;\n        return (\n            <ClickAwayListener onClickAway={this.handleClick}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    role=\"presentation\"\n                                    data-testid=\"closeSorting\"\n                                    onClick={() => closeSorting()}\n                                >\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    handleReorderListOfSort={\n                                        this.handleReorderListOfSort\n                                    }\n                                    sortsArray={this.createColumnsArrayFromProps(\n                                        sortingOrderList\n                                    )}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {errorMessage ? (\n                                <span className=\"alert alert-danger\">\n                                    Sort by opted are same, Please choose\n                                    different one.\n                                </span>\n                            ) : (\n                                \"\"\n                            )}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                role=\"presentation\"\n                                className=\"sort__section\"\n                                data-testid=\"addSort\"\n                                onClick={() => this.add()}\n                                onKeyDown={() => this.add()}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={this.clearAll}\n                                >\n                                    Clear All\n                                </button>\n\n                                <button\n                                    data-testid=\"applySort\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() =>\n                                        this.updateTableAsPerSortCondition()\n                                    }\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nApp.propTypes = {\n    sortingParamsObjectList: PropTypes.any,\n    closeSorting: PropTypes.any,\n    columnFieldValue: PropTypes.any,\n    clearAllSortingParams: PropTypes.any,\n    setTableAsPerSortingParams: PropTypes.any,\n    handleTableSortSwap: PropTypes.any\n};\n\nexport default App;\n","import React from \"react\";\nimport JsPdf from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as XLSX from \"xlsx\";\nimport PropTypes from \"prop-types\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport { ReactComponent as IconCsv } from \"../../images/icon-csv.svg\";\nimport { ReactComponent as IconExcel } from \"../../images/icon-excel.svg\";\nimport { ReactComponent as IconPdf } from \"../../images/icon-pdf.svg\";\nimport { ReactComponent as IconClose } from \"../../images/icon-close.svg\";\n\nclass ExportData extends React.Component {\n    constructor(props) {\n        super(props);\n        const { columnsList } = this.props;\n        this.state = {\n            columnValueList: columnsList,\n            columnEntityList: columnsList,\n            isAllSelected: true,\n            downLaodFileType: [],\n            // eslint-disable-next-line react/no-unused-state\n            warning: \"\",\n            clickTag: \"none\"\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.selectDownLoadType = this.selectDownLoadType.bind(this);\n        this.exportValidation = this.exportValidation.bind(this);\n    }\n\n    resetColumnExportList = () => {\n        this.setState({\n            columnEntityList: [],\n            isAllSelected: false\n        });\n    };\n\n    selectAllToColumnList = () => {\n        const { isAllSelected } = this.state;\n        const { columnsList } = this.props;\n        this.resetColumnExportList();\n        this.setState({\n            columnEntityList: !isAllSelected ? columnsList : [],\n            isAllSelected: !isAllSelected\n        });\n    };\n\n    addToColumnEntityList = (typeToBeAdded) => {\n        const { columnEntityList } = this.state;\n        let existingColumnEntityList = columnEntityList;\n        if (!existingColumnEntityList.includes(typeToBeAdded)) {\n            existingColumnEntityList.push(typeToBeAdded);\n        } else {\n            existingColumnEntityList = existingColumnEntityList.filter(\n                (item) => {\n                    return item !== typeToBeAdded;\n                }\n            );\n        }\n        this.setState({\n            columnEntityList: existingColumnEntityList,\n            isAllSelected: false\n        });\n    };\n\n    selectDownLoadType = (event) => {\n        // eslint-disable-next-line no-shadow\n        let { downLaodFileType } = this.state;\n        if (\n            event.target.checked &&\n            !downLaodFileType.includes(event.target.value)\n        ) {\n            downLaodFileType.push(event.target.value);\n            this.setState({ downLaodFileType });\n        } else {\n            downLaodFileType.forEach(function (value, index) {\n                if (value === event.target.value) {\n                    downLaodFileType = downLaodFileType.splice(index, value);\n                }\n            });\n            this.setState({ downLaodFileType });\n        }\n    };\n\n    exportRowData = () => {\n        // eslint-disable-next-line no-shadow\n        const { columnEntityList, downLaodFileType } = this.state;\n        const columnValueList = columnEntityList;\n        const filteredRow = [];\n        const filteredRowValues = [];\n        const filteredRowHeader = [];\n\n        if (columnValueList.length > 0 && downLaodFileType.length > 0) {\n            const { rows } = this.props;\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\n            rows.forEach((row, index) => {\n                const filteredColumnVal = {};\n                const rowFilteredValues = [];\n                const rowFilteredHeader = [];\n                columnValueList.forEach((columnName) => {\n                    const { key, name } = columnName;\n                    filteredColumnVal[name] = row[key];\n                    rowFilteredValues.push(row[key]);\n                    rowFilteredHeader.push(name);\n                });\n                filteredRow.push(filteredColumnVal);\n                filteredRowValues.push(rowFilteredValues);\n                if (rowLength === index + 1)\n                    filteredRowHeader.push(rowFilteredHeader);\n            });\n\n            downLaodFileType.forEach((item) => {\n                if (item === \"pdf\") {\n                    this.downloadPDF(filteredRowValues, filteredRowHeader);\n                } else if (item === \"excel\") {\n                    this.downloadXLSFile(filteredRow);\n                } else {\n                    this.downloadCSVFile(filteredRow);\n                }\n            });\n        }\n    };\n\n    downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\n        const unit = \"pt\";\n        const size = \"A4\"; // Use A1, A2, A3 or A4\n        const orientation = \"landscape\"; // portrait or landscape\n\n        const doc = new JsPdf(orientation, unit, size);\n\n        doc.setFontSize(12);\n        const title = \"iCargo Neo Report\";\n\n        const content = {\n            startY: 50,\n            head: rowFilteredHeader,\n            body: rowFilteredValues,\n            tableWidth: \"wrap\", // 'auto'|'wrap'|'number'\n            headStyles: { fillColor: [102, 102, 255] },\n            theme: \"grid\", // 'striped'|'grid'|'plain'|'css'\n            margin: { top: 30, right: 30, bottom: 10, left: 30 }\n        };\n\n        doc.text(title, 30, 40);\n        doc.autoTable(content);\n        doc.save(\"iCargo Neo Report.pdf\");\n    };\n\n    downloadCSVFile = async (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".csv\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        const href = await URL.createObjectURL(data);\n        const link = document.createElement(\"a\");\n        link.href = href;\n        link.download = fileName + fileExtension;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    downloadXLSFile = async (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".xlsx\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        const href = await URL.createObjectURL(data);\n        const link = document.createElement(\"a\");\n        link.href = href;\n        link.download = fileName + fileExtension;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    exportValidation = () => {\n        // eslint-disable-next-line no-shadow\n        const { columnEntityList, downLaodFileType } = this.state;\n        const columnLength = columnEntityList.length;\n        const fileLength = downLaodFileType.length;\n        if (columnLength > 0 && fileLength > 0) {\n            this.exportRowData();\n            this.setState({ clickTag: \"none\" });\n        } else if (columnLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"Column\" });\n            this.setState({ clickTag: \"\" });\n        } else if (fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type\" });\n            this.setState({ clickTag: \"\" });\n        }\n        if (columnLength === 0 && fileLength === 0) {\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ warning: \"File Type & Column\" });\n            this.setState({ clickTag: \"\" });\n        }\n    };\n\n    handleClick() {\n        const { closeExport } = this.props;\n        closeExport();\n    }\n\n    render() {\n        const {\n            isAllSelected,\n            columnValueList,\n            columnEntityList,\n            clickTag\n        } = this.state;\n        const { closeExport } = this.props;\n        return (\n            <ClickAwayListener\n                onClickAway={this.handleClick}\n                className=\"neo-popover neo-popover--exports exports--grid\"\n            >\n                <div className=\"neo-popover__export export__grid\">\n                    <div className=\"export__chooser\">\n                        <div className=\"export__header\">\n                            <div className=\"\">\n                                <strong>Export Data</strong>\n                            </div>\n                        </div>\n                        <div className=\"export__body\">\n                            <div>\n                                <input\n                                    data-testid=\"searchExport\"\n                                    type=\"text\"\n                                    placeholder=\"Search export\"\n                                    className=\"custom__ctrl\"\n                                    onChange={this.columnSearchLogic}\n                                />\n                            </div>\n                            <div className=\"export__wrap export__headertxt\">\n                                <div className=\"export__checkbox\">\n                                    <input\n                                        data-testid=\"selectColumns\"\n                                        className=\"selectColumn\"\n                                        type=\"checkbox\"\n                                        onChange={() =>\n                                            this.selectAllToColumnList()\n                                        }\n                                        checked={isAllSelected}\n                                    />\n                                </div>\n                                <div className=\"export__txt\">Select All</div>\n                            </div>\n                            {columnValueList && columnValueList.length > 0\n                                ? columnValueList.map((column) => {\n                                      return (\n                                          <div\n                                              className=\"export__wrap\"\n                                              key={column.key}\n                                          >\n                                              <div className=\"export__checkbox\">\n                                                  <input\n                                                      data-testid=\"addToColumn\"\n                                                      type=\"checkbox\"\n                                                      checked={columnEntityList.includes(\n                                                          column\n                                                      )}\n                                                      onChange={() =>\n                                                          this.addToColumnEntityList(\n                                                              column\n                                                          )\n                                                      }\n                                                  />\n                                              </div>\n                                              <div className=\"export__txt\">\n                                                  {column.name}\n                                              </div>\n                                          </div>\n                                      );\n                                  })\n                                : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"export__settings\">\n                        <div className=\"export__header\">\n                            <div className=\"export__headerTxt\" />\n                            <div className=\"export__close\">\n                                <i role=\"presentation\" onClick={closeExport}>\n                                    <IconClose />\n                                </i>\n                            </div>\n                        </div>\n                        <div className=\"export__as\">Export as</div>\n                        <div className=\"export__body\">\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        data-testid=\"addpdfDownloadType\"\n                                        type=\"checkbox\"\n                                        name=\"pdf\"\n                                        value=\"pdf\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconPdf />\n                                    </i>\n                                    <strong>PDF</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"excel\"\n                                        value=\"excel\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconExcel />\n                                    </i>\n                                    <strong>Excel</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__reorder\">\n                                <div className=\"check-wrap\">\n                                    <input\n                                        type=\"checkbox\"\n                                        name=\"csv\"\n                                        value=\"csv\"\n                                        onChange={this.selectDownLoadType}\n                                    />\n                                </div>\n                                <div className=\"export__file\">\n                                    <i>\n                                        <IconCsv />\n                                    </i>\n\n                                    <strong>CSV</strong>\n                                </div>\n                            </div>\n                            <div className=\"exportWarning\">\n                                <span style={{ display: clickTag }}>\n                                    <strong>\n                                        Select at least one file type\n                                    </strong>\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"export__footer\">\n                            <div className=\"export__btns\">\n                                <button\n                                    data-testid=\"closeExport\"\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={() => closeExport()}\n                                >\n                                    Cancel\n                                </button>\n                                <button\n                                    data-testid=\"exportValidationClick\"\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={() => {\n                                        this.exportValidation();\n                                    }}\n                                >\n                                    Export\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n}\n\nExportData.propTypes = {\n    columnsList: PropTypes.any,\n    closeExport: PropTypes.any,\n    rows: PropTypes.any\n};\n\nexport default ExportData;\n","export default function FormulaProcessor(expression) {\n    let columnArray = [];\n    if (expression.match(/^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$/g)) {\n        console.log(\n            expression.match(/^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$/g)\n        );\n        const RegCode = /^=sum\\((?<one>.\\w*?),(?<more>(.\\w*?)*?)\\)$$/g;\n        const exp = RegCode.exec(expression);\n        const parameter1 = exp.groups.one;\n        const parameter2 = exp.groups.more;\n        if (parameter1.match(/^(c\\d*?)$/i)) {\n            const RegCode1 = /^c(?<column>\\d*?)$/g;\n            const exper1 = RegCode1.exec(parameter1);\n            columnArray.push(Number(exper1.groups.column));\n        }\n        if (parameter2.length > 1) {\n            const moreParameters = parameter2.split(\",\");\n            moreParameters.forEach((item) => {\n                if (item.match(/^(c\\d*?)$/i)) {\n                    const RegCodes = /^c(?<column>\\d*?)$/g;\n                    const expers = RegCodes.exec(item);\n                    columnArray.push(Number(expers.groups.column));\n                }\n            });\n        } else {\n            if (parameter2.match(/^(c\\d*?)$/i)) {\n                const RegCode2 = /^c(?<column>\\d*?)$/g;\n                const exper2 = RegCode2.exec(parameter2);\n                columnArray.push(Number(exper2.groups.column));\n            }\n        }\n    }\n\n    if (columnArray.length > 1) {\n        console.log(columnArray);\n        return columnArray;\n    } else return [];\n}\n","import React, { Component } from \"react\";\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport PropTypes from \"prop-types\";\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport DatePicker from \"./functions/DatePicker\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\nimport { ReactComponent as IconColumns } from \"./images/icon-columns.svg\";\r\nimport { ReactComponent as IconShare } from \"./images/icon-share.svg\";\r\nimport { ReactComponent as IconGroupSort } from \"./images/icon-group-sort.svg\";\r\nimport { ReactComponent as IconSearch } from \"./images/icon-search.svg\";\r\nimport FormulaProcessor from \"./functions/FormulaProcessor\";\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\r\n\r\nconst { DropDownEditor } = Editors;\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nlet sortBy;\r\n(() => {\r\n    // utility functions\r\n    const defaultCmp = (a, b) => {\r\n        if (a === b) return 0;\r\n        return a < b ? -1 : 1;\r\n    };\r\n    const getCmpFunc = (primer, reverse) => {\r\n        let cmp = defaultCmp;\r\n        if (primer) {\r\n            cmp = (a, b) => {\r\n                return defaultCmp(primer(a), primer(b));\r\n            };\r\n        }\r\n        if (reverse) {\r\n            return (a, b) => {\r\n                return -1 * cmp(a, b);\r\n            };\r\n        }\r\n        return cmp;\r\n    };\r\n\r\n    // actual implementation\r\n    sortBy = function () {\r\n        const fields = [];\r\n        const nFields = arguments.length;\r\n        let field;\r\n        let name;\r\n        let cmp;\r\n\r\n        // preprocess sorting options\r\n        for (let i = 0; i < nFields; i++) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            field = arguments[i];\r\n            if (typeof field === \"string\") {\r\n                name = field;\r\n                cmp = defaultCmp;\r\n            } else {\r\n                name = field.name;\r\n                cmp = getCmpFunc(field.primer, field.reverse);\r\n            }\r\n            fields.push({\r\n                name,\r\n                cmp\r\n            });\r\n        }\r\n\r\n        return function (A, B) {\r\n            let result = 0;\r\n            for (let i = 0, l = nFields; i < l; i++) {\r\n                field = fields[i];\r\n                name = field.name;\r\n                cmp = field.cmp;\r\n\r\n                result = cmp(A[name], B[name]);\r\n                if (result !== 0) break;\r\n            }\r\n            return result;\r\n        };\r\n    };\r\n})();\r\n\r\nclass Spreadsheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { dataSet, pageSize, rows, columns } = this.props;\r\n        const dataSetVar = JSON.parse(JSON.stringify(dataSet));\r\n        this.state = {\r\n            warningStatus: \"\",\r\n            height: 680,\r\n            searchValue: \"\",\r\n            sortColumn: \"\",\r\n            sortDirection: \"NONE\",\r\n            pageRowCount: pageSize,\r\n            pageIndex: 1,\r\n            dataSet: dataSetVar,\r\n            subDataSet: [],\r\n            rows: dataSetVar ? dataSetVar.slice(0, 500) : [],\r\n            selectedIndexes: [],\r\n            junk: {},\r\n            columnReorderingComponent: null,\r\n            exportComponent: null,\r\n            filteringRows: rows,\r\n            tempRows: rows,\r\n            sortingPanelComponent: null,\r\n            count: rows.length,\r\n            sortingOrderSwapList: [],\r\n            sortingParamsObjectList: [],\r\n            // eslint-disable-next-line react/no-unused-state\r\n            pinnedReorder: false,\r\n            columns: columns.map((item) => {\r\n                const colItem = item;\r\n                if (colItem.editor === \"DatePicker\") {\r\n                    colItem.editor = DatePicker;\r\n                } else if (\r\n                    colItem.editor === \"DropDown\" &&\r\n                    colItem.dataSource\r\n                ) {\r\n                    colItem.editor = (\r\n                        <DropDownEditor options={colItem.dataSource} />\r\n                    );\r\n                } else if (colItem.editor === \"Text\") {\r\n                    colItem.editor = \"text\";\r\n                } else {\r\n                    colItem.editor = null;\r\n                }\r\n                if (colItem.filterType === \"numeric\") {\r\n                    colItem.filterRenderer = NumericFilter;\r\n                } else {\r\n                    colItem.filterRenderer = AutoCompleteFilter;\r\n                }\r\n                return colItem;\r\n            })\r\n        };\r\n        // document.addEventListener(\"copy\", this.handleCopy);\r\n        // document.addEventListener(\"paste\", this.handlePaste);\r\n        this.handleSearchValue = this.handleSearchValue.bind(this);\r\n        this.clearSearchValue = this.clearSearchValue.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n        this.formulaAppliedCols = columns.filter((item) => {\r\n            return item.formulaApplicable;\r\n        });\r\n    }\r\n\r\n    // updateRows = (startIdx, newRows) => {\r\n    //   this.setState((state) => {\r\n    //     const rows = state.rows.slice();\r\n    //     for (let i = 0; i < newRows.length; i++) {\r\n    //       if (startIdx + i < rows.length) {\r\n    //         rows[startIdx + i] = {\r\n    //           ...rows[startIdx + i],\r\n    //           ...newRows[i],\r\n    //         };\r\n    //       }\r\n    //     }\r\n    //     return {\r\n    //       rows,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n    // rowGetter = (i) => {\r\n    // console.log(i)\r\n    //   const { rows } = this.state;\r\n    //   return rows[i];\r\n    // };\r\n\r\n    // handleCopy = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft, botRight } = this.state;\r\n    //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n    //     .map((rowIdx) =>\r\n    //       this.state.columns\r\n    //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n    //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n    //         .join(\"\\t\")\r\n    //     )\r\n    //     .join(\"\\n\");\r\n    //   e.clipboardData.setData(\"text/plain\", text);\r\n    // };\r\n\r\n    // handlePaste = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft } = this.state;\r\n    //   const newRows = [];\r\n    //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n    //   pasteData.forEach((row) => {\r\n    //     const rowData = {};\r\n    //     // Merge the values from pasting and the keys from the columns\r\n    //     this.state.columns\r\n    //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n    //       .forEach((col, j) => {\r\n    //         rowData[col.key] = row[j];\r\n    //       });\r\n    //     newRows.push(rowData);\r\n    //   });\r\n    //   this.updateRows(topLeft.rowIdx, newRows);\r\n    // };\r\n\r\n    // setSelection = (args) => {\r\n    //   this.setState({\r\n    //     topLeft: {\r\n    //       rowIdx: args.topLeft.rowIdx,\r\n    //       colIdx: args.topLeft.idx,\r\n    //     },\r\n    //     botRight: {\r\n    //       rowIdx: args.bottomRight.rowIdx,\r\n    //       colIdx: args.bottomRight.idx,\r\n    //     },\r\n    //   });\r\n    // };\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(props) {\r\n        this.setState({\r\n            rows: props.rows,\r\n            count: props.count,\r\n            warningStatus: props.status\r\n        });\r\n    }\r\n\r\n    setStateAsync(stateObj) {\r\n        return new Promise((resolve) => {\r\n            this.setState(stateObj, resolve);\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n        const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n        resizeEvent.initEvent(\"resize\", true, false);\r\n        window.dispatchEvent(resizeEvent);\r\n    }\r\n\r\n    /**\r\n     * Method To render the filter values for filtering rows\r\n     * @param {*} rows is the row data to be considered for filtering\r\n     * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n     */\r\n    getValidFilterValues(rows, columnId) {\r\n        this.setState({ selectedIndexes: [] });\r\n        return rows\r\n            .map((r) => r[columnId])\r\n            .filter((item, i, a) => {\r\n                return i === a.indexOf(item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method To swap the columns\r\n     * @param {*} source is source column\r\n     * @param {*} target is the target column\r\n     */\r\n    // onHeaderDrop = (source, target) => {\r\n    //   const stateCopy = Object.assign({}, this.state);\r\n    //   const columnSourceIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === source\r\n    //   );\r\n    //   const columnTargetIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === target\r\n    //   );\r\n\r\n    //   stateCopy.columns.splice(\r\n    //     columnTargetIndex,\r\n    //     0,\r\n    //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n    //   );\r\n\r\n    //   const emptyColumns = Object.assign({}, this.state, {\r\n    //     columns: [],\r\n    //   });\r\n    //   this.setState(emptyColumns);\r\n\r\n    //   const reorderedColumns = Object.assign({}, this.state, {\r\n    //     columns: stateCopy.columns,\r\n    //   });\r\n    //   this.setState(reorderedColumns);\r\n    // };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    handleTableSortSwap = (reorderedSwap) => {\r\n        swapSortList = reorderedSwap;\r\n    };\r\n\r\n    updateTableAsPerRowChooser = (\r\n        inComingColumnsHeaderList,\r\n        pinnedColumnsList\r\n    ) => {\r\n        const { columns } = this.props;\r\n        let existingColumnsHeaderList = columns;\r\n        existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n            return inComingColumnsHeaderList.includes(item.name);\r\n        });\r\n        let rePositionedArray = existingColumnsHeaderList;\r\n        let singleHeaderOneList;\r\n        if (pinnedColumnsList.length > 0) {\r\n            pinnedColumnsList\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((item, index) => {\r\n                    singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                        (subItem) => item === subItem.name\r\n                    );\r\n                    rePositionedArray = this.arrayMove(\r\n                        existingColumnsHeaderList,\r\n                        existingColumnsHeaderList.indexOf(\r\n                            singleHeaderOneList[0]\r\n                        ),\r\n                        index\r\n                    );\r\n                });\r\n        }\r\n        if (swapList.length > 0) {\r\n            swapList.slice(0).forEach((item, index) => {\r\n                singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                    (subItem) => {\r\n                        return item === subItem.name;\r\n                    }\r\n                );\r\n                rePositionedArray = this.arrayMove(\r\n                    existingColumnsHeaderList,\r\n                    existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n                    index\r\n                );\r\n            });\r\n        }\r\n\r\n        existingColumnsHeaderList = rePositionedArray;\r\n        /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n        existingColumnsHeaderList.forEach((headerItem, index) => {\r\n            if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n                existingColumnsHeaderList[index].frozen = false;\r\n            }\r\n            if (pinnedColumnsList.includes(headerItem.name)) {\r\n                existingColumnsHeaderList[index].frozen = true;\r\n            }\r\n        });\r\n\r\n        const toTop = (key, value) => (a, b) =>\r\n            (b[key] === value) - (a[key] === value);\r\n        existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n        this.setState({\r\n            columns: existingColumnsHeaderList\r\n        });\r\n\r\n        const tempList = [];\r\n        existingColumnsHeaderList.forEach((item) => {\r\n            tempList.push(item.name);\r\n        });\r\n\r\n        if (swapList.length > 0) {\r\n            for (let i = 0; i < tempList.length; i++) {\r\n                if (tempList[i] === swapList[i])\r\n                    // eslint-disable-next-line react/no-unused-state\r\n                    this.setState({ pinnedReorder: true });\r\n            }\r\n        }\r\n        this.closeColumnReOrdering();\r\n        swapList = [];\r\n        // eslint-disable-next-line react/no-unused-state\r\n        this.setState({ pinnedReorder: false });\r\n    };\r\n\r\n    /**\r\n     * Method To re-position a particular object in an Array from oldIndex to newIndex\r\n     * @param {*} arr inComing array\r\n     * @param {*} oldIndex initial index\r\n     * @param {*} newIndex final index\r\n     */\r\n    arrayMove = (arr, oldIndex, newIndex) => {\r\n        if (newIndex >= arr.length) {\r\n            let k = newIndex - arr.length + 1;\r\n            while (k--) {\r\n                arr.push(undefined);\r\n            }\r\n        }\r\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Method to render the column Selector Pannel\r\n     */\r\n    columnReorderingPannel = () => {\r\n        const { columns } = this.state;\r\n        const { maxLeftPinnedColumn } = this.props;\r\n        this.setState({ selectedIndexes: [] });\r\n        const headerNameList = [];\r\n        const existingPinnedHeadersList = [];\r\n        columns\r\n            .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n            .map((item) => existingPinnedHeadersList.push(item.name));\r\n        columns.map((item) => headerNameList.push(item.name));\r\n        this.setState({\r\n            columnReorderingComponent: (\r\n                <ColumnReordering\r\n                    maxLeftPinnedColumn={maxLeftPinnedColumn}\r\n                    updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n                    headerKeys={headerNameList}\r\n                    closeColumnReOrdering={this.closeColumnReOrdering}\r\n                    existingPinnedHeadersList={existingPinnedHeadersList}\r\n                    handleheaderNameList={this.handleheaderNameList}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to stop the render the column Selector Pannel\r\n     */\r\n    closeColumnReOrdering = () => {\r\n        this.setState({\r\n            columnReorderingComponent: null\r\n        });\r\n    };\r\n\r\n    handleSearchValue = (value) => {\r\n        this.setState({ searchValue: value });\r\n    };\r\n\r\n    clearSearchValue = () => {\r\n        const { filteringRows } = this.state;\r\n        this.setState({ searchValue: \"\" });\r\n        this.setState({ filteringRows });\r\n    };\r\n\r\n    sortingPanel = () => {\r\n        const { columns, sortingParamsObjectList } = this.state;\r\n        this.setState({ selectedIndexes: [] });\r\n        const columnField = [];\r\n        columns.map((item) => columnField.push(item.name));\r\n        this.setState({\r\n            sortingPanelComponent: (\r\n                <Sorting\r\n                    setTableAsPerSortingParams={(args) =>\r\n                        this.setTableAsPerSortingParams(args)\r\n                    }\r\n                    sortingParamsObjectList={sortingParamsObjectList}\r\n                    handleTableSortSwap={this.handleTableSortSwap}\r\n                    clearAllSortingParams={this.clearAllSortingParams}\r\n                    columnFieldValue={columnField}\r\n                    closeSorting={this.closeSorting}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeSorting = () => {\r\n        this.setState({\r\n            sortingPanelComponent: null,\r\n            sortingOrderSwapList: []\r\n        });\r\n        swapSortList = [];\r\n    };\r\n\r\n    clearAllSortingParams = () => {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        let dataRows = this.getFilterResult([...dataSet]);\r\n        if (searchValue !== \"\") {\r\n            const searchKey = String(searchValue).toLowerCase();\r\n            dataRows = dataRows.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        if (hasSingleSortkey) {\r\n            dataRows = this.getSingleSortResult(dataRows);\r\n        }\r\n        this.setState({\r\n            rows: dataRows.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: dataRows\r\n        });\r\n    };\r\n\r\n    // Export Data Logic\r\n    exportColumnData = () => {\r\n        const { columns, dataSet, subDataSet } = this.state;\r\n        let exportData = dataSet;\r\n        if (this.isSubset()) {\r\n            exportData = subDataSet;\r\n        }\r\n        this.setState({ selectedIndexes: [] });\r\n        this.setState({\r\n            exportComponent: (\r\n                <ExportData\r\n                    rows={exportData}\r\n                    columnsList={columns}\r\n                    closeExport={this.closeExport}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeExport = () => {\r\n        this.setState({\r\n            exportComponent: null\r\n        });\r\n    };\r\n\r\n    setTableAsPerSortingParams = (tableSortList) => {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            subDataSet,\r\n            junk,\r\n            rows,\r\n            sortingOrderSwapList,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSearchKey = String(searchValue).toLowerCase() !== \"\";\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        let existingRows = [...dataSet];\r\n        if (hasFilter || hasSearchKey || hasSingleSortkey) {\r\n            existingRows = [...subDataSet];\r\n        }\r\n\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        existingRows.sort(sortBy(...sortingOrderNameList));\r\n        this.setState({\r\n            rows: existingRows.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: existingRows,\r\n            sortingParamsObjectList: tableSortList\r\n        });\r\n\r\n        this.closeSorting();\r\n    };\r\n\r\n    // Group sort - while updating conditions like search, filter or sorting; copy of setTableAsPerSortingParams.\r\n    groupSort = (tableSortList, existingRows) => {\r\n        const { rows, sortingOrderSwapList } = this.state;\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        return existingRows.sort(sortBy(...sortingOrderNameList));\r\n    };\r\n\r\n    toCamelCase = (str) => {\r\n        return str\r\n            .replace(/\\s(.)/g, function ($1) {\r\n                return $1.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, \"\")\r\n            .replace(/^(.)/, function ($1) {\r\n                return $1.toLowerCase();\r\n            });\r\n    };\r\n\r\n    getSearchRecords(e) {\r\n        const {\r\n            sortDirection,\r\n            sortColumn,\r\n            dataSet,\r\n            searchValue,\r\n            subDataSet,\r\n            junk,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n        let rowsToSearch = [];\r\n        // Remove search key\r\n        if (searchValue.startsWith(searchKey) || searchKey === \"\") {\r\n            rowsToSearch = this.getFilterResult([...dataSet]);\r\n            if (hasSingleSortkey) {\r\n                rowsToSearch = this.getSingleSortResult(rowsToSearch);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                rowsToSearch = this.groupSort(\r\n                    sortingParamsObjectList,\r\n                    rowsToSearch\r\n                );\r\n            }\r\n            return rowsToSearch;\r\n        }\r\n        // Set search key\r\n\r\n        if (\r\n            hasFilter ||\r\n            hasSingleSortkey ||\r\n            searchKey.length > 1 ||\r\n            hasGropSortKeys\r\n        )\r\n            return subDataSet;\r\n        return dataSet;\r\n    }\r\n\r\n    /**\r\n     * Method To dynamically swap the column from column chooser\r\n     * @param {*} reordered is the swapped array of columns\r\n     */\r\n    handleheaderNameList = (reordered) => {\r\n        swapList = reordered;\r\n    };\r\n\r\n    getSingleSortResult = (data) => {\r\n        const { sortDirection, sortColumn } = this.state;\r\n        if (sortDirection !== \"NONE\" && sortColumn !== \"\") {\r\n            const sortColumns = sortColumn;\r\n            const sortDirections = sortDirection;\r\n            this.setState({ selectedIndexes: [] });\r\n            const comparer = (a, b) => {\r\n                if (sortDirection === \"ASC\") {\r\n                    return a[sortColumns] > b[sortColumns] ? 1 : -1;\r\n                }\r\n                if (sortDirection === \"DESC\") {\r\n                    return a[sortColumns] < b[sortColumns] ? 1 : -1;\r\n                }\r\n                return 0;\r\n            };\r\n            return sortDirections === \"NONE\" ? data : [...data].sort(comparer);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Method To sort the rows for a particular column\r\n     * @param {*} data is the row datas to be considered for sorting\r\n     * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n     * @param {*} sortDirection is the type of sort\r\n     */\r\n    sortRows = (data, sortColumn, sortDirection) => {\r\n        const {\r\n            junk,\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            dataSet,\r\n            subDataSet,\r\n            pageIndex,\r\n            pageRowCount,\r\n            rows\r\n        } = this.state;\r\n        this.setState({ selectedIndexes: [] });\r\n        // eslint-disable-next-line consistent-return\r\n        const comparer = (a, b) => {\r\n            if (sortDirection === \"ASC\") {\r\n                return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n            }\r\n            if (sortDirection === \"DESC\") {\r\n                return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n            }\r\n        };\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const hasSearchKey = String(searchValue).toLowerCase() !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n        let dtRows = [];\r\n        if (hasFilter || hasSearchKey || hasGropSortKeys) {\r\n            dtRows = subDataSet;\r\n        } else {\r\n            dtRows = dataSet;\r\n        }\r\n        const result = [...dtRows].sort(comparer);\r\n        this.setState({\r\n            rows: result.slice(0, pageIndex * pageRowCount),\r\n            subDataSet: result,\r\n            selectedIndexes: [],\r\n            sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n            sortDirection\r\n        });\r\n        return sortDirection === \"NONE\" ? data : rows;\r\n    };\r\n\r\n    getSlicedRows = async (filters, rowsToSplit, firstResult) => {\r\n        const {\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            pageIndex,\r\n            pageRowCount\r\n        } = this.state;\r\n        let data = [];\r\n        if (rowsToSplit.length > 0) {\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            let index = 0;\r\n            chunks.forEach(async (arr) => {\r\n                this.getRowsAsync(arr, filters).then(async (dt) => {\r\n                    index++;\r\n                    data = [...data, ...dt];\r\n                    if (index === chunks.length) {\r\n                        let dtSet = [...firstResult, ...data];\r\n                        if (searchValue !== \"\") {\r\n                            const searchKey = String(searchValue).toLowerCase();\r\n                            dtSet = dtSet.filter((item) => {\r\n                                return Object.values(item)\r\n                                    .toString()\r\n                                    .toLowerCase()\r\n                                    .includes(searchKey);\r\n                            });\r\n                        }\r\n\r\n                        dtSet = this.getSingleSortResult(dtSet);\r\n                        if (\r\n                            sortingParamsObjectList &&\r\n                            sortingParamsObjectList.length > 0\r\n                        ) {\r\n                            dtSet = this.groupSort(\r\n                                sortingParamsObjectList,\r\n                                dtSet\r\n                            );\r\n                        }\r\n                        const rw = dtSet.slice(0, pageIndex * pageRowCount);\r\n                        await this.setStateAsync({\r\n                            subDataSet: dtSet,\r\n                            rows: rw,\r\n                            tempRows: rw,\r\n                            count: rw.length\r\n                        });\r\n                        if (dtSet.length === 0) {\r\n                            this.handleWarningStatus();\r\n                        } else {\r\n                            this.closeWarningStatus(rw);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    getRowsAsync = async (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    getrows = (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual deselect of rows\r\n     * @param {*} rows is the deselected row\r\n     */\r\n    onRowsDeselected = (rows) => {\r\n        const { selectedIndexes } = this.state;\r\n        const rowIndexes = rows.map((r) => r.rowIdx);\r\n        this.setState({\r\n            selectedIndexes: selectedIndexes.filter(\r\n                (i) => rowIndexes.indexOf(i) === -1\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To update the cell/cells with the edited values\r\n     * @param {*} fromRow is the row from which this edit is performed\r\n     * @param {*} toRow is the row upto which this edit is performed\r\n     * @param {*} updated is the value of change\r\n     * @param {*} action is type of edit action performed\r\n     */\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n        let updatedArray = [];\r\n        let updatedValue = \"\";\r\n        console.log({ fromRow, toRow, updated, action });\r\n        console.log(\"change\", updated);\r\n        for (let update in updated) {\r\n            updatedValue = updated[update];\r\n        }\r\n        if (action === \"CELL_UPDATE\") {\r\n            const arr = FormulaProcessor(updatedValue);\r\n            let colKeyArray = [];\r\n            if (arr.length > 0) {\r\n                arr.forEach((ar) => {\r\n                    this.state.columns.forEach((item, index) => {\r\n                        if (index === ar - 1) {\r\n                            colKeyArray.push(item.key);\r\n                        }\r\n                    });\r\n                });\r\n                let tempSum = 0;\r\n                colKeyArray.forEach((item) => {\r\n                    tempSum += Number(this.state.rows[fromRow][item]);\r\n                });\r\n                updated[Object.keys(updated)] = tempSum;\r\n                console.log(updated[Object.keys(updated)]);\r\n                this.setState({\r\n                    prevRow: fromRow,\r\n                    prevAction: action,\r\n                    columnKeyArray: colKeyArray\r\n                });\r\n            }\r\n        }\r\n        if (action === \"CELL_DRAG\") {\r\n            if (this.state.prevAction === \"CELL_UPDATE\") {\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    console.log(this.state.columnKeyArray);\r\n                    updatedArray = [...this.state.columnKeyArray];\r\n                    this.setState({ prevRow: fromRow, prevAction: action });\r\n                }\r\n                let columnName = \"\";\r\n                const filter = this.formulaAppliedCols.filter((item) => {\r\n                    if (\r\n                        updated[item.key] !== null &&\r\n                        updated[item.key] !== undefined\r\n                    ) {\r\n                        columnName = item.key;\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                if (filter.length > 0) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n\r\n                    updated = applyFormula(updated, columnName);\r\n                }\r\n            }\r\n        }\r\n        if (action !== \"COPY_PASTE\") {\r\n            if (\r\n                action === \"CELL_DRAG\" &&\r\n                this.state.prevAction === \"CELL_UPDATE\"\r\n            ) {\r\n                this.setState((state) => {\r\n                    const rows = state.rows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(rows[i][item]);\r\n                        });\r\n                        rows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n                    return {\r\n                        rows\r\n                    };\r\n                });\r\n\r\n                this.setState((state) => {\r\n                    const filteringRows = state.filteringRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(filteringRows[i][item]);\r\n                        });\r\n                        filteringRows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n\r\n                    return {\r\n                        filteringRows\r\n                    };\r\n                });\r\n                this.setState((state) => {\r\n                    const tempRows = state.tempRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let tempSum = 0;\r\n                        updatedArray.forEach((item) => {\r\n                            tempSum += Number(tempRows[i][item]);\r\n                        });\r\n                        tempRows[i][Object.keys(updated)] = tempSum;\r\n                    }\r\n\r\n                    return {\r\n                        tempRows\r\n                    };\r\n                });\r\n            } else {\r\n                this.props.updatedRows({ fromRow, toRow, updated, action });\r\n                this.setState((state) => {\r\n                    const rows = state.rows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        rows[i] = {\r\n                            ...rows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        rows\r\n                    };\r\n                });\r\n\r\n                this.setState((state) => {\r\n                    const filteringRows = state.filteringRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        filteringRows[i] = {\r\n                            ...filteringRows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        filteringRows\r\n                    };\r\n                });\r\n                this.setState((state) => {\r\n                    const tempRows = state.tempRows.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        tempRows[i] = {\r\n                            ...tempRows[i],\r\n                            ...updated\r\n                        };\r\n                    }\r\n\r\n                    return {\r\n                        tempRows\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        if (this.props.updateCellData) {\r\n            this.props.updateCellData(\r\n                this.state.tempRows[fromRow],\r\n                this.state.tempRows[toRow],\r\n                updated,\r\n                action\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual select of rows\r\n     * @param {*} rows is the selected row\r\n     */\r\n    onRowsSelected = (rows) => {\r\n        const { selectedIndexes } = this.state;\r\n        const { selectBulkData } = this.props;\r\n        this.setState({\r\n            selectedIndexes: selectedIndexes.concat(rows.map((r) => r.rowIdx))\r\n        });\r\n        if (selectBulkData) {\r\n            selectBulkData(rows);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To filter the multiple columns\r\n     * @param {*} value is the  incoming filtering event\r\n     */\r\n    handleFilterChange = async (value) => {\r\n        const {\r\n            dataSet,\r\n            pageRowCount,\r\n            junk,\r\n            pageIndex,\r\n            searchValue,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n            junk[value.column.key] = value;\r\n        } else {\r\n            delete junk[value.column.key];\r\n        }\r\n        this.setState({ junk });\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const firstPage = dataSet.slice(0, pageRowCount);\r\n        let data = this.getrows(firstPage, junk);\r\n        await this.setStateAsync({\r\n            rows: data,\r\n            tempRows: data,\r\n            count: data.length,\r\n            subDataSet: hasFilter ? data : [],\r\n            pageIndex: hasFilter ? pageIndex : 1\r\n        });\r\n        if (hasFilter) {\r\n            const rowsRemaining = dataSet.slice(pageRowCount, dataSet.length);\r\n            this.getSlicedRows(junk, rowsRemaining, data);\r\n        } else {\r\n            let rowsRemaining = dataSet; // .slice(this.state.pageRowCount, this.state.dataSet.length);\r\n            if (searchValue !== \"\") {\r\n                const searchKey = String(searchValue).toLowerCase();\r\n                rowsRemaining = rowsRemaining.filter((item) => {\r\n                    return Object.values(item)\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(searchKey);\r\n                });\r\n            }\r\n            rowsRemaining = this.getSingleSortResult(rowsRemaining);\r\n\r\n            if (sortingParamsObjectList && sortingParamsObjectList.length > 0) {\r\n                rowsRemaining = this.groupSort(\r\n                    sortingParamsObjectList,\r\n                    rowsRemaining\r\n                );\r\n            }\r\n\r\n            const rw = rowsRemaining.slice(0, pageIndex * pageRowCount);\r\n            await this.setStateAsync({\r\n                subDataSet: rowsRemaining,\r\n                rows: rw,\r\n                tempRows: rw,\r\n                count: rw.length\r\n            });\r\n            data = rw;\r\n        }\r\n        if (data.length === 0) {\r\n            this.handleWarningStatus();\r\n        } else {\r\n            this.closeWarningStatus(data);\r\n        }\r\n    };\r\n\r\n    isAtBottom = (event) => {\r\n        const { target } = event; // as HTMLDivElement;\r\n        const isbtm =\r\n            target.clientHeight + target.scrollTop >= target.scrollHeight - 10;\r\n        return isbtm;\r\n    };\r\n\r\n    isSubset() {\r\n        const {\r\n            junk,\r\n            searchValue,\r\n            sortingParamsObjectList,\r\n            sortDirection\r\n        } = this.state;\r\n        if (\r\n            Object.keys(junk).length > 0 ||\r\n            sortDirection !== \"NONE\" ||\r\n            searchValue !== \"\" ||\r\n            (sortingParamsObjectList && sortingParamsObjectList.length > 0)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadMoreRows = (from, newRowsCount) => {\r\n        return new Promise((resolve) => {\r\n            // const hasFilter = Object.keys(this.state.junk).length > 0;\r\n            const { dataSet, subDataSet } = this.state;\r\n            let to = from + newRowsCount;\r\n            if (this.isSubset() && subDataSet.length > 0) {\r\n                to = to < subDataSet.length ? to : subDataSet.length;\r\n                resolve(subDataSet.slice(from, to));\r\n            } else {\r\n                resolve(dataSet.slice(from, to));\r\n            }\r\n        });\r\n    };\r\n\r\n    handleScroll = async (event) => {\r\n        if (!this.isAtBottom(event)) return;\r\n        const { pageIndex, pageRowCount, rows } = this.state;\r\n        const newRows = await this.loadMoreRows(\r\n            pageIndex * pageRowCount,\r\n            pageRowCount\r\n        );\r\n        if (newRows && newRows.length > 0) {\r\n            let length = 0;\r\n            this.setState((prev) => {\r\n                length = prev.rows.length + newRows.length;\r\n            });\r\n            this.setState({\r\n                rows: [...rows, ...newRows],\r\n                count: length,\r\n                pageIndex: pageIndex + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    globalSearchLogic = (e, updatedRows) => {\r\n        const { pageIndex, pageRowCount } = this.state;\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = updatedRows.filter((item) => {\r\n            return Object.values(item)\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ warningStatus: \"invalid\", rows: [], count: 0 });\r\n        } else {\r\n            const rowSlice = filteredRows.slice(0, pageIndex * pageRowCount);\r\n            this.setState({\r\n                warningStatus: \"\",\r\n                rows: rowSlice,\r\n                subDataSet: filteredRows,\r\n                count: rowSlice.length\r\n            });\r\n        }\r\n    };\r\n\r\n    handleWarningStatus = () => {\r\n        this.setState({ warningStatus: \"invalid\" });\r\n    };\r\n\r\n    closeWarningStatus = (val) => {\r\n        const {\r\n            pageIndex,\r\n            pageRowCount,\r\n            dataSet,\r\n            sortDirection,\r\n            sortColumn,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        let rVal = val;\r\n        if (!rVal) {\r\n            const hasSingleSortkey =\r\n                sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n            const hasGropSortKeys =\r\n                sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n\r\n            let dataRows = this.getFilterResult([...dataSet]);\r\n            if (hasSingleSortkey) {\r\n                dataRows = this.getSingleSortResult(dataRows);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                dataRows = this.groupSort(sortingParamsObjectList, dataRows);\r\n            }\r\n            rVal = dataRows.slice(0, pageIndex * pageRowCount);\r\n        }\r\n        this.setState({ warningStatus: \"\", rows: rVal, count: rVal.length });\r\n    };\r\n\r\n    save = () => {\r\n        const { saveRows } = this.props;\r\n        const { dataSet } = this.state;\r\n        saveRows(dataSet);\r\n    };\r\n\r\n    clearAllFilters = () => {\r\n        const {\r\n            pageIndex,\r\n            pageRowCount,\r\n            dataSet,\r\n            sortDirection,\r\n            sortColumn,\r\n            sortingParamsObjectList\r\n        } = this.state;\r\n        const hasSingleSortkey = sortDirection !== \"NONE\" && sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            sortingParamsObjectList && sortingParamsObjectList.length > 0;\r\n\r\n        let dtSet = this.getSearchResult(dataSet);\r\n        if (hasSingleSortkey) {\r\n            dtSet = this.getSingleSortResult(dtSet);\r\n        }\r\n        if (hasGropSortKeys) {\r\n            dtSet = this.groupSort(sortingParamsObjectList, dtSet);\r\n        }\r\n        const rVal = dtSet.slice(0, pageIndex * pageRowCount);\r\n        this.setState({\r\n            rows: rVal,\r\n            count: rVal.length,\r\n            subDataSet: dtSet\r\n        });\r\n    };\r\n\r\n    getSearchResult = (data) => {\r\n        const { searchValue } = this.state;\r\n        let dtSet = data;\r\n        const searchKey = String(searchValue).toLowerCase();\r\n        if (searchKey !== \"\") {\r\n            dtSet = dtSet.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        return dtSet;\r\n    };\r\n\r\n    getFilterResult = (data) => {\r\n        const { junk } = this.state;\r\n        let dataRows = [];\r\n        if (Object.keys(junk).length > 0) {\r\n            const rowsToSplit = [...data];\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            chunks.forEach((arr) => {\r\n                const dt = this.getrows(arr, junk);\r\n                dataRows = [...dataRows, ...dt];\r\n            });\r\n        } else {\r\n            dataRows = [...data];\r\n        }\r\n        return dataRows;\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            count,\r\n            searchValue,\r\n            sortingPanelComponent,\r\n            columnReorderingComponent,\r\n            exportComponent,\r\n            warningStatus,\r\n            filteringRows,\r\n            height,\r\n            columns,\r\n            rows,\r\n            selectedIndexes\r\n        } = this.state;\r\n        return (\r\n            <div onScroll={this.handleScroll} className=\"iCargo__custom\">\r\n                <div className=\"neo-grid-header\">\r\n                    <div className=\"neo-grid-header__results\">\r\n                        Showing &nbsp;<strong> {count} </strong> &nbsp; records\r\n                    </div>\r\n                    <div className=\"neo-grid-header__utilities\">\r\n                        <div className=\"txt-wrap\">\r\n                            <input\r\n                                data-testid=\"globalSearch\"\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    this.handleSearchValue(e.target.value);\r\n                                    const srchRows = this.getSearchRecords(e);\r\n                                    this.globalSearchLogic(e, srchRows);\r\n                                }}\r\n                                value={searchValue}\r\n                                className=\"txt\"\r\n                                placeholder=\"Search\"\r\n                            />\r\n                            <i>\r\n                                <IconSearch />\r\n                            </i>\r\n                        </div>\r\n                        <div\r\n                            role=\"presentation\"\r\n                            id=\"openSorting\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.sortingPanel}\r\n                        >\r\n                            <IconGroupSort />\r\n                        </div>\r\n                        {sortingPanelComponent}\r\n                        <div\r\n                            role=\"presentation\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.columnReorderingPannel}\r\n                        >\r\n                            <IconColumns />\r\n                        </div>\r\n                        {columnReorderingComponent}\r\n                        <div\r\n                            role=\"presentation\"\r\n                            className=\"filterIcons\"\r\n                            onClick={this.exportColumnData}\r\n                        >\r\n                            <IconShare />\r\n                        </div>\r\n                        {exportComponent}\r\n                    </div>\r\n                </div>\r\n                <ErrorMessage\r\n                    className=\"errorDiv\"\r\n                    status={warningStatus}\r\n                    closeWarningStatus={() => {\r\n                        this.closeWarningStatus();\r\n                    }}\r\n                    clearSearchValue={this.clearSearchValue}\r\n                />\r\n                <ExtDataGrid\r\n                    toolbar={<Toolbar enableFilter />}\r\n                    getValidFilterValues={(columnKey) =>\r\n                        this.getValidFilterValues(filteringRows, columnKey)\r\n                    }\r\n                    minHeight={height}\r\n                    columns={columns}\r\n                    rowGetter={(i) => rows[i]}\r\n                    rowsCount={rows.length}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    enableCellSelect\r\n                    onClearFilters={() => {\r\n                        this.setState({ junk: {} });\r\n                        this.clearAllFilters();\r\n                    }}\r\n                    onColumnResize={(idx, width) =>\r\n                        console.log(\r\n                            `Column ${idx} has been resized to ${width}`\r\n                        )\r\n                    }\r\n                    onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n                    rowSelection={{\r\n                        showCheckbox: true,\r\n                        enableShiftSelect: true,\r\n                        onRowsSelected: this.onRowsSelected,\r\n                        onRowsDeselected: this.onRowsDeselected,\r\n                        selectBy: {\r\n                            indexes: selectedIndexes\r\n                        }\r\n                    }}\r\n                    onGridSort={(sortColumn, sortDirection) =>\r\n                        this.sortRows(filteringRows, sortColumn, sortDirection)\r\n                    }\r\n                    globalSearch={this.globalSearchLogic}\r\n                    handleWarningStatus={this.handleWarningStatus}\r\n                    closeWarningStatus={this.closeWarningStatus}\r\n                    // cellRangeSelection={{\r\n                    //   onComplete: this.setSelection,\r\n                    // }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSpreadsheet.propTypes = {\r\n    airportCodes: PropTypes.any,\r\n    rows: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    status: PropTypes.any,\r\n    count: PropTypes.any,\r\n    updateCellData: PropTypes.any,\r\n    selectBulkData: PropTypes.any,\r\n    pinnedReorder: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    globalSearchLogic: PropTypes.any,\r\n    closeWarningStatus: PropTypes.any,\r\n    dataSet: PropTypes.any,\r\n    pageSize: PropTypes.any,\r\n    updatedRows: PropTypes.any,\r\n    saveRows: PropTypes.any\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"names":["ExtDataGrid","ReactDataGrid","componentDidMount","_mounted","dataGridComponent","document","getElementsByClassName","window","addEventListener","metricsUpdated","componentWillUnmount","removeEventListener","applyFormula","obj","columnName","val","item","toString","charAt","operation","split","value","substring","length","reduce","a","b","Number","Math","min","max","DatePicker","React","Component","constructor","props","state","Date","input","getInputNode","bind","getValue","onValueChanged","ev","setState","target","updated","date","dateTimeFormat","Intl","DateTimeFormat","year","month","day","formatToParts","column","key","render","ref","propTypes","PropTypes","string","SEARCH_NOT_FOUNT_ERROR","ErrorMessage","status","setStatus","useState","useEffect","closeWarningStatus","clearSearchValue","IconClose","ItemTypes","COLUMN","style","cursor","ColumnItem","id","text","moveColumn","findColumn","originalIndex","index","isDragging","drag","useDrag","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","any","ColumnsList","columnsArray","columns","setColumns","filter","c","indexOf","atIndex","update","$splice","values","temp","forEach","push","handleReorderList","display","flexWrap","map","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","ColumnReordering","resetColumnReorderList","columnReorderEntityList","name","leftPinnedColumList","isAllSelected","selectAllToColumnReOrderList","existingColumnReorderEntityList","isExistingAllSelect","addToColumnReorderEntityList","typeToBeAdded","columnSelectList","existingLeftPinnedList","includes","indexOfInsertion","findIndex","splice","filterColumnReorderList","e","searchKey","String","toLowerCase","existingList","filtererdColumnReorderList","createColumnsArrayFromProps","colsList","maxLeftPinnedColumns","IconJustify","reArrangeLeftPinnedColumn","columHeaderName","unshift","subItem","reordered","handleheaderNameList","headerKeys","existingPinnedHeadersList","maxLeftPinnedColumn","handleClick","closeColumnReOrdering","updateTableAsPerRowChooser","color","MultiBackend","CARD","Card","moveCard","findCard","SortingList","sortsArray","cards","setCards","card","handleReorderListOfSort","App","add","rowList","sortingOrderList","columnFieldValue","rowLists","existingSortingOrderList","sortBy","order","sortOn","copy","i","JSON","parse","stringify","clearAll","clearAllSortingParams","errorMessage","remove","sortingOrderLists","rowsValue","row","IconNav","captureSortingFeildValues","SortCopy","SortDelete","event","sortingKey","undefined","updateTableAsPerSortCondition","unique","Set","showError","some","element","size","setTableAsPerSortingParams","reOrderedIndexList","handleTableSortSwap","closeSorting","sortingParamsObjectList","ExportData","resetColumnExportList","columnEntityList","selectAllToColumnList","columnsList","addToColumnEntityList","existingColumnEntityList","selectDownLoadType","downLaodFileType","checked","exportRowData","columnValueList","filteredRow","filteredRowValues","filteredRowHeader","rows","rowLength","filteredColumnVal","rowFilteredValues","rowFilteredHeader","downloadPDF","downloadXLSFile","downloadCSVFile","unit","orientation","doc","JsPdf","setFontSize","title","content","startY","head","body","tableWidth","headStyles","fillColor","theme","margin","top","right","bottom","left","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","href","URL","createObjectURL","link","createElement","download","appendChild","click","removeChild","exportValidation","columnLength","fileLength","clickTag","warning","closeExport","columnSearchLogic","IconPdf","IconExcel","IconCsv","FormulaProcessor","expression","columnArray","match","console","log","RegCode","exp","exec","parameter1","groups","one","parameter2","more","RegCode1","exper1","moreParameters","RegCodes","expers","RegCode2","exper2","DropDownEditor","Editors","selectors","Data","Selectors","swapList","swapSortList","AutoCompleteFilter","NumericFilter","Filters","defaultCmp","getCmpFunc","primer","reverse","cmp","fields","nFields","arguments","field","A","B","result","l","Spreadsheet","reorderedSwap","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","slice","arrayMove","headerItem","frozen","toTop","sort","tempList","pinnedReorder","arr","oldIndex","newIndex","k","columnReorderingPannel","selectedIndexes","headerNameList","columnReorderingComponent","handleSearchValue","searchValue","filteringRows","sortingPanel","columnField","sortingPanelComponent","Sorting","args","sortingOrderSwapList","sortDirection","sortColumn","dataSet","pageIndex","pageRowCount","hasSingleSortkey","dataRows","getFilterResult","Object","getSingleSortResult","subDataSet","exportColumnData","exportData","isSubset","exportComponent","tableSortList","junk","hasFilter","keys","hasSearchKey","existingRows","sortingOrderNameList","nameOfItem","rowItem","toCamelCase","typeOfItem","parseInt","existingSortingOrderSwapList","stringOfItemIndex","join","groupSort","str","replace","$1","toUpperCase","sortColumns","sortDirections","comparer","sortRows","hasGropSortKeys","dtRows","getSlicedRows","filters","rowsToSplit","firstResult","chunks","getRowsAsync","then","dt","dtSet","rw","setStateAsync","tempRows","count","handleWarningStatus","filterVal","getRows","getrows","onRowsDeselected","rowIndexes","r","rowIdx","onGridRowsUpdated","fromRow","toRow","action","updatedArray","updatedValue","colKeyArray","ar","tempSum","prevRow","prevAction","columnKeyArray","formulaAppliedCols","updatedRows","updateCellData","onRowsSelected","selectBulkData","concat","handleFilterChange","filterTerm","firstPage","rowsRemaining","isAtBottom","isbtm","clientHeight","scrollTop","scrollHeight","loadMoreRows","from","newRowsCount","Promise","resolve","to","handleScroll","newRows","prev","globalSearchLogic","filteredRows","warningStatus","rowSlice","rVal","saveRows","clearAllFilters","getSearchResult","pageSize","dataSetVar","height","colItem","editor","dataSource","filterType","filterRenderer","formulaApplicable","UNSAFE_componentWillReceiveProps","stateObj","componentDidUpdate","resizeEvent","createEvent","initEvent","dispatchEvent","getValidFilterValues","columnId","getSearchRecords","rowsToSearch","startsWith","srchRows","IconSearch","IconGroupSort","IconColumns","IconShare","columnKey","idx","width","showCheckbox","enableShiftSelect","selectBy","indexes","airportCodes"],"mappings":"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"}